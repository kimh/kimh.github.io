<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: criu | Program Is Made At Night]]></title>
  <link href="http://kimh.github.io/blog/categories/criu/atom.xml" rel="self"/>
  <link href="http://kimh.github.io/"/>
  <updated>2018-02-01T22:08:14+09:00</updated>
  <id>http://kimh.github.io/</id>
  <author>
    <name><![CDATA[kim hirokuni]]></name>
    <email><![CDATA[yangkookkim@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CRIUを使ってDockerコンテナの停止/再開に挑戦]]></title>
    <link href="http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp/"/>
    <updated>2014-06-22T21:18:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp</id>
    <content type="html"><![CDATA[<p><img src="/images/criu.jpeg" alt="" /></p>

<h3>結論: 2014/6の時点ではCRIUを使ってDockerコンテナの停止/再開はできないという少し残念な結果でこの記事は終わります。しかし、記事を読んでもらえればCRIUの面白さはわかってもらえると思います。</h3>

<p>Dockerが急速に広まったことで、LXCがVMWareやXenなどのVMに対して持つ利点はとても明確になりました。</p>

<p>しかし、VMにあってLXCにはない機能が一つあります。それは、コンテナの停止/再開によるコンテナの状態の保存です。</p>

<p>ここで<a href="http://criu.org/Main_Page">CRIU</a>の出番です。</p>

<p>CRIUはいわゆるCR(checkpoint/restart)ツールです。走っているプロセスを途中で止めてファイルに保存して、いつでも途中からプロセスを再開することができます。</p>

<p>LXCコンテナはプロセスなので、CRIUを使えばコンテナの停止/再開ができそうな気がしますが、本当にできるでしょうか？</p>

<p>この記事では、CRIUをインストールしてDockerコンテナの停止/再開ができるかどうか試してみます。</p>

<h2>CRIUをインスールする</h2>

<h3>カーネルを再構築する</h3>

<p>CRIUを動かすためには、CRIUが必要とするカーネルパラメータが有効になったカーネルを使わないといけません。今回はVagrat UbuntuをLXCのホストマシンとして使うのですが、既存のVagrant Boxで必要なカーネルパラメータが有効になっているものはなさそうでした。</p>

<p>なので、まずはカーネルの再構築から始めないといけません。カーネルの再構築と言うと敷居が高そうですが、実際はとても簡単です。</p>

<p>今回は<a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">公式Ubuntu14.04 cloud image</a>を使います。</p>

<p>まずは、このボックスを追加します。</p>

<p><code>sh
$ vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
$ vagrant init ubuntu14.04
</code></p>

<p> <code>vagrant up</code> コマンドを打つ前に、CPUとメモリーを増やしましょう。遅いマシンだと再構築にはとても時間がかかります。2コア、2048Mのメモリがあれば大丈夫だと思います。</p>

<p> <code>Vagrantfile</code> をエディタで開いて、以下を追加してください。</p>

<p><code>
config.vm.provider :virtualbox do |vb|
  vb.customize ["modifyvm", :id, "--memory", "2048"]
  vb.customize ["modifyvm", :id, "--cpus", 2]
end
</code></p>

<p>終わったら、<code>vagrant up &amp;&amp; vagrant ssh</code>してログインしてください。rootユーザになって再構築に必要なパッケージをインストールします。</p>

<p><code>sh
$ apt-get -y update
$ apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</code></p>

<p>インストールしたら、<code>/usr/src/linux-source-&lt;kernel version&gt;</code> というディレクトリが作成されているはずです。そのディレクトリに移動します。</p>

<p><code>sh
$ cd /usr/src/linux-source-&lt;kernel version&gt;
$ tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
$ cd ./linux-source-&lt;kernel version&gt;
</code></p>

<p>次はカーネルのコンフィグファイルが必要になります。</p>

<p>gistにアップロードしたのを使ってもらえれば、自分でコンフィグをする必要はありません。以下のコマンドを入力してください。(カレントディレクトリをKernelのソースを展開したディレクトリに変更しておくのを忘れずに)</p>

<p><code>sh
$ curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</code></p>

<p>もし、CRIUを動かすためにどのオプションが必要か知りたい場合は<a href="http://criu.org/Installation#Kernel_configuration">ここ</a>にリストがあります。</p>

<p> <code>.config</code>ファイルを準備したら、再構築の準備完了です。</p>

<p><strong>もう一度確認してください。CPUとメモリは増やしましたか？もししていないと、とても長い時間待たされることになります。</strong></p>

<p><code>sh
$ export LC_CTYPE=C
$ make-kpkg clean
$ CONCURRENCY_LEVEL=4 make-kpkg --rootcmd fakeroot --initrd --revision=`date +%Y%m%d` kernel_image kernel_headers
</code></p>

<p>ビルドが完了したら、<code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> と <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> というファイルが <code>/usr/src/</code> ディレクトリに作成された思います。</p>

<p>さっそくインストールしましょう。</p>

<p><code>sh
$ dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
$ dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
$ reboot
</code></p>

<p>再起動したらCRIUが使えるカーネルで動いているはずです。</p>

<h3>CRIUをソースからコンパイルする</h3>

<p>次はCRIUをインストールします。Ubuntuは最新のパッケージを用意していないので、自分でソースからコンパイルしないといけません。</p>

<p><code>sh
$ apt-get install bsdmainutils build-essential libprotobuf-c0-dev linux-headers-generic protobuf-c-compiler
$ mkdir /src
$ cd /src
$ curl http://download.openvz.org/criu/criu-1.3-rc2.tar.bz2 | tar -jxf-
$ make -C criu-1.3-rc2/
$ cp criu-1.3-rc2/criu /usr/local/sbin/
</code></p>

<p>これでCRIUのインストールは完了です。ちゃんとインストールされているか確認しましょう。CRIUにはそのためのコマンドがあります。</p>

<p><code>sh
$ criu check --ms
Warn  (tun.c:55): Skipping tun support check
Warn  (cr-check.c:259): Skipping mnt_id support check
Looks good.
</code></p>

<p> <code>Looks good.</code>が表示されましたか？いくつか警告がでますが、無視して構いません。</p>

<p>コンテナに対して使う前に、まずは普通のプロセスを停止/再開してみましょう。以下の例は<a href="http://criu.org/Simple_loop">CRIUのHOWTOページ</a>からです。</p>

<p>まず、ただループするだけのスクリプトを用意します。</p>

<p>```
$ cat > test.sh &lt;&lt;-EOF</p>

<h1>!/bin/sh</h1>

<p>while true; do
 date
 sleep 1
done
EOF</p>

<p>$ chmod +x test.sh
$ ./test.sh
```</p>

<p>プロセスを停止するには<code>criu dump</code>コマンドを使います。</p>

<p>```sh</p>

<h1>criuを実行するためにはrootじゃないといけない</h1>

<p>$ sudo -s
$ export PID=<code>pgrep -f test.sh</code>
$ mkdir /tmp/test
$ criu dump -t $PID &mdash;images-dir /tmp/test &mdash;shell-job
```</p>

<p>もし、ダンプが成功したら<code>/tmp/test</code>ディレクトリ配下に沢山のファイルができているはずです。</p>

<p><code>sh
$ ls /tmp/test
cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</code></p>

<p>今度はプロセスを再開してみましょう。<code>criu restore</code>コマンドを使います。</p>

<p><code>sh
$ criu restore -t $PID --images-dir /tmp/test  --shell-job
</code></p>

<p>プロセスが問題なく再開されたら<code>test.sh</code>が<code>date</code>コマンドの出力をターミナルに出すはずです。</p>

<h2>CRIUでコンテナを停止/再開してみる</h2>

<p>ここまでは大丈夫ですか？では、いよいよDockerコンテナに使ってみましょう。DockerはこのVagrantにはインストールされていないので、まずインストールしましょう。</p>

<p><code>sh
$ apt-get install docker.io jq
$ ln -sf /usr/bin/docker.io /usr/local/bin/docker
$ sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io
</code></p>

<p>インストールしたら、簡単なコマンドをコンテナに実行させます。</p>

<p><code>sh
$ docker run -t -i ubuntu /bin/bash
</code></p>

<p>コンテナを停止するにはプロセスIDを知る必要があります。</p>

<p><code>sh
$ ID=`docker ps -l -q`
$ PID=`docker inspect $ID | jq '.[0].State.Pid'`
</code></p>

<p>いよいよ、苦労が報われる時です。コンテナを停止してみましょう！！</p>

<p><code>sh
$ criu dump -t $PID --images-dir /tmp/docker
Error (mount.c:449): 102:./dev/console doesn't have a proper root mount
Error (cr-dump.c:1882): Dumping FAILED.
</code></p>

<p>あれ？CRIUはエラーを吐いてしまいました。ダンプに失敗したようです。エラーメッセージをGoogleで調べてみると、以下のスレッドを見つけました。</p>

<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>ガーン。どうやら、現状のCRIUではLXCのの停止/再開はできないみたいです。でも、<a href="http://criu.org/LXC">ここのページ</a>にはCRIUを使ってLXCを停止/再開する方法が書かれていますよ。Dockerは内部でLXCを使っているので動くはずじゃ、、、</p>

<p>以下は同じスレッドに書かれていました。</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>要するに、CRIUはcgroupsを2014/06の時点ではサポートしていないらしいです。でも、Dockerが使っているLXCのテンプレートはcgroupsを使っているようです。よって、CRIUではDockerコンテナの停止/再開はできないみたいです。</p>

<p>残念な結果です。。。</p>

<h2>結論</h2>

<p>今回の実験で、CRIU v1.3ではDockerコンテナの停止/再開はできないことがわかりました。CRIUがまだcgroupsに対応していないからです。</p>

<p>今回は少し残念な結果になってしまいましたが、ここまで読んでもらえた方にはCRIUの可能性がわかってもらえたかと思います。</p>

<p>CRIUがLXCのエコシステムにもたらす将来の可能性に対して、このプロジェクトの認知度はとても低いです。この記事を読んでくださった方は、今すぐ<a href="https://github.com/xemul/criu">Github</a>でスターしてウォッチしましょう！このブログでもこれから色々CRIUについて書いて行きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment To Suspend/Resume Docker Container With CRIU]]></title>
    <link href="http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu/"/>
    <updated>2014-06-22T01:08:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu</id>
    <content type="html"><![CDATA[<p><img src="/images/criu.jpeg" alt="" /></p>

<h3>TL;DR: You CANNOT suspend/resume Docker container as of Jun 2014 and this article ends with a bit disappointed result, but you can still find CRIU is cool thing.</h3>

<p>With the rapid emergence of Docker, everybody knows many advantages of using LXC over virtual machines like VMWare or Xen.</p>

<p>However, there is one thing that LXC is missing: suspend/resume containers.</p>

<p>This is where <a href="http://criu.org/Main_Page">CRIU</a> comes in.</p>

<p>CRIU is so called CR (checkpoint/restart) tool. It suspends a running process and save the memory state into files which can be resumed at anytime.</p>

<p>And since LXC container is a process, we should be able to suspend/resume containers. But does it really work?</p>

<p>In this article, we will install CRIU and see whether we can suspend/resume a Docker container.</p>

<p><strong>Note:</strong>
You may say that LXC already has <a href="http://lxc.sourceforge.net/man/lxc-checkpoint.html">C/R feature</a>. My impression with the tool is not good from the past experience. So, I really didn&rsquo;t try this time.</p>

<h2>Installing CRIU</h2>

<h3>Building Kernel</h3>

<p>To get the fully functional CRIU, you need to have a kernel with certain options are enabled. We use Vagrant box as LXC host machine, but I couldn&rsquo;t find a box with kernel that meets the requirement of CRIU.</p>

<p>So, we need to rebeild kernel. Don&rsquo;t worry, building kernel is not difficult as it sounds.</p>

<p>We will use <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">official Ubuntu14.04 cloud image</a>.</p>

<p>First you need to add the box.</p>

<p><code>sh
$ vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
$ vagrant init ubuntu14.04
</code></p>

<p>Before hit <code>vagrant up</code> command, let&rsquo;s increase CPU cores and memory of the box. Otherwise, it takes a few hours to build kernel. It really depends, but 2 cores with 2048M RAM would be enough.</p>

<p>Open <code>Vagrantfile</code> and add the following lines.</p>

<p><code>
config.vm.provider :virtualbox do |vb|
  vb.customize ["modifyvm", :id, "--memory", "2048"]
  vb.customize ["modifyvm", :id, "--cpus", 2]
end
</code></p>

<p>Once you increase cpu and memory, do <code>vagrant up &amp;&amp; vagrant ssh</code> and ssh into the box. Become root user and install necessary packages to rebuild kernel.</p>

<p><code>sh
$ apt-get -y update
$ apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</code></p>

<p>After installing these, you should have <code>/usr/src/linux-source-&lt;kernel version&gt;</code> directory. Go into the directory and untar the source files.</p>

<p><code>sh
$ cd /usr/src/linux-source-&lt;kernel version&gt;
$ tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
$ cd ./linux-source-&lt;kernel version&gt;
</code></p>

<p>Now you need to prepare a kernel configuration <em>.config</em> file which enables certain options for CRIU.</p>

<p>I uploaded the one to save your time into gist. Just run this command. (Make sure to change current directory to kernel source directory where you just untared.)</p>

<p><code>sh
$ curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</code></p>

<p>If you want to know which kernel options should be enabled, the list is <a href="http://criu.org/Installation#Kernel_configuration">here</a>.</p>

<p>Once you put <code>.config</code> file, you are ready to build kernel.</p>

<p><strong>Once again, make sure you increased cpu and memory in the previous seteps before start building kernel.</strong></p>

<p><code>sh
$ export LC_CTYPE=C
$ make-kpkg clean
$ CONCURRENCY_LEVEL=4 make-kpkg --rootcmd fakeroot --initrd --revision=`date +%Y%m%d` kernel_image kernel_headers
</code></p>

<p>Once the kernel build is done, you should have <code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> and <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> under <code>/usr/src/</code> directory.</p>

<p>Now, let&rsquo;s install them.</p>

<p><code>sh
$ dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
$ dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
$ reboot
</code></p>

<p>Done! Now You are running the kernel that works well with CRIU.</p>

<h3>Compile CRIU from source</h3>

<p>Let&rsquo;s install CRIU now. Ubuntu doesn&rsquo;t provide up-to-date debian package of CRIU, so we need to build from source.</p>

<p><code>sh
$ apt-get install git bsdmainutils build-essential libprotobuf-dev libprotobuf-c0-dev protobuf-c-compiler protobuf-compiler python-protobuf xmlto asciidoc
$ git clone https://github.com/xemul/criu
$ cd criu/
$ make
$ sudo make install
</code></p>

<p>Now CRIU is installed. Let&rsquo;s try if it works. CRIU provides a command for this.</p>

<p><code>sh
$ criu check --ms
Warn  (tun.c:55): Skipping tun support check
Warn  (cr-check.c:259): Skipping mnt_id support check
Looks good.
</code></p>

<p>Did you get <code>Looks good.</code> message? You may get some warnings, but you can ignore them.
Before doing our experiment with containers, let&rsquo;s checkpoint and restore normal Linux process with CRIU. The example comes from <a href="http://criu.org/Simple_loop">one of CRIU HOWTO pages</a>.</p>

<p>First, we need to create a simple loop script.</p>

<p>```
$ cat > test.sh &lt;&lt;-EOF</p>

<h1>!/bin/sh</h1>

<p>while true; do
 date
 sleep 1
done
EOF</p>

<p>$ chmod +x test.sh
$ ./test.sh
```</p>

<p>We can suspend with <code>criu dump</code> command.</p>

<p>```sh</p>

<h1>Need to be root to run criu</h1>

<p>$ sudo -s
$ export PID=<code>pgrep -f test.sh</code>
$ mkdir /tmp/test
$ criu dump -t $PID &mdash;images-dir /tmp/test &mdash;shell-job
```</p>

<p>If the dump succeeds, you should have many files under <code>/tmp/test</code> directory.</p>

<p><code>sh
$ ls /tmp/test
cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</code></p>

<p>Let&rsquo;s resume the process with <code>criu restore</code> command.</p>

<p><code>sh
$ criu restore -t $PID --images-dir /tmp/test  --shell-job
</code></p>

<p>If the process is successfully resumed, <code>test.sh</code> starts printing the output of <code>date</code> command to your terminal.</p>

<h2>Trying CRIU with containers</h2>

<p>So far so good? Now, we will try to suspend and resume Docker containers. Docker is not installed on your vagrant box, so let&rsquo;s install.</p>

<p><code>sh
$ apt-get install docker.io jq
$ ln -sf /usr/bin/docker.io /usr/local/bin/docker
$ sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io
</code></p>

<p>And run a Ubuntu container executing a simple command.</p>

<p><code>sh
$ docker run -t -i ubuntu /bin/bash
</code></p>

<p>To suspend the container, we need to know the pid of the container.</p>

<p><code>sh
$ ID=`docker ps -l -q`
$ PID=`docker inspect $ID | jq '.[0].State.Pid'`
</code></p>

<p>Ok, our long journey is almost done. Let&rsquo;s suspend the container!!</p>

<p><code>sh
$ criu dump -t $PID --images-dir /tmp/docker
Error (mount.c:449): 102:./dev/console doesn't have a proper root mount
Error (cr-dump.c:1882): Dumping FAILED.
</code></p>

<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>What?! But, <a href="http://criu.org/LXC">this page</a> says CRIU supports LXC checkpoint/restart. Docker uses LXC under the hood, so how come it doesn&rsquo;t work?</p>

<p>In the same thread of the discussion, I also found this.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>So, it seems CRIU does not support cgroup at the time of writing this (Jun 2014). However Docker uses LXC template that uses cgroups. Therefore, CRIU doesn&rsquo;t work with Docker containers.</p>

<p>Sigh&hellip;</p>

<h2>Conclusion</h2>

<p>With this experiment, I found that we cannot checkpoint/resume Docker container with CRIU v1.3 because it does not support cgroups.</p>

<p>The result turned out to be a bit disappointed. However, I&rsquo;m sure now you know that CRIU is extremely exciting project.</p>

<p>In contrast to its potential impact to LXC ecosystem, I believe the project is not receiving enough attention, so give a star and start watching their <a href="https://github.com/xemul/criu">Github repo</a> now!! I will definitely cover more things about CRIU on this blog, too.</p>
]]></content>
  </entry>
  
</feed>
