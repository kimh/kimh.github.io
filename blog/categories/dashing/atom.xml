<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dashing | Program Is Made At Night]]></title>
  <link href="http://kimh.github.io/blog/categories/dashing/atom.xml" rel="self"/>
  <link href="http://kimh.github.io/"/>
  <updated>2018-02-01T22:08:14+09:00</updated>
  <id>http://kimh.github.io/</id>
  <author>
    <name><![CDATA[kim hirokuni]]></name>
    <email><![CDATA[yangkookkim@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dashingのカスタムウィジェットを作成する]]></title>
    <link href="http://kimh.github.io/blog/jp/dashing/creating-custom-dashing-widget-ja/"/>
    <updated>2014-02-09T21:05:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/dashing/creating-custom-dashing-widget-ja</id>
    <content type="html"><![CDATA[<p><img src="/images/dashing_preview.png" alt="Dashing Preview" /></p>

<h2>Dashingの紹介</h2>

<p><a href="https://github.com/Shopify/dashing">Dashing</a>というダッシュボード作成のフレームワークをご存知ですか？ Dashingを使えば、上のようなダッシュボードを簡単に作ることができます。いいですよね？欲しいですよね？</p>

<p>この記事では、自分で一からウィジェットを作成する方法を解説していきます。Dashingの基本的な使い方は、<a href="http://shopify.github.io/dashing/">公式ページ</a> を見ればすぐわかると思うのでここでは割愛です。</p>

<h2>目次</h2>

<h4><a href="#creating_sample_dashboard">サンプルダッシュボードの作成</a></h4>

<h4><a href="#files_for_widget">ウィジェットに必要なファイル</a></h4>

<h4><a href="#creating_job_file">ジョブファイルを作成</a></h4>

<h4><a href="#writing_job_code">ジョブのコードを書く</a></h4>

<h4><a href="#writing_widget_code">ウィジェットのコードを書く</a></h4>

<h4><a href="#using_widget">ウィジェットを使う</a></h4>

<h4><a href="#publishing_widget">ウィジェットを公開する</a></h4>

<p><a id="creating_sample_dashboard"></a></p>

<h2>サンプルダッシュボードの作成</h2>

<p>このチュートリアルで使うサンプルのダッシュボードをまず作成しましょう。サンプルダッシュボードは <strong>My Dashboard</strong> という名前にして、<strong>Fizz Buzz</strong> ウィジェットを作成しましょう。
FizzBuzzウィジェットは一定間隔で数字をインクリメントしていって、３で割り切れる数字の場合は<strong>Fizz</strong>と、５で割り切れる場合は<strong>Buzz</strong>と、どちらでも割り切れる場合は、<strong>FizzBuzz</strong>と表示するウィジェットです。</p>

<p><img src="/images/fizzbuzz.png" alt="Widget Preview" /></p>

<p>新しいダッシュボードを作成するのは以下のコマンドを実行するだけです。</p>

<p>```bash
$ dashing new my_dashboard</p>

<pre><code>  create  my_dashboard
  create  my_dashboard/.gitignore
  create  my_dashboard/Gemfile
  create  my_dashboard/README.md
  .... 省略 ....
  create  my_dashboard/widgets/text/text.coffee
  create  my_dashboard/widgets/text/text.html
  create  my_dashboard/widgets/text/text.scss
</code></pre>

<p>```</p>

<p>これでカレントディレクトリに<code>my_dashboard</code>というディレクトリが作成されます。このディレクトリがダッシュボードのベースとなるので、以降の作業はすべて<code>my_dashboard</code>をrootディレクトリとして読んでください。</p>

<p><a id="files_for_widget"></a></p>

<h2>ウィジェットに必要なファイル</h2>

<p>Dashingはフレームワークなので、ルール従って開発すれば簡単に自分のウィジェットを作成することができます。ルールの一つに必要なファイルを用意することと、Dashingの命名規則に従ってそれらのファイル/ディレクトリ名をつけることがあります。</p>

<p>新たにウィジェットを作成するために必要なファイルは主に２つに分かれます。</p>

<p>ひとつはウィジェットのメインとなるウィジェットファイルで<strong>/widgets</strong> ディレクトリ配下に作られます。</p>

<p>もう一つはウィジェットにデータを渡すためのジョブファイルで、<strong>/jobs</strong>ディレクトリ配下に作られます。</p>

<p>まずは、ウィジェットファイルを作成しましょう。</p>

<h3>ウィジェットファイルを作成</h3>

<p>テンプレートとなるファイルをコマンドで作成します。</p>

<p>```bash
$ dashing generate widget fizz_buzz</p>

<pre><code>  create  widgets
  create  widgets/fizz_buzz/fizz_buzz.coffee
  create  widgets/fizz_buzz/fizz_buzz.html
  create  widgets/fizz_buzz/fizz_buzz.scss
</code></pre>

<p>```</p>

<p>簡単に各ファイルの役割を説明すると</p>

<p><code>fizz_buzz.html</code> はウィジェットのhtmlそのものです。ジョブから渡されたデータをこのhtml内でレンダリングします。</p>

<p><code>fizz_buzz.scss</code> はウィジェットのスタイルを書く場所です。</p>

<p><code>fizz_buzz.coffee</code> はウィジェットで使うjavascriptを書くための場所です。ファイル名からもわかる通り、単なるJSファイルではなくcoffee script形式で書かないといけません。(私は普通のJSで書かせてほしいのですが、、、)</p>

<p>ウィジェットの表示に効果をつけたり、ウィジェットの初期化動作などを書くことができます。</p>

<p>このファイルは見た目のそこまでこだわらなければ、ほぼ空っぽでも構いません。これはDashingのいいところの一つだと思います。つまり、javascirptを全然知らなくても、それなりのウィジェットを作ることができるからです。</p>

<p><a id="creating_job_file"></a></p>

<h2>ジョブファイルを作成</h2>

<p>次にジョブファイルを作成します。</p>

<p>```bash
$ dashing generate job fizz_buzz</p>

<pre><code>  create  jobs
  create  jobs/fizz_buzz.rb
</code></pre>

<p>```</p>

<p><code>fizz_buzz.rb</code> はウィジェットに渡すためのデータを作るコードを書くファイルです。ジョブファイルの基本はcronのように定期的に実行される<a href="https://github.com/jmettraux/rufus-scheduler">Rufus Scheduler</a>で、
メインのコードをrufusによっての定期実行されるブロックの中に書いていきます。</p>

<p><code>ruby
SCHEDULER.every '2s' do
  # ここにメインのコードを書く
  # 2sなのでウィジェットのデータが２秒毎に更新されることになる
end
</code></p>

<p><a id="writing_job_code"></a></p>

<h2>ジョブのコードを書く</h2>

<p>まずはウィジェットにデータを提供するためのジョブのコーディングから始めましょう。以下のようなコードになります。</p>

<p><strong>fizz_buzz.rb</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-rb">Gist</a>
```ruby
class FizzBuzz
  FIZZ=3
  BUZZ=5</p>

<p>  def initialize</p>

<pre><code>@current_num = 1
</code></pre>

<p>  end</p>

<p>  def fizzbuzz</p>

<pre><code>if fizzbuzz?
  out = "fizzbuzz"
elsif fizz?
  out = "fizz"
elsif buzz?
  out = "buzz"
else
  out = @current_num
end
go_next
out
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def go_next</p>

<pre><code>@current_num+=1
</code></pre>

<p>  end</p>

<p>  def fizz?</p>

<pre><code>(@current_num % 3) == 0
</code></pre>

<p>  end</p>

<p>  def buzz?</p>

<pre><code>(@current_num % 5) == 0
</code></pre>

<p>  end</p>

<p>  def fizzbuzz?</p>

<pre><code>(@current_num % (FIZZ*BUZZ)) == 0
</code></pre>

<p>  end</p>

<p>end</p>

<p>fb = FizzBuzz.new</p>

<p>SCHEDULER.every &lsquo;5s&rsquo;, :first_in => 0 do
  send_event(&lsquo;fizz_buzz&rsquo;, { value: fb.fizzbuzz })
end
```</p>

<p>1 ~ 43行は普通のRubyで書いたFizzBuzzクラスとそれのインスタンスを作っているだけです。これらのコードは、<code>SCHEDULER</code>の外に書かれているので定期実行はされず、<code>dashing start</code>で
ダッシュボードを起動した時の一度だけ実行されるので一度だけ初期化したい処理 (例えば、ステータスを保存する変数とか)を書きます。</p>

<p>46行目の<code>send_event</code>がジョブファイルのキモです。</p>

<p><code>send_event</code>は一つ目の引数にウィジェットの名前を指定します。この名前は、後述するレイアウトファイルに書くウィジェットのhtmlの<code>data-id</code>属性で指定する名前とマッチしないといけません。</p>

<p>二つめの引数には、ウィジェットに渡すデータをハッシュ形式で指定します。ハッシュのキーは<code>fizz_buzz.html</code>内の<code>data-bind</code>属性で指定している名前と同じにします。</p>

<p><strong>fizz_buzz.html</strong>
```</p>

<div data-bind="value"></div>


<p>```</p>

<p><code>send_event</code>で送ったデータは<code>data-bind="value"</code>属性をもっている<code>div</code>タグの内容として挿入されます。</p>

<p>つまり、<code>send_event('fizz_buzz', { value: "fizzbuzz" })</code> とすると、<code>fizz_buzz.html</code> は以下のように自動で変更されます。</p>

<p>```</p>

<div data-bind="value">fizzbuzz</div>


<p>```</p>

<p>この自動でhtmlの内容が更新される仕組みは<strong>batman.js</strong>の<a href="http://batmanjs.org/docs/api/batman.view_bindings.html">data binding</a>を使って実現しています。</p>

<p><a id="writing_widget_code"></a></p>

<h2>ウィジェットのコードを書く</h2>

<p>ジョブファイルでデータを更新できる準備は整ったので今度はそのデータをウィジェットとして表示するコードを書きます。</p>

<p>まずは、ウィジェットそのもののhtmlを担当するファイルです。今回はチュートリアルなのでシンプルにしています。</p>

<p><strong>fizz_buzz.html</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-html">Gist</a>
```</p>

<h1 class="title" data-bind="title"></h1>


<div data-bind="value"></div>


<p>```</p>

<p>。1行目はウィジェットのタイトルを表示します。このタイトルは後述するレイアウトファイルの<code>data-title</code>属性で指定した値が表示されます。</p>

<p>2行目は前述したように、<code>send_event</code>から送られてくるデータを表示します。</p>

<p>次にウィジェットのスタイルを担当するファイルです。</p>

<p><strong>fizz_buzz.scss</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-scss">Gist</a>
<code>
.widget-fizz-buzz {
  background-color: #444;
}
</code></p>

<p>ここでは、ウィジェットの背景色を指定しています。セレクタは<code>.widget</code>で始めてその後に自分のウィジェットの名前をつなげた名前にします。そして、ブロック内にそのウィジェットに関わるスタイルを書いていきます。</p>

<p><strong>ここで少し命名規則に注意です。</strong> rubyのジョブファイルではウィジェットの名前はアンダースコア区切りの<code>fizz_buzz</code>でしたが、こっちはCSSファイルなので、ウィジェットの名前の単語をつなげるのは<code>-</code>にしないといけません。</p>

<p>最後にウィジェットにエフェクトをつけるcoffee scriptです。何もエフェクトを使わなければここはテンプレートのままでも構いませんが、せっかくなので少しだけエフェクトをつけてみます。</p>

<p><strong>fizz_buzz.coffee</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz-coffee">Gist</a></p>

<p>```ruby
class Dashing.FizzBuzz extends Dashing.Widget</p>

<p>  ready: &ndash;></p>

<pre><code># ここは初期化時に実行したいエフェクトを書く
</code></pre>

<p>  onData: (data) &ndash;></p>

<pre><code>$(@node).fadeOut().fadeIn()
</code></pre>

<p>```</p>

<p><code>$(@node)</code>でウィジェット全体のDOMを取得することができるので、これでデータが更新される度にエフェクトが効きます。</p>

<p><a id="using_widget"></a></p>

<h2>ウィジェットを使ってみる</h2>

<p>これでFizzBuzzウィジェットは出来上がりました。あとはウィジェットを使うだけです。まずはレイアウトファイルを作成します。ここではレイアウトファイルの名前は<code>fizz_buzz_display</code>としましたが、なんでも構いません。</p>

<p>```bash
$ dashing generate dashboard fizz_buzz_display</p>

<pre><code>  exist  dashboards
  create  dashboards/fizz_buzz_display.erb
</code></pre>

<p>```</p>

<p>レイアウトファイルができたら以下のように編集します。</p>

<p><strong>fizz_buzz_display.erb</strong> @ <a href="https://gist.github.com/kimh/8899670#file-fizz_buzz_display-erb">Gist</a>
```</p>

<div class="gridster">
  <ul>
    <li data-row="1" data-col="1" data-sizex="1" data-sizey="1">
      <div data-id="fizz_buzz" data-view="FizzBuzz" data-title="Fizz Buzz"></div>
    </li>
  </ul>
</div>


<p>```</p>

<p><code>data-id</code>属性が一番重要な部分です。ここで表示するウィジェットを指定しています。<code>fizz_buzz.rb</code>内の<code>send_event</code>の第一引数でデータを送るウィジェットを指定しましたが、それはここの名前を指定しています。</p>

<p><code>data-view</code>属性はウィジェットのcoffee scriptのクラスと一致しないといけません。coffee scriptはマッチする<code>data-view</code>を<code>@node</code>にマップします。</p>

<p><code>data-title</code>属性で指定したタイトルが<code>fizz_buzz.html</code>内の<code>data-bind="title"</code>を持つ要素の内容として表示されます。ここでは"Fizz Buzz"と指定しているので</p>

<p>```</p>

<h1 class="title" data-bind="title">Fizz Buzz</h1>


<p>```
となります。</p>

<p>これでFizzBuzzウィジェットが表示されるはずです。<code>dashing start</code>でダッシュボードを起動して、<code>http://localhost:3030/fizz_buzz_display</code>にアクセスしてみてください。ちゃんと表示されたでしょうか？</p>

<p>今回は、チュートリアル用に個別で<code>fizz_buzz_display</code>を作りましたが、FizzBuzzウィジェットは他のダッシュボードでも使えます。使いたければ、</p>

<p><code>
&lt;li data-row="1" data-col="1" data-sizex="1" data-sizey="1"&gt;
  &lt;div data-id="fizz_buzz" data-view="FizzBuzz" data-title="Fizz Buzz"&gt;&lt;/div&gt;
&lt;/li&gt;
</code></p>

<p>をレイアウトファイルに書くだけです。</p>

<p><a id="publishing_widget"></a></p>

<h2>ウィジェットを公開する</h2>

<p>最後に作成したウィジェットは<a href="https://github.com/Shopify/dashing/wiki/Additional-Widgets">公開して使ってもらいましょう。</a></p>

<p>DashingはウィジェットをGistで管理しています。自分のGistページで新たにGistを作成して、ウィジェットに必要なファイル名と同じ名前でGistの内容に各ファイルのコードを書きます。</p>

<p>今回で言えば、以下の４つのファイルを一つのGistに作成します。</p>

<ul>
<li>fizz_buzz.html</li>
<li>fizz_buzz.css</li>
<li>fizz_buzz.coffee</li>
<li>fizz_buzz.rb</li>
</ul>


<p>Gistを作成したら、インストールできるか確認してください。</p>

<p><code>bash
$ dashing install GIST_ID
</code></p>

<p><code>GIST_ID</code>は作成したGistのIDです。また必須ではありませんが、自分のウィジェットの使い方をGistにREADMEとして書いておくのが定番のようです。</p>

<p>正しく動けば、<a href="https://github.com/Shopify/dashing/wiki/Additional-Widgets">Additional Widgets</a>のWikiを修正して登録するのを忘れずに。</p>
]]></content>
  </entry>
  
</feed>
