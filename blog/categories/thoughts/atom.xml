<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughts | Program Is Made At Night]]></title>
  <link href="http://kimh.github.io/blog/categories/thoughts/atom.xml" rel="self"/>
  <link href="http://kimh.github.io/"/>
  <updated>2017-12-18T21:43:29+09:00</updated>
  <id>http://kimh.github.io/</id>
  <author>
    <name><![CDATA[kim hirokuni]]></name>
    <email><![CDATA[yangkookkim@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「ライト、ついてますか」から学ぶ問題発見の心得]]></title>
    <link href="http://kimh.github.io/blog/jp/thoughts/important-things-about-problem-finding-learnd-from-are-your-lights-on-ja/"/>
    <updated>2014-03-20T23:46:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/thoughts/important-things-about-problem-finding-learnd-from-are-your-lights-on-ja</id>
    <content type="html"><![CDATA[<p><img src="/images/lighton.jpg" alt="Lights on?" /></p>

<p>エンジニアの一日は問題解決の連続です。普段は当たり前すぎて意識していませんが、気にしてみるといかにそうであるかがわかります。</p>

<ul>
<li>落ちたサーバを復旧させる</li>
<li>与えられた文字列を正規化するコードを書く</li>
<li>関係者全員のスケジュールが合うようにミーティングをセッティングする</li>
</ul>


<p>優れた解決方法を考えだすには、まず問題を正しく定義しなければいけません。</p>

<p>この記事では問題発見学の名著、「<a href="" title="http://www.amazon.co.jp/%E3%83%A9%E3%82%A4%E3%83%88%E3%80%81%E3%81%A4%E3%81%84%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B%E2%80%95%E5%95%8F%E9%A1%8C%E7%99%BA%E8%A6%8B%E3%81%AE%E4%BA%BA%E9%96%93%E5%AD%A6-%E3%83%89%E3%83%8A%E3%83%AB%E3%83%89%E3%83%BBC%E3%83%BB%E3%82%B4%E3%83%BC%E3%82%B9/dp/4320023684">ライト、ついてますか</a>」 から重要な点を引用して、どのようにすればより良い問題定義ができるかについて書きたいと思います。</p>

<p><strong>注：</strong>引用が英語なのは原本しか読んでいないからです。"訳："とあるところは自分で翻訳しただけなので日本語版の実際の言い回しとは異なります。
また今回読んだKindle版にはページ情報がなかったので、引用元はページ番号ではなくその引用があった章を代わりに書いています。</p>

<h2>問題とは何か？</h2>

<p><strong><em>A problem is a difference between things as desired and things as perceived</em></strong> <strong>（３章）</strong></p>

<p><strong>訳：</strong>問題とはそうあるべき状態と今ある状態の差である</p>

<p>そもそも問題とはなんでしょうか？著者は問題を上記のように定義しています。
問題をこのように定義するといいことがひとつあります。それは、見方を変えることで問題が解決する可能性があることです。</p>

<p>とても時間のかかる処理があるとします。真っ先に思いつく解決方法は処理を早くすることです。しかし、見方を変えて
処理に時間がかかってもいいと考えたらどうでしょうか？バッチ処理にして夜中にやればどうでしょうか？このように見方を変えるだけで
問題そのものをなくすことができます。</p>

<p><strong><em>Don&rsquo;t take their solution method for a problem definition</em></strong> <strong>（４章）</strong></p>

<p><strong>訳：</strong>他人の解決方法を問題の定義としてはいけない</p>

<p>人が問題だと言っていることが本当の問題とは限りません。本に書かれている例が一番わかりやすいので要約して紹介します。</p>

<blockquote><p>会社の購入担当者がある競売で一番有利になる競り方を考えるように命じられました。この競売にはとても複雑なルールがあり
沢山のケースを考慮しなければいけないと考え、考える限りのケース想定してその中で一番いいものを使うことにしました。</p>

<p>ケースの組み合わせは、４の１１乗、4,000,000パターンありそのすべてをシミュレーションするようにプログラマのグループに命じました。
パターンが多いので普通にやると彼らのコンピュータでは１２時間かかってしまい、それだと競売の時間までにぎりぎりです。</p>

<p>プログラマのグループは上司の自分たちの抱えている問題は4,000,000パターンの計算をいかにして高速化することだと言い、アドバイスを求めました。</p>

<p>上司は少し考え、購入担当者の部屋に言って詳しい競売のルールを聞きに行きました。</p>

<p>詳しいルールを理解した上司はベストな競売の方法を一瞬で導きだしました。</p>

<p>ルールを正しく分析すれば、4,000,000パターンの計算など必要なかったのです。</p></blockquote>

<p>この話で学ぶことは、他人（購入担当者とプログラマ）が問題の解決方法だと信じた計算を本当の問題と考えてはいけないということです。
真の問題は4,000,000ケースの計算の高速化ではなく、競売で一番有利な方法を導きだすことなのです。</p>

<h2>問題を解決する前に</h2>

<p>問題がきちんと定義されれば解決することはさほど難しくありません。しかし、ちょっと待ってください。その問題はあなたの問題ですか？
本当にあなたが解決しないといけませんか？まずは、次の質問を自分に問いかけてみましょう。</p>

<p><strong><em>Whose problem is it?</em></strong> <strong>（１１章）</strong></p>

<p><strong>訳：</strong>誰の問題か？</p>

<p>本当にあなたが解決しなければいけませんか？もし、その問題が誰かの問題ならあなたが解決しようとするべきではありません。
もし、あなたの問題でなければ、頼まれないかぎり何もしないのがベストです。私たちは自分の問題解決に時間に忙しいはずですから。</p>

<p><strong><em>Where does this problem come from?</em></strong> <strong>（１４章）</strong></p>

<p><strong>訳：</strong>この問題はどこから来たのか？</p>

<p>この問いも問題が本当に自分の問題なのか調べるのに役立ちます。なぜ自分はその問題に直面しているのか？なぜこんなことになったのか？
自分に落ち度があるか？それとも、誰か他人に巻き込まれたか？</p>

<p>もし、問題の出所が自分であった場合は自分がしていることを正せばいいので解決は比較的簡単です。</p>

<p><strong><em>Ignoring the problem</em></strong> <strong>（３章）</strong></p>

<p><strong>訳：</strong>問題を無視する</p>

<p>時には問題そのものを無視するのもありです。気づかないふりをしていまいましょう。問題は、あるべき状態と現在の状態の差ですが、
人間はすぐに適応する生き物です。最初はみんな問題だと感じてもいつの間にかそれが当たり前のようになるものです。</p>

<p>あなたが作り出したバグのワークアラウンドのために、オペレーションの人に余計な手動の作業が発生したとします。"近い内に直す"と言って、
１年も経てばワークアラウンド作業はオペレーションの業務に組み込まれて、その作業が当たり前のものになります。おめでとう！ <strong>あるべき状態</strong> と <strong>今ある状態</strong> が同じになり問題そのものが消えました。</p>

<p>&hellip;.もちろん、勧められる方法ではありませんがこれも一つの問題解決方法と言えます。</p>

<h2>考えをやめない</h2>

<p>あなたは問題を正しく定義して適切な解答を導き出しました。しかし、まだリラックスはできません。</p>

<p><strong><em>Each solution is the source of the next problem</em></strong> <strong>（７章）</strong></p>

<p><strong>訳：</strong>あるひとつの解決方法は別の新しい問題を生む</p>

<p>私たちが問題を解決してもリラックスできないのは、その解決方法がまた別の問題を生み出すからです。これはエンジニアは直感的に理解していると思います。
PythonやRubyのような動的型付けなスクリプトプログラミング言語はそれまで他の言語が抱えていた問題を沢山解決しました。
インタープリタさえあればどこでも同じコードを走らせることもできるし、対話的にプログラミングすることもできます。
メタプログラミングを使うことで動的にコードを生成することでコードのDRY化をもたらしました。</p>

<p>しかし、今では動的片付け言語がもたらした解決方法は他の問題を生むことは広く知られています。インタープリタを挟むのでスクリプト言語の実行速度は遅く、
メタプログラミングはコードをデバックしずらくして、コードの保守性を下げてしまうことがしばしばあります。</p>

<p>PythonやRubyがもたらした過去の問題への解決は新たな問題を生み、今度は静的型付けの言語がそれらの問題を解決すべく注目されています。そして、この連鎖は恐らくずっと続くでしょう。</p>

<p>これに対してできることはそれほどないはずです。一つ言えるのは、問題への解決方法が新たな問題を生む、ということを認識して常に考えることをやめないことです。</p>

<p><strong><em>The really important thing in dealing with problems is to know that the question is never answered, but that it doesn&rsquo;t matter, as long as you keep asking</em></strong> <strong>（第６章）</strong></p>

<p><strong>訳：</strong>最も重要なことは問題は解決されることがないと知ることだ。しかし、考えることを止めなければは大したことではない。</p>

<p>無事に解決方法を見つけても、その解決方法が最も正しかったかどうかはわかりません。それどころか、問題定義がそもそも正しくなかったかもしれません。
自分の出した答えが完璧だったと信じることが一番厄介です。なぜなら、完璧な答えなどないからです。だから、私たちは常に問題を振り返って見直さなければいけないのです。</p>
]]></content>
  </entry>
  
</feed>
