I".Z<h2 id="基本動作">基本動作</h2>

<ul>
  <li>Regex Engine</li>
  <li>Regexデータ</li>
  <li>文字列データ</li>
</ul>

<p>この三つがメインでEngineがRegexデータと文字列データをひとつずつチェックしていく。<strong>マッチ</strong>というのはRegex全体で表現されるパターンが全体でマッチしている場合のことをいう。(ただ各Regexがマッチしている場合もマッチともいう)。わかりづらいので各Regexがマッチしていることは成功といいダメな時は失敗と呼ぶ。</p>

<p>以下はもっとも基本なマッチ。</p>

<h2 id="regex基本原則">Regex基本原則</h2>

<p>まずはRegexの基本原則を見てみる。しかし、これらの基本原則はオプションによって変化して、場合ごとに考え方を変えないといけないところにRegexの難しがあると思う。ただ、基本原則をしっかり理解しておけば、変化系にも対応しやすくなる。</p>

<h3 id="左から一文字ずつマッチしていく">左から一文字ずつマッチしていく</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/ab/
ab
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"ab"</code>にマッチした。</li>
</ol>

<p>Regex EngineはRegexデータ、文字列ともに現在のステップのポジションを覚えていて、ステップ毎にそれらのポジションをひとつずつずらしていく。ポジションは左から右に動いていく。</p>

<h3 id="マッチした時点で終了">マッチした時点で終了</h3>

<p>マッチが達成されたら、それ以降の文字列は無視する。これを貪欲でないマッチとか一般的には呼ぶが自分にはどうもわかりずらい。代わりに<strong>せっかちマッチ</strong>と覚えている。せっかちなので一度マッチした時点で<strong>マッチしたよ！</strong>と言って仕事を終わってしまう。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/ab/
abab
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>主なEngineではデフォルトではLazy、つまりマッチが成功した時点で終わる</li>
  <li>終了</li>
  <li>結果: 最初の<code class="language-plaintext highlighter-rouge">"ab"</code>だけにマッチした。</li>
</ol>

<h3 id="マッチが成功するために全ての可能性を試す">マッチが成功するために全ての可能性を試す</h3>

<p>Regexにとって一番大事な仕事はマッチする文字列を探すこと。それを達成するためにRegexは全ての可能性を試す。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/ab/
acab
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"c"</code> =&gt; 失敗</li>
  <li>失敗したのでRegexの最初に戻ってマッチさせようとする。これをBacktrackと呼ぶ。Backtrack == 巻き戻し と考えればいい</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"ab"</code>にマッチした。</li>
</ol>

<h2 id="よく使われる応用regex">よく使われる応用Regex</h2>

<p>ここからは実際によく使うRegexを紹介。中には基本原則で紹介した動作を変えるものもあるので、場合ごとに動作がどう変わるかを把握しないといけない。</p>

<h3 id="g-を使うと一度マッチしても続けてマッチさせようとする貪欲マッチ">g を使うと一度マッチしても続けてマッチさせようとする（貪欲マッチ)</h3>

<p>Regexの最後に <code class="language-plaintext highlighter-rouge">g</code> をつけると一度マッチしても終了せず続けてマッチさせようとする。<code class="language-plaintext highlighter-rouge">g</code>を修飾子と呼びこの動作を貪欲マッチと呼ぶ。せっかちマッチの場合と同じでわかりにくいので<strong>熱心マッチ</strong>と覚える。これは基本動作のせっかちマッチを変える。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/ab/g
abab
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>熱心モードなので文字列がある残っている以上つづける。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"abab"</code>にマッチした。</li>
</ol>

<h3 id="文字だけじゃなくその位置を含めて成功失敗を判定アンカー">文字だけじゃなくその位置を含めて成功/失敗を判定（アンカー）</h3>

<p>今まで見てきたRegexは同じ文字かどうかを判定するものだった。例えば、<code class="language-plaintext highlighter-rouge">/ab/</code>はaのあとにbが続く<code class="language-plaintext highlighter-rouge">"ab"</code>にマッチする。言い換えれば、aのあとにbが続く限りそれがどこにあろうがマッチする。だから<code class="language-plaintext highlighter-rouge">"1ab2</code>はこの場合マッチする。</p>

<p><code class="language-plaintext highlighter-rouge">^</code>と<code class="language-plaintext highlighter-rouge">$</code>がRegexの前につくと文字のマッチだけじゃなくその文字がある位置まで見る。こうゆう種類のRegexをアンカーと呼ぶ。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/^a/
1a
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 失敗</li>
  <li>BacktrackでRegexが最初に戻る。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 失敗</li>
  <li><code class="language-plaintext highlighter-rouge">"a"</code>にはマッチしているが <code class="language-plaintext highlighter-rouge">^a</code>は一番最初にある<code class="language-plaintext highlighter-rouge">"a"</code>なので失敗。</li>
  <li>終了</li>
  <li>結果: マッチなし</li>
</ol>

<h3 id="改行直後の文字は最初の文字列ではない">改行直後の文字は最初の文字列ではない</h3>

<p><code class="language-plaintext highlighter-rouge">^</code>は文字列の最初の位置にマッチするが、改行直後の文字列は最初の文字とはならない。この動作が主なRegexエンジンのデフォルト。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/^a/

# 複数行に渡る文字列
1a
a


</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 失敗</li>
  <li>BacktrackでRegexが最初に戻る。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 失敗</li>
  <li>BacktrackでRegexが最初に戻る。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 失敗</li>
  <li><code class="language-plaintext highlighter-rouge">^a</code>はあくまで文字列全体の最初にある<code class="language-plaintext highlighter-rouge">"a"</code>。二つ目の<code class="language-plaintext highlighter-rouge">"a"</code>は行の最初のaだが文字列全体の最初ではないのでマッチしない。</li>
  <li>終了</li>
  <li>結果: マッチなし</li>
</ol>

<h3 id="mを使うと改行が入っていても最初の文字とみなす">mを使うと改行が入っていても最初の文字とみなす</h3>

<p>上で例だと改行直後、二つ目の<code class="language-plaintext highlighter-rouge">"a"</code>は<code class="language-plaintext highlighter-rouge">/^a/</code>にはマッチしなかった。これをマッチさせるには<code class="language-plaintext highlighter-rouge">m</code>修飾子を使う。すると、改行直後の文字でも文字列の最初とみなされる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/^a/m

# 複数行に渡る文字列
1a
a
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 失敗</li>
  <li>BacktrackでRegexが最初に戻る。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">^a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li><code class="language-plaintext highlighter-rouge">m</code>修飾子があるので改行直後の<code class="language-plaintext highlighter-rouge">"a"</code>は文字列の最初とみなされる。</li>
  <li>終了</li>
  <li>結果: 二つ目の<code class="language-plaintext highlighter-rouge">a</code>にマッチ</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">m</code>を使った時の動作をmulti-lineモードと呼ぶ。</p>

<h3 id="ほぼどんな文字にもマッチする--ドット">（ほぼ）どんな文字にもマッチする . (ドット)</h3>

<p>どんな文字にでもマッチするRegexに<code class="language-plaintext highlighter-rouge">.</code>がある。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/.../
1&amp;!
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"&amp;"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"!"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">1&amp;!</code>にマッチ</li>
</ol>

<p>しかし<code class="language-plaintext highlighter-rouge">.</code>にも例外はあり改行にはマッチしない。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/.../
# 複数行に渡る文字列
1
2
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">\n</code>  =&gt; 失敗</li>
  <li>Backtrackで最初の <code class="language-plaintext highlighter-rouge">.</code>に戻る</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"2"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">\n</code>  =&gt; 失敗</li>
  <li>終了</li>
  <li>結果: マッチなし</li>
</ol>

<h3 id="s-を使うと--ドットが改行にもマッチする">s を使うと . (ドット)が改行にもマッチする</h3>

<p><code class="language-plaintext highlighter-rouge">s</code>修飾子を使うと<code class="language-plaintext highlighter-rouge">.</code>が改行にもマッチするようになる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/.../s
# 複数行に渡る文字列
1
2
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"1"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">\n</code>  =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.</code> 文字列: <code class="language-plaintext highlighter-rouge">"2"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">1\n2</code>にマッチ</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">s</code>を使った時の動作をsingle-lineモードと呼ぶ。注意するのは single-modeとmulti-lineモードは全く別物だということ。single-lineモードは<code class="language-plaintext highlighter-rouge">.</code>が改行も含むようにすることに対して、multi-lineモードはアンカー (<code class="language-plaintext highlighter-rouge">^</code>や<code class="language-plaintext highlighter-rouge">&amp;</code>)が改行を考慮するするようにすることなので、single-lineとmulti-lineは相反するモードではない。（両方指定可能)</p>

<h3 id="パターンを繰り返す">パターンを繰り返す</h3>

<p><code class="language-plaintext highlighter-rouge">+</code>や<code class="language-plaintext highlighter-rouge">*</code>を使うとその直前のRegexを繰り返してマッチするようにできる。<code class="language-plaintext highlighter-rouge">+</code>は直前のRegexの一回以上の繰り返し。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/a+/
aaa
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a+</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a+</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a+</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"aaa"</code>にマッチ</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">*</code>は直前のRegexの0回以上に繰り返し。つまりマッチする文字がなくても成功になる。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/a*b/
b
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a*</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li><code class="language-plaintext highlighter-rouge">*</code>は0回以上のaの繰り返せば成功、つまりaがなくても成功とみなす。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"b"</code>にマッチ</li>
</ol>

<h3 id="regexの最後に行く前に文字が終わってしまったら文字を戻す">Regexの最後に行く前に文字が終わってしまったら文字を戻す</h3>

<p><code class="language-plaintext highlighter-rouge">.</code>と<code class="language-plaintext highlighter-rouge">+</code>や<code class="language-plaintext highlighter-rouge">*</code>を組み合わせると任意の文字の無限の繰り返しを指定できるので文字列のほうが先に終わってしまうことがある。Regexが失敗したときはBacktrackして次の文字からまたやり直したが繰り返しを使うと文字の方を巻き戻す。普通のBacktrackと区別するために文字列Backtrackと呼ぶ。Regexがこうゆう動きをするのは、最初に書いた<strong>マッチが成功するために全ての可能性を試す</strong>という基本原則があるから。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/a.+b/
aab
</code></pre></div></div>
<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.+</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li><code class="language-plaintext highlighter-rouge">.+</code>は任意の文字の繰り返しなので次のRegexには進まない。</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">.+</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>この時点で文字列が終わってしまったが、Regex側は<code class="language-plaintext highlighter-rouge">b</code>がまだ残っている。<code class="language-plaintext highlighter-rouge">b</code>まで成功しないとマッチではない。</li>
  <li>文字列をマッチするとわかっているところまでBacktrackする(この場合最初の<code class="language-plaintext highlighter-rouge">"aa"</code>が<code class="language-plaintext highlighter-rouge">/a.+/</code>でマッチするとわかっているのでここまで戻す。）</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">b</code> 文字列: <code class="language-plaintext highlighter-rouge">"b"</code>=&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"aab"</code>にマッチ</li>
</ol>

<h2 id="もし--ならマッチを試みる">もし ~ ならマッチを試みる</h2>

<p>ここまで紹介したRegexではプログラミングでつかう<code class="language-plaintext highlighter-rouge">IF ~ then ~ END</code>のようなことはできない。それをできるようにするのがLookahead。重要なポイントはLookaheadは条件をしていしるだけなのでそれ自体はマッチの結果には含まれない。</p>

<h3 id="もしxにyがつづけばマッチ-positive-lookahead">もしXにYがつづけばマッチ (Positive Lookahead)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/a(?=b)/
abd
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">a</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">(?=b)</code>の<code class="language-plaintext highlighter-rouge">b</code>の部分 文字列: <code class="language-plaintext highlighter-rouge">"b"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">(?=b)</code>の<code class="language-plaintext highlighter-rouge">?=</code>の部分 上のステップで<code class="language-plaintext highlighter-rouge">b</code>がマッチしたら成功 =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"a"</code>にマッチ。<strong>bはあくまで条件なのでb自体にはマッチしない</strong></li>
</ol>

<p>この例ではあまり意味があるように思えないがLookaheadはXが続かないYを探す時に真価を発揮する。</p>

<h3 id="もしxにyがつづかなければマッチ-negative-lookahead">もしXにYがつづかなければマッチ (Negative Lookahead)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>q(?!u)
aq
</code></pre></div></div>

<ol>
  <li>Regex: <code class="language-plaintext highlighter-rouge">q</code> 文字列: <code class="language-plaintext highlighter-rouge">"a"</code> =&gt; 失敗</li>
  <li>Backtrack</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">q</code> 文字列: <code class="language-plaintext highlighter-rouge">"q"</code> =&gt; 成功</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">(?!=u)</code>の<code class="language-plaintext highlighter-rouge">u</code>の部分 文字列: <code class="language-plaintext highlighter-rouge">"u"</code> =&gt; 失敗</li>
  <li>Regex: <code class="language-plaintext highlighter-rouge">(?!u)</code>の<code class="language-plaintext highlighter-rouge">?!</code>の部分 上のステップで<code class="language-plaintext highlighter-rouge">u</code>がマッチしていないから成功 =&gt; 成功</li>
  <li>終了</li>
  <li>結果: <code class="language-plaintext highlighter-rouge">"q"</code>にマッチ</li>
</ol>
:ET