<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Program Is Made At Night]]></title>
  <link href="http://kimh.github.io/atom.xml" rel="self"/>
  <link href="http://kimh.github.io/"/>
  <updated>2018-12-31T21:30:18+09:00</updated>
  <id>http://kimh.github.io/</id>
  <author>
    <name><![CDATA[kim hirokuni]]></name>
    <email><![CDATA[yangkookkim@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018 Review]]></title>
    <link href="http://kimh.github.io/blog/2018-review/"/>
    <updated>2018-12-31T14:25:00+09:00</updated>
    <id>http://kimh.github.io/blog/2018-review</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<p>2018年は充実した年だった。二人目の子供の誕生、CircleCI Japanの立ち上げ、電動キックボードとの出会い、など人生に大きな影響を与えるイベントが目白押しの一年だった。</p>

<h1>Works</h1>

<p>やはり一番大きいのは6月のCircleCI Japanの立ち上げがある。CircleCIに入った時は考えもしなかったJapanオフィスがこんなにも早く立ち上がるとは。すでにCircleCIという素晴らしいプロダクトがあるので”強くてニューゲーム”のようでチートっぽいけどスタートアップの立ち上げはとてもいい経験となった。この半年で本当にたくさんの新しいことができた。(というかまだ半年か！)</p>

<ul>
<li>チームメンバーのHiring</li>
<li>CodeZineでの連載寄稿</li>
<li>ポッドキャスト収録</li>
<li>マーケティングの勉強</li>
<li>ローカライゼーション</li>
<li>たくさんの人との出会い</li>
</ul>


<p>次に大きなイベントは3月の出張先での電動キックボードとの出会い。最初に電動キックボードに乗った時、ハンマーで脳みそを叩かれるような衝撃を今でもよく覚えている。僕はこのユーザー体験をなんとしても日本でも広めたい。そのためにこの９ヶ月間で以下に注力してきた。</p>

<ul>
<li>電動キックボードに関連する法律の調査と理解</li>
<li>その法律を遵守するための現実解の模索</li>
<li>ビジネスモデルの構築</li>
</ul>


<p>2018年は選択肢を広げるために色々なアイデアをあえてふわふわした形でキープしておいた。2019年はこのアイデアを一気に凝縮して実際にサービスを立ち上げるのが目標。世界的に見ると日本は電動キックボードビジネスの真空地帯なんだけど、それでも最近少しずつ競合が出てきているのであんまりゆっくりもしていられない。</p>

<h1>Money</h1>

<p>今年はやることなすこと裏目に出るひどい年だった。具体的には原油先物、トルコリラ、日経平均ベアでぼろ負けた。敗因は世界経済の先行きに過度に悲観的になりすぎたこと。全ての判断が半年早く、もう少しこらえていれば挽回するチャンスがあっただけにとても残念だ。ただ、日経平均ベアはこれから自分の予想したように動きそうなので2019年に期待したい。</p>

<h1>Family</h1>

<p>なんといっても大きなイベントは二人目の男の子の誕生。もしかしたら子供ができないと思った時期からすれば健康な男の子を二人も授かったのは奇跡のよう。名前は&#8221;哲斗”と言う。僕が尊敬する気象学者の<a href="https://en.wikipedia.org/wiki/Ted_Fujita">藤田 Ted・哲也</a>からいただいた。新生児の育児はどうしても奥さんの負担が大きくなってしまうので、もう少し落ち着いたら奥さんにも安心して買い物とか温泉とかいけるように下の子の育児にも貢献していきたい。</p>

<p>上の子ももうすぐ３歳になる。残念ながら僕の気が小さいところや引っ込み思案な性格をしっかり受け継いでしまっているんだけど、それを自分でもなんとか克服しようとしているのが日々の成長でわかるのが嬉しい。英語も日本語の７割くらいでしゃべれるようになっているみたいで子供の学習能力には感服する。</p>

<h1>Sad Things</h1>

<ul>
<li>妻方のおばあさんが二人他界したこと。特に僕はそのうちの一人のおばあさんが大好きだったので(向こうも好きでいてくれたと思う)本当に悲しい。もう少し何か喜ばしてあげることができたんじゃないかといつも考えてしまう。</li>
<li>日本経済がどう考えても破滅(に近い)の道を突き進んでいること。そして、それを問題視する人があまりにも少ないということ。本当に日本人というのは問題を見て見ぬ振りをするのが得意らしい。</li>
<li>Mahmood AliがCircleCIを去ったこと。彼には本当にお世話になったし、たくさんのことを学んだ。もっと一緒に仕事がしたかった。</li>
</ul>


<h1>Great Ideas</h1>

<ul>
<li>脳は大きく変わるということ。これは比喩でなく、成功体験やトレーニングで筋肉のように本当に形が変わる。これは生まれつきの性格を変えることもできるということなので、子供と一緒に実践していきたい。</li>
<li>ルールの外側、最強。電動キックボードを原付化している時にこのアイデアを得た。警察に怒られないために電動キックボードを原付化してルールを守ろうとすると、行動はそのルール内で制限されてしまい逆にちょっとルールを破っただけで怒られるようになってしまう。反対に素の電動キックボードには現在適用できるルールがないので大抵のことは注意で済まされる。だれもトランプ大統領の勢いを止めることができないのは彼がルールの外側で行動しているからだと思う。</li>
<li>アウトプットファーストの重要性。上手にアウトプットすることで周りに影響を与えてさらにアウトプットするといういい循環ができる。</li>
</ul>


<h1>Good Books</h1>

<p>今年は忙しくてあんまり読めなかったけど、まーそれでも気にいった本はいくつかあった。しかし、プログラミング系の本が少ない…</p>

<ul>
<li><a href="https://www.amazon.co.jp/gp/product/B01GJOQSO2/ref=oh_aui_d_detailpage_o06_?ie=UTF8&amp;psc=1">意識はいつ生まれるのか &ndash; 脳の謎に挑む統合情報理論</a></li>
<li><a href="https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B7%9A%E5%BD%A2%E4%BB%A3%E6%95%B0-%E5%B9%B3%E5%B2%A1-%E5%92%8C%E5%B9%B8/dp/4274065782">プログラミングのための線形代数</a></li>
<li><a href="https://www.amazon.co.jp/The-Whole-Brain-Child/dp/1491514817/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1546232408&amp;sr=1-2&amp;keywords=whole+brain+child">The Whole-Brain Child</a></li>
<li><a href="https://www.amazon.co.jp/%E3%83%9B%E3%83%A2%E3%83%BB%E3%83%87%E3%82%A6%E3%82%B9-%E4%B8%8A-%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%81%A8%E3%82%B5%E3%83%94%E3%82%A8%E3%83%B3%E3%82%B9%E3%81%AE%E6%9C%AA%E6%9D%A5-%E3%83%A6%E3%83%B4%E3%82%A1%E3%83%AB%E3%83%BB%E3%83%8E%E3%82%A2%E3%83%BB%E3%83%8F%E3%83%A9%E3%83%AA/dp/4309227368/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1546232441&amp;sr=1-1&amp;keywords=%E3%83%9B%E3%83%A2%E3%83%87%E3%82%A6%E3%82%B9">ホモ・デウス</a></li>
<li><a href="https://www.amazon.co.jp/%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%A9%E3%83%9C%E2%80%95%E2%80%95%E3%80%8C%E3%81%82%E3%81%A3%E3%81%9F%E3%82%89%E3%81%84%E3%81%84%E3%81%AA%E3%80%8D%E3%82%92%E3%81%8B%E3%81%9F%E3%81%A1%E3%81%AB%E3%81%99%E3%82%8B%E3%80%8C%E3%81%B2%E3%82%89%E3%82%81%E3%81%8D%E3%80%8D%E3%81%AE%E6%8A%80%E8%A1%93-%E4%BD%90%E8%97%A4-%E3%82%AA%E3%82%AA%E3%82%AD/dp/4478028923/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1546232527&amp;sr=1-1&amp;keywords=%E4%BD%90%E8%97%A4%E3%82%AA%E3%82%AA%E3%82%AD">問題解決ラボ――「あったらいいな」をかたちにする「ひらめき」の技術</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex Notes]]></title>
    <link href="http://kimh.github.io/blog/regex-notes/"/>
    <updated>2018-02-01T22:01:00+09:00</updated>
    <id>http://kimh.github.io/blog/regex-notes</id>
    <content type="html"><![CDATA[<h2>基本動作</h2>

<ul>
<li>Regex Engine</li>
<li>Regexデータ</li>
<li>文字列データ</li>
</ul>


<p>この三つがメインでEngineがRegexデータと文字列データをひとつずつチェックしていく。<strong>マッチ</strong>というのはRegex全体で表現されるパターンが全体でマッチしている場合のことをいう。(ただ各Regexがマッチしている場合もマッチともいう)。わかりづらいので各Regexがマッチしていることは成功といいダメな時は失敗と呼ぶ。</p>

<p>以下はもっとも基本なマッチ。</p>

<h2>Regex基本原則</h2>

<p>まずはRegexの基本原則を見てみる。しかし、これらの基本原則はオプションによって変化して、場合ごとに考え方を変えないといけないところにRegexの難しがあると思う。ただ、基本原則をしっかり理解しておけば、変化系にも対応しやすくなる。</p>

<h3>左から一文字ずつマッチしていく</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ab/
</span><span class='line'>ab</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>"ab"</code>にマッチした。</li>
</ol>


<p>Regex EngineはRegexデータ、文字列ともに現在のステップのポジションを覚えていて、ステップ毎にそれらのポジションをひとつずつずらしていく。ポジションは左から右に動いていく。</p>

<h3>マッチした時点で終了</h3>

<p>マッチが達成されたら、それ以降の文字列は無視する。これを貪欲でないマッチとか一般的には呼ぶが自分にはどうもわかりずらい。代わりに<strong>せっかちマッチ</strong>と覚えている。せっかちなので一度マッチした時点で<strong>マッチしたよ！</strong>と言って仕事を終わってしまう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ab/
</span><span class='line'>abab</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>主なEngineではデフォルトではLazy、つまりマッチが成功した時点で終わる</li>
<li>終了</li>
<li>結果: 最初の<code>"ab"</code>だけにマッチした。</li>
</ol>


<h3>マッチが成功するために全ての可能性を試す</h3>

<p>Regexにとって一番大事な仕事はマッチする文字列を探すこと。それを達成するためにRegexは全ての可能性を試す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ab/
</span><span class='line'>acab</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"c"</code> => 失敗</li>
<li>失敗したのでRegexの最初に戻ってマッチさせようとする。これをBacktrackと呼ぶ。Backtrack == 巻き戻し と考えればいい</li>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>"ab"</code>にマッチした。</li>
</ol>


<h2>よく使われる応用Regex</h2>

<p>ここからは実際によく使うRegexを紹介。中には基本原則で紹介した動作を変えるものもあるので、場合ごとに動作がどう変わるかを把握しないといけない。</p>

<h3>g を使うと一度マッチしても続けてマッチさせようとする（貪欲マッチ)</h3>

<p>Regexの最後に <code>g</code> をつけると一度マッチしても終了せず続けてマッチさせようとする。<code>g</code>を修飾子と呼びこの動作を貪欲マッチと呼ぶ。せっかちマッチの場合と同じでわかりにくいので<strong>熱心マッチ</strong>と覚える。これは基本動作のせっかちマッチを変える。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ab/g
</span><span class='line'>abab</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>熱心モードなので文字列がある残っている以上つづける。</li>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>"abab"</code>にマッチした。</li>
</ol>


<h3>文字だけじゃなくその位置を含めて成功/失敗を判定（アンカー）</h3>

<p>今まで見てきたRegexは同じ文字かどうかを判定するものだった。例えば、<code>/ab/</code>はaのあとにbが続く<code>"ab"</code>にマッチする。言い換えれば、aのあとにbが続く限りそれがどこにあろうがマッチする。だから<code>"1ab2</code>はこの場合マッチする。</p>

<p><code>^</code>と<code>$</code>がRegexの前につくと文字のマッチだけじゃなくその文字がある位置まで見る。こうゆう種類のRegexをアンカーと呼ぶ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^a/
</span><span class='line'>1a</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>^a</code> 文字列: <code>"1"</code> => 失敗</li>
<li>BacktrackでRegexが最初に戻る。</li>
<li>Regex: <code>^a</code> 文字列: <code>"a"</code> => 失敗</li>
<li><code>"a"</code>にはマッチしているが <code>^a</code>は一番最初にある<code>"a"</code>なので失敗。</li>
<li>終了</li>
<li>結果: マッチなし</li>
</ol>


<h3>改行直後の文字は最初の文字列ではない</h3>

<p><code>^</code>は文字列の最初の位置にマッチするが、改行直後の文字列は最初の文字とはならない。この動作が主なRegexエンジンのデフォルト。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^a/
</span><span class='line'>
</span><span class='line'># 複数行に渡る文字列
</span><span class='line'>1a
</span><span class='line'>a
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>^a</code> 文字列: <code>"1"</code> => 失敗</li>
<li>BacktrackでRegexが最初に戻る。</li>
<li>Regex: <code>^a</code> 文字列: <code>"a"</code> => 失敗</li>
<li>BacktrackでRegexが最初に戻る。</li>
<li>Regex: <code>^a</code> 文字列: <code>"a"</code> => 失敗</li>
<li><code>^a</code>はあくまで文字列全体の最初にある<code>"a"</code>。二つ目の<code>"a"</code>は行の最初のaだが文字列全体の最初ではないのでマッチしない。</li>
<li>終了</li>
<li>結果: マッチなし</li>
</ol>


<h3>mを使うと改行が入っていても最初の文字とみなす</h3>

<p>上で例だと改行直後、二つ目の<code>"a"</code>は<code>/^a/</code>にはマッチしなかった。これをマッチさせるには<code>m</code>修飾子を使う。すると、改行直後の文字でも文字列の最初とみなされる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^a/m
</span><span class='line'>
</span><span class='line'># 複数行に渡る文字列
</span><span class='line'>1a
</span><span class='line'>a</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>^a</code> 文字列: <code>"1"</code> => 失敗</li>
<li>BacktrackでRegexが最初に戻る。</li>
<li>Regex: <code>^a</code> 文字列: <code>"a"</code> => 成功</li>
<li><code>m</code>修飾子があるので改行直後の<code>"a"</code>は文字列の最初とみなされる。</li>
<li>終了</li>
<li>結果: 二つ目の<code>a</code>にマッチ</li>
</ol>


<p><code>m</code>を使った時の動作をmulti-lineモードと呼ぶ。</p>

<h3>（ほぼ）どんな文字にもマッチする . (ドット)</h3>

<p>どんな文字にでもマッチするRegexに<code>.</code>がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/.../
</span><span class='line'>1&!</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>.</code> 文字列: <code>"1"</code> => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>"&amp;"</code> => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>"!"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>1&amp;!</code>にマッチ</li>
</ol>


<p>しかし<code>.</code>にも例外はあり改行にはマッチしない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/.../
</span><span class='line'># 複数行に渡る文字列
</span><span class='line'>1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>.</code> 文字列: <code>"1"</code> => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>\n</code>  => 失敗</li>
<li>Backtrackで最初の <code>.</code>に戻る</li>
<li>Regex: <code>.</code> 文字列: <code>"2"</code> => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>\n</code>  => 失敗</li>
<li>終了</li>
<li>結果: マッチなし</li>
</ol>


<h3>s を使うと . (ドット)が改行にもマッチする</h3>

<p><code>s</code>修飾子を使うと<code>.</code>が改行にもマッチするようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/.../s
</span><span class='line'># 複数行に渡る文字列
</span><span class='line'>1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>.</code> 文字列: <code>"1"</code> => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>\n</code>  => 成功</li>
<li>Regex: <code>.</code> 文字列: <code>"2"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>1\n2</code>にマッチ</li>
</ol>


<p><code>s</code>を使った時の動作をsingle-lineモードと呼ぶ。注意するのは single-modeとmulti-lineモードは全く別物だということ。single-lineモードは<code>.</code>が改行も含むようにすることに対して、multi-lineモードはアンカー (<code>^</code>や<code>&amp;</code>)が改行を考慮するするようにすることなので、single-lineとmulti-lineは相反するモードではない。（両方指定可能)</p>

<h3>パターンを繰り返す</h3>

<p><code>+</code>や<code>*</code>を使うとその直前のRegexを繰り返してマッチするようにできる。<code>+</code>は直前のRegexの一回以上の繰り返し。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/a+/
</span><span class='line'>aaa</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a+</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>a+</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>a+</code> 文字列: <code>"a"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>"aaa"</code>にマッチ</li>
</ol>


<p><code>*</code>は直前のRegexの0回以上に繰り返し。つまりマッチする文字がなくても成功になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/a*b/
</span><span class='line'>b</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a*</code> 文字列: <code>"b"</code> => 成功</li>
<li><code>*</code>は0回以上のaの繰り返せば成功、つまりaがなくても成功とみなす。</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code> => 成功</li>
<li>終了</li>
<li>結果: <code>"b"</code>にマッチ</li>
</ol>


<h3>Regexの最後に行く前に文字が終わってしまったら文字を戻す</h3>

<p><code>.</code>と<code>+</code>や<code>*</code>を組み合わせると任意の文字の無限の繰り返しを指定できるので文字列のほうが先に終わってしまうことがある。Regexが失敗したときはBacktrackして次の文字からまたやり直したが繰り返しを使うと文字の方を巻き戻す。普通のBacktrackと区別するために文字列Backtrackと呼ぶ。Regexがこうゆう動きをするのは、最初に書いた<strong>マッチが成功するために全ての可能性を試す</strong>という基本原則があるから。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/a.+b/
</span><span class='line'>aab</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>.+</code> 文字列: <code>"a"</code> => 成功</li>
<li><code>.+</code>は任意の文字の繰り返しなので次のRegexには進まない。</li>
<li>Regex: <code>.+</code> 文字列: <code>"b"</code> => 成功</li>
<li>この時点で文字列が終わってしまったが、Regex側は<code>b</code>がまだ残っている。<code>b</code>まで成功しないとマッチではない。</li>
<li>文字列をマッチするとわかっているところまでBacktrackする(この場合最初の<code>"aa"</code>が<code>/a.+/</code>でマッチするとわかっているのでここまで戻す。）</li>
<li>Regex: <code>b</code> 文字列: <code>"b"</code>=> 成功</li>
<li>終了</li>
<li>結果: <code>"aab"</code>にマッチ</li>
</ol>


<h2>もし ~ ならマッチを試みる</h2>

<p>ここまで紹介したRegexではプログラミングでつかう<code>IF ~ then ~ END</code>のようなことはできない。それをできるようにするのがLookahead。重要なポイントはLookaheadは条件をしていしるだけなのでそれ自体はマッチの結果には含まれない。</p>

<h3>もしXにYがつづけばマッチ (Positive Lookahead)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/a(?=b)/
</span><span class='line'>abd</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>a</code> 文字列: <code>"a"</code> => 成功</li>
<li>Regex: <code>(?=b)</code>の<code>b</code>の部分 文字列: <code>"b"</code> => 成功</li>
<li>Regex: <code>(?=b)</code>の<code>?=</code>の部分 上のステップで<code>b</code>がマッチしたら成功 => 成功</li>
<li>終了</li>
<li>結果: <code>"a"</code>にマッチ。<strong>bはあくまで条件なのでb自体にはマッチしない</strong></li>
</ol>


<p>この例ではあまり意味があるように思えないがLookaheadはXが続かないYを探す時に真価を発揮する。</p>

<h3>もしXにYがつづかなければマッチ (Negative Lookahead)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>q(?!u)
</span><span class='line'>aq</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Regex: <code>q</code> 文字列: <code>"a"</code> => 失敗</li>
<li>Backtrack</li>
<li>Regex: <code>q</code> 文字列: <code>"q"</code> => 成功</li>
<li>Regex: <code>(?!=u)</code>の<code>u</code>の部分 文字列: <code>"u"</code> => 失敗</li>
<li>Regex: <code>(?!u)</code>の<code>?!</code>の部分 上のステップで<code>u</code>がマッチしていないから成功 => 成功</li>
<li>終了</li>
<li>結果: <code>"q"</code>にマッチ</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CollageとAnimationを使ってElmでアプリを作る]]></title>
    <link href="http://kimh.github.io/blog/make-elm-app/"/>
    <updated>2017-12-11T21:48:00+09:00</updated>
    <id>http://kimh.github.io/blog/make-elm-app</id>
    <content type="html"><![CDATA[<p>この記事はQiita Elm Adventcalendar 2017に投稿した記事です。</p>

<h2>最初に</h2>

<p>Functional Reactive Programmingを調べていて偶然Elmに出会いました。最新版のElm0.18ではElmはFRPの概念を完全に取り払いFRPとは関係なくなりましたが、
実際にElmを触ってみるとどんどんその面白さに引き込まれて行きました。もっとElmで何か作りたくなったので自分の子供が遊べるようなToy Appを作ることにしました。 このアプリを作る際にはまった点や大事な点をできるだけ丁寧に解説してみたいと思います。</p>

<h2>この記事の対象者</h2>

<p>この記事ではElmについての基本知識があることを前提としています。Elmにはすでに素晴らしいチュートリアルがあるのでまだElmに触ったことがなければ <a href="https://guide.elm-lang.org/">https://guide.elm-lang.org/</a> と <a href="https://www.elm-tutorial.org/en/">https://www.elm-tutorial.org/en/</a> をお勧めします。
基本の文法はわかるけどいまいちSubscriptionやPortがわからないなーという人には楽しんでもらえると思います。</p>

<h2>Airplane Toy App</h2>

<p>この記事で解説しているアプリは <a href="https://s3-ap-northeast-1.amazonaws.com/airplane-toy-app/index.html">https://s3-ap-northeast-1.amazonaws.com/airplane-toy-app/index.html</a> で公開しています。 (このアプリは音が出るので注意!!)
コードは <a href="https://github.com/kimh/kids-toy-apps">https://github.com/kimh/kids-toy-apps</a> で公開しています。
2歳になる自分の息子に作ったアプリなのでとても単純な仕様で、クリックした場所に飛行機がいかにも子供が好きそうな音を出して移動する、というだけのアプリです。
しかしElmで実際にアプリを作るのに必要なことはほとんど使う必要があったのでとても勉強になりました。</p>

<h2>イベントフロー</h2>

<p>このアプリでは以下のようなイベントフローで構成されています。</p>

<p>ページをロード &ndash;> Init関数が呼ばれModelが初期化される &ndash;> ユーザー (うちの息子) が画面のどこかをクリックする &ndash;> <code>MouseMsg</code>メッセージが送信される &ndash;> Subscriptionを通じて、Update関数が呼ばれる。クリックされた座標を取得して、Modelにセットする。 &ndash;> Modelに新しい座標がセットされると飛行機が動く &ndash;> 同時に <code>PlaySound</code> メッセージが送信される &ndash;> JavascriptにPortでメッセージを送信する &ndash;> Javascript側で <code>audio</code> 要素の <code>play</code> メソッドを呼ぶ</p>

<h2>飛行機画像のレンダリング</h2>

<p>飛行機の画像を扱うのに Elm Collageを使っています。Collageのライブラリには主に<a href="https://github.com/evancz/elm-graphics">https://github.com/evancz/elm-graphics</a> と <a href="https://github.com/timjs/elm-collage">https://github.com/timjs/elm-collage</a> がありますが、後者です。timjs/elm-collageはevancz/elm-graphisを置き換えるものだと考えているのでこれからアプリを作るのならtimjs/elm-collageを使うことぼをお勧めします。</p>

<p>重要となるポイントを説明していきます。</p>

<p><code>image</code> で飛行機の画像ファイルを読み込んで <code>shift</code> で初期位置まで移動させます。 <code>pos</code> は 渡されたModelから作成します。(後述)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">plane</span> <span class="ow">=</span>
</span><span class='line'>    <span class="n">image</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span> <span class="s">&quot;images/airplane.svg&quot;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">shift</span> <span class="n">pos</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spacer</code> を使っている部分は少しわかりにくいです。timjs/elm-collageでは座標が絶対的ではなく他の要素からの相対的なCollageの位置を指定するので
<code>plane</code> だけを <code>shift</code> しても画像が動いてくれませんでした。そこで <code>plane</code> の前に透明な要素である <code>spacer</code> を挟むことでうまく移動してくれるようにしました。（このあたりは自分の理解も曖昧なのでもっとうまい方法があるかも）<code>group</code> は複数のCollageを並べてくれる関数です。</p>

<p>コメントアウトしている <code>debug</code> は有効にするとCollageのボーダーとセンターを赤線で表示してくれるのでつまった時に便利なのでいつでも有効にできるように残しています。</p>

<p>最後に要素を <code>Html Msg</code> 型に <code>svg</code> で変換しています。このパターンはCollageではいつも使うパターンです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">group</span> <span class="p">[</span>
</span><span class='line'>  <span class="n">spacer</span> <span class="mi">300</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>  <span class="n">plane</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>    <span class="c1">-- |&gt; Collage.Layout.debug</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">&gt;</span> <span class="n">svg</span> <span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<h2>アニメーション</h2>

<p>飛行機を任意の場所に移動するために <code>elm-animation</code> を使っています。基本的な考え方はブラウザのフレーム更新毎に送られる <code>Tick</code> メッセージを捕まえてその中でモデルを更新します。</p>

<p>重要となるポイントを説明していきます。</p>

<p>モデルにはx座標、y座標、clockをもたせています。これらの値を <code>Tick</code> イベントの中で更新します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="n">alias</span> <span class="kt">Model</span> <span class="ow">=</span>
</span><span class='line'>    <span class="p">{</span> <span class="n">x</span> <span class="kt">:</span> <span class="kt">Animation</span><span class="p">,</span> <span class="n">y</span> <span class="kt">:</span> <span class="kt">Animation</span><span class="p">,</span> <span class="n">clock</span> <span class="kt">:</span> <span class="kt">Time</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">model</span> <span class="kt">:</span> <span class="kt">Model</span>
</span><span class='line'><span class="nf">model</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kt">Model</span>
</span><span class='line'>        <span class="p">(</span><span class="n">animation</span> <span class="mi">0</span> <span class="o">|&gt;</span> <span class="n">duration</span> <span class="kt">Time</span><span class="o">.</span><span class="n">second</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="n">animation</span> <span class="mi">0</span> <span class="o">|&gt;</span> <span class="n">duration</span> <span class="kt">Time</span><span class="o">.</span><span class="n">second</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Tick</code> メッセージは引数つきのメッセージで、引数にアニメーションの初期状態から差分の時刻が送られてきます。それをモデルの <code>clock</code> にセットしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">update</span> <span class="kt">:</span> <span class="kt">Msg</span> <span class="ow">-&gt;</span> <span class="kt">Model</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Model</span><span class="p">,</span> <span class="kt">Cmd</span> <span class="kt">Msg</span><span class="p">)</span>
</span><span class='line'><span class="nf">update</span> <span class="n">msg</span> <span class="n">model</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">case</span> <span class="n">msg</span> <span class="kr">of</span>
</span><span class='line'>        <span class="kt">Tick</span> <span class="n">dt</span> <span class="ow">-&gt;</span>
</span><span class='line'>            <span class="kr">let</span>
</span><span class='line'>                <span class="n">clock</span> <span class="ow">=</span> <span class="n">model</span><span class="o">.</span><span class="n">clock</span> <span class="o">+</span> <span class="n">dt</span>
</span><span class='line'>            <span class="kr">in</span>
</span><span class='line'>                <span class="p">({</span> <span class="n">model</span> <span class="o">|</span> <span class="n">clock</span> <span class="ow">=</span> <span class="n">clock</span> <span class="p">},</span> <span class="kt">Cmd</span><span class="o">.</span><span class="n">none</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>更新されたclockの値と飛行機のx,y座標を <code>animate</code> に渡すとその時刻での飛行機の座標が返ってきます。 <code>shift pos</code> をするとその座標に画像がレンダリングされます。これを各 <code>Tick</code> 毎に行うことで画像が移動していくように見えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">view</span> <span class="p">{</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">clock</span> <span class="p">}</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">let</span>
</span><span class='line'>        <span class="n">pos</span> <span class="ow">=</span>
</span><span class='line'>            <span class="p">(</span> <span class="n">animate</span> <span class="n">clock</span> <span class="n">x</span><span class="p">,</span> <span class="n">animate</span> <span class="n">clock</span> <span class="n">y</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">plane</span> <span class="ow">=</span>
</span><span class='line'>            <span class="n">image</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span> <span class="s">&quot;images/airplane.svg&quot;</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="n">shift</span> <span class="n">pos</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Tick</code> メッセージはそのままでは送信されません。送信するためには <code>Subscription</code> で <code>animation-frame</code> という別のライブラリを使って <code>AnimationFrame.diffs Tick</code> を呼びます。Animationするためのライブラリ(<code>elm-animation</code>) とフレーム遷移を扱うライブラリが別なのは面白いポイントです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">subs</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kt">Sub</span><span class="o">.</span><span class="n">batch</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>        <span class="kt">AnimationFrame</span><span class="o">.</span><span class="n">diffs</span> <span class="kt">Tick</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">Mouse</span><span class="o">.</span><span class="n">clicks</span> <span class="kt">MouseMsg</span>
</span><span class='line'>        <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>マウスイベント</h2>

<p>クリックされた場所まで飛行機を移動しないといけないのでマウスイベントを捕まえてクリックされた座標を取得します。</p>

<p>まずマウスイベントを捕まえるために <code>Mouse.clicks MouseMsg</code> をサブスクライブします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">subs</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kt">Sub</span><span class="o">.</span><span class="n">batch</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>        <span class="kt">AnimationFrame</span><span class="o">.</span><span class="n">diffs</span> <span class="kt">Tick</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">Mouse</span><span class="o">.</span><span class="n">clicks</span> <span class="kt">MouseMsg</span>
</span><span class='line'>        <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際にマウスイベントを扱うには <code>MouseMsg</code> を捕まえます。<code>MouseMsg</code> は引数つきのメッセージで引数にはクリックされた座標が入っています。 このアプリ独自のロジックで <code>adjustment</code> とかを使っていますが、重要なのはクリックされた座標をFloat型に変換して <code>retarget</code> に渡すところです。<code>retarget</code> は画像がどこまで動くかの値 <code>to</code> を更新して座標で返すので、それをモデルの座標にセットします。こうすることでクリックされた位置が新しいアニメーションの <code>to</code> になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">MouseMsg</span> <span class="n">position</span> <span class="ow">-&gt;</span>
</span><span class='line'>   <span class="kr">let</span>
</span><span class='line'>       <span class="c1">-- We need this so that plan&#39;s center moves to the new postion</span>
</span><span class='line'>       <span class="n">adjustment</span> <span class="ow">=</span> <span class="o">-</span><span class="mi">150</span>
</span><span class='line'>       <span class="n">posx</span> <span class="ow">=</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="n">toFloat</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">adjustment</span>
</span><span class='line'>       <span class="n">posy</span> <span class="ow">=</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="n">toFloat</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="n">adjustment</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>       <span class="n">newX</span> <span class="ow">=</span> <span class="n">retarget</span> <span class="n">model</span><span class="o">.</span><span class="n">clock</span> <span class="n">posx</span> <span class="n">model</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'>       <span class="n">newY</span> <span class="ow">=</span> <span class="n">retarget</span> <span class="n">model</span><span class="o">.</span><span class="n">clock</span> <span class="n">posy</span> <span class="n">model</span><span class="o">.</span><span class="n">y</span>
</span><span class='line'>   <span class="kr">in</span>
</span><span class='line'>       <span class="p">({</span><span class="n">model</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">newX</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">newY</span> <span class="p">}</span> <span class="o">|&gt;</span> <span class="n">update</span> <span class="kt">PlaySound</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>音を鳴らす</h2>

<p>このアプリを作るときに一番わかりにくかったところはクリックされたときに音を鳴らす動作です。Javascriptだと <code>audio</code> 要素を取得して <code>play</code> 関数を呼ぶだけなんですが <code>play</code> は副作用を及ぼす関数なので調べた限りではElmからは直接呼ぶことができませんでした。そこで <code>Port</code> の出番です。</p>

<p>Portの仕組みはとても簡単で、Javascript側でElmからのメッセージをサブスクライブして何か送られてきたら使いたいJavascriptのコードを実行するだけです。今回の例だと、Elmが音を鳴らしたいときにPortにメッセージを送り、Javascript側で <code>audio</code> 要素を取得して <code>play</code> を呼ぶだけです。</p>

<p>まずJavascript側から説明します。このコードは <code>index.html</code> に書かれています。</p>

<p><code>app.ports.play.subscribe(function(val){...})</code> がElmからPortにメッセージが送られてきた時に呼ばれるコールバックです。単純に <code>audio</code> 要素を取得して <code>play</code> しているところがメインです。(一度 <code>pause</code> しているのは音が終わる前にもう一度クリックされた時に最初から再生するためにです。)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">background=</span><span class="s">&quot;images/sky.jpg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;audio</span> <span class="na">id=</span><span class="s">&quot;my-audio&quot;</span> <span class="na">src=</span><span class="s">&quot;audios/flee1.mp3&quot;</span><span class="nt">&gt;&lt;/audio&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">Elm</span><span class="p">.</span><span class="nx">Main</span><span class="p">.</span><span class="nx">fullscreen</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// Triggered from Elm</span>
</span><span class='line'>     <span class="nx">app</span><span class="p">.</span><span class="nx">ports</span><span class="p">.</span><span class="nx">play</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;my-audio&#39;</span><span class="p">);</span>
</span><span class='line'>         <span class="nx">audio</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
</span><span class='line'>         <span class="nx">audio</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>         <span class="nx">audio</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にPortにメッセージを送る側のElmコードを見てみます。Updateの中で <code>PlaySound</code> を捕まえます。 <code>PlaySound</code> がどこからくるかというと <code>MouseMsg</code> をハンドリングする際に戻り値で手動で <code>update</code> を呼んで <code>PlaySound</code> のコマンドを渡しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">({</span><span class="n">model</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">newX</span><span class="p">,</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">newY</span> <span class="p">}</span> <span class="o">|&gt;</span> <span class="n">update</span> <span class="kt">PlaySound</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>play 0</code> と呼ぶとJavascript側でサブスクライブしているPortに <code>0</code> という値が送られます。ここではJavascript側は何も値は必要ないのですが引数なしで送る方法がわからなかったので適当な値を渡しているだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">PlaySound</span> <span class="ow">-&gt;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">play</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>大事な点はだいたいカバーしたと思います。純粋関数言語からアニメーションを扱う考え方はとても面白かったです。はじめは少しとっつきにくいかもしれませんが、慣れれば他の似たようなライブラリも簡単に理解できるようになりました。</p>

<p>この記事を通してElmのファンが増えてくれれば嬉しいです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Investment Principles]]></title>
    <link href="http://kimh.github.io/blog/my-investment-principles/"/>
    <updated>2017-11-24T11:34:00+09:00</updated>
    <id>http://kimh.github.io/blog/my-investment-principles</id>
    <content type="html"><![CDATA[<p>投資について考える時間ができたので今の時点で投資に関して自分が大事にしていることをまとめておく。</p>

<p><strong>Note to future self:</strong> 時々見返して、適宜修正すること。</p>

<h2>1. 投資の収入に期待してはいけない</h2>

<p>投資を主な収入源にしている人たちにとっては大きなアンチテーゼだが、投資をする上での第一原則は投資の収入を大きく当てにしないこと。 理由は主に以下。</p>

<p>投資で儲けるためには時間かかる。そのため、これを当てにして生活プランを組むと無収入の期間が長く続いた時に精神的に辛い。追い詰められた時、人は大きなミスをしやすくなる。</p>

<p>できるだけ損切りしないというスタイルの場合 (後述)、評価損が逆転するまでに時間がかかる。同じくこの間は無収入になる。</p>

<p>また、投資を主な収入源にした場合、どうしても積極的になりがちで投資額が増えてしまうが、相場には時折破滅的な下落がある。資金に対して投資額が大きい時にそうゆう下落があった場合、最悪の場合資金を全て失う可能性がある。</p>

<p>我々は気楽な機関投資家とは違う。彼らは最悪の場合でも顧客の金を失うだけだが、こちらは資金の全て失うことがあることを常に覚えておかないといけない。</p>

<h2>2. 時間は見方</h2>

<p>1.の原則を守ることができれば二つ目の原則は自然と導かれる。アマチュア投資家の場合、いつまでに利益を出さないとかポートフォリオに評価損があったら
困るとかいうことはほとんどない。(ないようにしないといけない)。判断を間違えて評価損が出てしまった場合は&#8221;時間は見方&#8221;と自分に言い聞かせよう。</p>

<p>可能な限り損切りはせずにしばらく証券会社のサイトにはアクセスせずにほったらかしておこう。しばらくすれば、情勢は変わっているはず。</p>

<p>ただ、諸刃の剣でもあることを覚えておこう。銘柄の中にはいくら待っても好転しないものも沢山ある。例えば、２０１７年に東芝の株は暴落したがこれは将来好転しそうもない。したとしてもとても時間がかかるのは間違いない。待ってる間に東芝が破綻する可能性の方が高い。</p>

<p>こうゆう事態を避けるために下落すればまた必ず上昇するタイプの銘柄にしか投資してはいけない。しかし、残念ながら今の自分にはそれを正確に見極める術はない。</p>

<h2>3. 相場は予想できない</h2>

<p>常識に反し、相場は予測できるようなものではないと考える。過去を遡ることでこの主張が正しいことを簡単にテストできる。試しに <a href="https://jp.reuters.com">ロイター</a> で過去の記事を検索してみるといい。(検索キーワード例: ドル円 コラム) そうすればアナリストたちの主張がいかに場あたり的なものかがよくわかる。</p>

<p>また、一年前の予想など全く当たっていないこともわかる。例えば、一年前の記事を検索すると、2017/12月の時点でドル円相場に大きな影響を与えている北朝鮮問題について語っている人など一人もいない。もっとも予想が外れているといってアナリスト達を責めることはできない。様々な要素が複雑に絡みあう現実世界で１年後を予想するなんてことは土台、不可能なことなんだ。</p>

<p>未来の予想不可能性についてもっと詳しく知りたければ数学の複雑系を勉強することをお勧めする。また、不可能なのになぜそれでも人が予測をしたがるかはを知りたければ心理学や行動経済学をお勧めする。</p>

<h2>4. 乗り遅れた時こそ辛抱</h2>

<p>判断を間違えて投資のチャンスに乗り遅れた時は辛抱が大切になってくる。乗り遅れたことに気づいた時は大抵その相場に参加するにはもう遅い。
上昇相場は加速度的に上昇 (上昇している相場はさらに上昇する) することが多いように思うが、その分下げの圧力も高くなっていることを忘れてはいけない。</p>

<p>もし、乗り遅れたあとに 上昇相場に参加する時は高まる下げ圧力のことを念頭におき、遅れた分を取り返そうなどとは考えず、あくまで少額投資にしておくこと。</p>

<p>2の原則を守っていれば時間はあなたの見方となる。相場の風向きが変わるまで辛抱すること。</p>

<h2>5. 分散しない</h2>

<p>相場には <strong>すべての卵を一つのカゴに入れるな</strong> という格言があるが、これはアマチュア投資家には当てはまらない。なるべく資金を分散せず少ない銘柄に注力すること。分散すると以下のような事態に陥る。</p>

<p>相場の動きが相反する複数の銘柄に投資した場合、値動きが両端の真ん中でくすぶってどっちつかずになることがある。そうなった場合、身動きできなくなってしまう。</p>

<p>世界経済が悪くなった時は分散している全ての銘柄が同時に下落する場合がある。山火事のことを考えてほしい。一つの場所の大きな火事なら対応はシンプルだが複数の場所が同時に火事になった場合、その対応は飛躍的に難しくなる。</p>

<p>常に自分のポートフォリオを確認して分散しすぎていないかをチェックすること。自分は３銘柄までと決めている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Average Doesn't Always Exist]]></title>
    <link href="http://kimh.github.io/blog/en/average-dne/"/>
    <updated>2017-04-09T11:35:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/average-dne</id>
    <content type="html"><![CDATA[<p>Up until now, I thought average always exists. We are dealing with average very often in real life: the average height of Japanese, the average rate of divorcing in US, and the average salary in France, etc. It seemed to me that if I take enough number of sample data, I can get average that reflects the reality very well.</p>

<p>Today I learned that this is not always the case. Average doesn&rsquo;t always exist. Because the idea is very interesting to me, let me share the idea with you.</p>

<h2>Average in Coin Toss Game</h2>

<p>Let&rsquo;s being with the case when average exists. I&rsquo;ll use a very simple coin toss game. You flip a coin and you win $1 if the result is head. You win $0 or nothing if the result is tail. Very simple.</p>

<p>When you toss the coin multiple times, what&rsquo;s the average of dollar you will win? You can get the average very easily by the following formula:</p>

<p><code>avg. = (total number of $ you won) / number of times you toss the coin</code></p>

<p>And you will see that the average is 0.5 because the chance of getting head is &frac12;. But is it really so? Let&rsquo;s confirm this by writing some code to simulate the game.</p>

<p>Here is a small Clojure code to simulate the game.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">toss-coin</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">do-coin-toss</span> <span class="p">[</span><span class="nv">ite</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">n</span> <span class="mi">1</span> <span class="nv">total</span> <span class="mi">0</span> <span class="nv">avg</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="nv">ite</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">map float </span><span class="nv">avg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">outcome</span> <span class="p">(</span><span class="nf">toss-coin</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">total</span> <span class="nv">outcome</span><span class="p">)</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">avg</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">total</span> <span class="nv">n</span><span class="p">))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">write-data</span> <span class="p">[</span><span class="nv">col</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">vec</span> <span class="p">(</span><span class="nf">map-indexed</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">idx</span> <span class="nv">item</span><span class="p">]</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">str </span><span class="nv">idx</span> <span class="s">&quot; &quot;</span> <span class="nv">item</span><span class="p">))</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;\n&quot;</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">header</span> <span class="s">&quot;n avg\n&quot;</span>
</span><span class='line'>        <span class="nv">file</span> <span class="s">&quot;/tmp/coin-toss-result.txt&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="nv">header</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="nv">data</span> <span class="ss">:append</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="s">&quot;\n&quot;</span> <span class="ss">:append</span> <span class="nv">true</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is R program <code>draw.R</code> to draw a graph.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>ind <span class="o">=</span> commandArgs<span class="p">(</span>trailingOnly<span class="o">=</span><span class="kc">TRUE</span><span class="p">)[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>file <span class="o">=</span> <span class="s">&quot;coin-toss.png&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span>x <span class="o">&lt;-</span> read.table<span class="p">(</span><span class="s">&quot;/tmp/coin-toss-result.txt&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="k-Variable">T</span><span class="p">))</span>
</span><span class='line'>png<span class="p">(</span>file<span class="p">)</span>
</span><span class='line'>plot<span class="p">(</span>x<span class="o">$</span>avg<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">)</span>
</span><span class='line'>dev.off<span class="p">()</span>
</span><span class='line'>browseURL<span class="p">(</span>file<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to toss the coin 10 times and output the result to a text file, you can do <code>(write-data (do-coin-toss 10))</code> from REPL and run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Rscript draw.R
</span></code></pre></td></tr></table></div></figure>


<p> from your terminal.</p>

<p>I&rsquo;ll denote n as the number of times you toss the coin for brevity from now on.</p>

<p>Here is the graph of the average when n is <strong>10</strong>.</p>

<p><img src="http://kimh.github.io/images/coin-toss-10.png" alt="coin-toss-10" /></p>

<p>As you can see, the average is very quickly approaching to <strong>0.5</strong>. Let&rsquo;s do the same thing with larger n.</p>

<p>When n is <strong>1000</strong></p>

<p><img src="http://kimh.github.io/images/coin-toss-1000.png" alt="coin-toss-1000" /></p>

<p>When n is <strong>10000</strong></p>

<p><img src="http://kimh.github.io/images/coin-toss-10000.png" alt="coin-toss-10000" /></p>

<p>By looking at these graphs, we can safely say that the average of dollar you win in this coin toss game is $0.5.</p>

<h2>When Average Doesn&rsquo;t Exist.</h2>

<p>Now we are entering an interesting area where the average disappears. To illustrate this, we will make the coin toss game a bit more complicated.</p>

<p>This time, you keep flipping the coin until you get head and you will get <strong>2 ^ (number of times you flip the coin)</strong>.</p>

<p>For example, if your result is tail, tail, and then head, then you get <strong>2 ^ 3</strong> (because you flipped three times) which is $8. Let&rsquo;s call this game &ldquo;coin-toss-unti-head&rdquo; game.</p>

<p>Here is a Clojure code to simulate the coin-toss-until-head game.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">exp</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="p">(</span><span class="nf">exp</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">toss-coin-until-head</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">n</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">outcome</span> <span class="p">(</span><span class="nf">toss-coin</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">toss-coin</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">exp</span> <span class="mi">2</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">do-coin-toss</span> <span class="p">[</span><span class="nv">ite</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">n</span> <span class="mi">1</span> <span class="nv">total</span> <span class="mi">0</span> <span class="nv">avg</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="nv">ite</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">map float </span><span class="nv">avg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">outcome</span> <span class="p">(</span><span class="nf">toss-coin</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">total</span> <span class="nv">outcome</span><span class="p">)</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">avg</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">total</span> <span class="nv">n</span><span class="p">))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">write-data</span> <span class="p">[</span><span class="nv">col</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">vec</span> <span class="p">(</span><span class="nf">map-indexed</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">idx</span> <span class="nv">item</span><span class="p">]</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">str </span><span class="nv">idx</span> <span class="s">&quot; &quot;</span> <span class="nv">item</span><span class="p">))</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;\n&quot;</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">header</span> <span class="s">&quot;n avg\n&quot;</span>
</span><span class='line'>        <span class="nv">file</span> <span class="s">&quot;/tmp/coin-toss-result.txt&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="nv">header</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="nv">data</span> <span class="ss">:append</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file</span> <span class="s">&quot;\n&quot;</span> <span class="ss">:append</span> <span class="nv">true</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can again run the code from REPL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">write-data</span> <span class="p">(</span><span class="nf">do-coin-toss</span> <span class="mi">10</span> <span class="nv">toss-coin-until-head</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>and plot graphs with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Rscript</span> <span class="nv">draw.R</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s begin with <strong>n=10</strong>.</p>

<p><img src="http://kimh.github.io/images/coin-toss-until-head-10.png" alt="coin-toss-until-head-10" /></p>

<p>It looks like the average is approaching to somewhere around 2.5 but we are not fully sure yet. Let&rsquo;s increase n and see if the average is really 2.5.</p>

<p>Here is the graph when n is 20 and you will probably be disappointed by looking at the graph: the average is approaching to 2.5 and  then suddenly there is a spike around <strong>n=20</strong> which pushes the average a way higher! You will also discover the pattern after <strong>n=20</strong>: the average is converging to a number but then you will see a spike shortly after the convergence.</p>

<p><img src="http://kimh.github.io/images/coin-toss-until-head-100.png" alt="coin-toss-until-head-100" /></p>

<p>Maybe we just haven&rsquo;t tossed the coin enough times. Let&rsquo;s keep going a bit further.</p>

<p>Here is the graph when n is 10000. It looks like this time the average is approaching to somewhere around 12. Did we finally discover the average?</p>

<p><img src="http://kimh.github.io/images/coin-toss-until-head-10000.png" alt="coin-toss-until-head-10000" /></p>

<p>It turns out we didn&rsquo;t! This is very clear when you increase n to 50000.</p>

<p><img src="http://kimh.github.io/images/coin-toss-until-head-50000.png" alt="coin-toss-until-head-50000" /></p>

<p>Again, there is a spike around 30000 and we lost the average again. You can increase n as much as you want and you will never find a good average in this game.</p>

<h2>Why Average Doesn&rsquo;t Exist?</h2>

<p>We can see why the average doesn&rsquo;t exist with simple math.</p>

<p>You can calculate the average of normal coin-toss game with the following formula.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">ave.</span> <span class="nb">= </span><span class="p">(</span><span class="nf">probability</span> <span class="nv">of</span> <span class="nv">H</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">$1</span> <span class="nb">+ </span><span class="p">(</span><span class="nf">probably</span> <span class="nv">of</span> <span class="nv">T</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">$0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because both the probability of getting head (H) and tail (T) is 0.5, the average of dollar you will win becomes $0.5 which is what we&rsquo;ve seen in the previous simulations.</p>

<p>Let&rsquo;s compute the average for the coin-toss-until-head game. One big difference from the normal coin toss game is that
there are infinite numbers of different results of coin in this game. The result could be <strong>T H</strong> or <strong>T T H</strong> or <strong>T T T T T T H</strong> or whatever.</p>

<p>So we need to calculate all the possibilities. You can express this with the following formula.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">ave.</span> <span class="nb">= </span><span class="p">(</span><span class="nf">probability</span> <span class="nv">of</span> <span class="nv">H</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">1</span> <span class="nb">+ </span><span class="p">(</span><span class="nf">probability</span> <span class="nv">of</span> <span class="nv">TH</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">2</span> <span class="nb">+ </span><span class="p">(</span><span class="nf">probably</span> <span class="nv">of</span> <span class="nv">TTH</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">3</span> <span class="nv">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you plugin the actual probability to the formula above, this will become the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">ave.</span> <span class="nb">= </span><span class="p">(</span><span class="mi">1</span><span class="nv">/2</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">1</span> <span class="nb">+ </span><span class="p">(</span><span class="mi">1</span><span class="nv">/2</span> <span class="nv">x</span> <span class="mi">1</span><span class="nv">/2</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">2</span> <span class="nb">+ </span><span class="p">(</span><span class="mi">1</span><span class="nv">/2</span> <span class="nv">x</span> <span class="mi">1</span><span class="nv">/2</span> <span class="nv">x</span> <span class="mi">1</span><span class="nv">/2</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="o">^</span><span class="mi">3</span> <span class="nv">......</span>
</span><span class='line'><span class="nv">ave.</span> <span class="nb">= </span><span class="mi">1</span> <span class="nb">+ </span><span class="mi">1</span> <span class="nb">+ </span><span class="mi">1</span> <span class="nv">......</span>
</span><span class='line'><span class="nv">ave.</span> <span class="nb">= </span><span class="err">∞</span> <span class="p">(</span><span class="nf">infinity</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The average that you got is ∞ (infinity). In other words, average doesn&rsquo;t exist.</p>

<p>What&rsquo;s the implication of the idea that average doesn&rsquo;t always exist in real life?</p>

<p>Another way of interpreting these graphs without average is that sometimes a super extreme event could happen. Because the impact of the event is astronomical, it skews the average and make it useless. So, if the model that you are studying is similar to the coin-toss-until-head game, you will see the same pattern. In fact, this model is often used to study extreme events such as a sudden collapse in a stock market.</p>

<h2>Summary</h2>

<p>Hopefully, you will find this interesting. Time is running out, so I&rsquo;ll stop here, but if you want to learn more, you can search &ldquo;St. Petersburg paradox&rdquo; or &ldquo;Power Laws&rdquo; to dive into the area deeper.</p>

<p>You can find code I used here at <a href="https://github.com/kimh/coin-toss">https://github.com/kimh/coin-toss</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Backend) Engineer Principles]]></title>
    <link href="http://kimh.github.io/blog/being-backend-engineer/"/>
    <updated>2017-02-08T11:44:00+09:00</updated>
    <id>http://kimh.github.io/blog/being-backend-engineer</id>
    <content type="html"><![CDATA[<h2>Security First</h2>

<p>Always remind yourself that security is the most important thing. It&rsquo;s important because the impact of security breach is more severe than anything else.</p>

<p><strong>Risks have to be measured by the impact when that happens, not how likely it happens</strong></p>

<h2>Don&rsquo;t break stuff</h2>

<p>When backend breaks, everything on top of it will also break. Always pay attention to keep the backward compatibility.</p>

<p><strong>Backward compatibility for the win</strong></p>

<h2>Don&rsquo;t merge PRs at late night</h2>

<p>You have much weaker cognitive power than you believe at late night. Merging PRs with the weak cognitive power will likely break the principles noted here.
This is also important because you can&rsquo;t test the consequence of your changes until next morning.</p>

<p><strong>Merging PRs at Friday night is a terrible thing to do</strong></p>

<h2>Never drink during working</h2>

<p>This is too obvious to be warned :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fasting: what popular beliefs were (not) true for me]]></title>
    <link href="http://kimh.github.io/blog/fasting/"/>
    <updated>2017-01-28T22:25:00+09:00</updated>
    <id>http://kimh.github.io/blog/fasting</id>
    <content type="html"><![CDATA[<p>I&rsquo;m finishing my third fasting and I thought it&rsquo;s good to write a blog about my experience with fasting. If you google fasting on the internet, there are many articles that talk about good things about fasting and I wanted to write what facts are true and not true in my experience.</p>

<p>There is also one more reason why I decided to write a blog about fasting: it seems that fasting is less common in Western societies than in Asian societies. When I talked about my experience about fasting, almost all people with Western background looked very puzzled and thought like I&rsquo;m crazy. In contrast, fasting seems more popular idea in Asia and I think it&rsquo;s probably because there is much stronger influence of Buddhism in Asian countries than in Western countries.</p>

<p>Fasting is not a crazy thing to do. It&rsquo;s a well established health management method. Hopefully, this article helps people who are not familiar with fasting to see what fasting actually looks like and get interested in fasting.</p>

<h2>My fasting experiences</h2>

<p>Different people have different experiences in fasting. It&rsquo;s very common that one effect of fasting works very well for one person but completely doesn&rsquo;t work for other person. So, I should first mention about my normal diet and fasting experiences so far.</p>

<p>I&rsquo;ve done fasting three times so far in my life. The longest fasting was four days mostly only with water.</p>

<p>I think of my self as a person who eats less than average male: I normally skip lunch and eat once or twice in a day. I don&rsquo;t eat much carbs, either. I think it&rsquo;s not inaccurate to say that I&rsquo;m not a big fan of eating. I certainly appreciate easting good food, but it&rsquo;s kind ok if I don&rsquo;t eat. This type of diet probably made it easy to start fasting. So if you are a person who loves eating, then starting fasting is a little harder.</p>

<p>Anyway, that&rsquo;s my fasting experiences and diet. Let me talk about what has happened to my body and brain during fasting.</p>

<h4>Day 1</h4>

<p>The first day of fasting is the toughest time for me, especially at night. I can&rsquo;t stop thinking of fatty food such as ramen or hamburger. During this period, I also want to drink more than usual but this is probably because of my drinking habit that I have at every night.</p>

<p>I feel a bit dull and I would say that my body is operating under 70% ~ 80% level of normal time. It&rsquo;s not that terrible but I don&rsquo;t feel very conformable, either.</p>

<p>I also felt that my brain is operating under 60% ~ 70% of normal time. I can&rsquo;t think difficult things and don&rsquo;t feel like doing something creative. I can still read books, write blogs, and learn new things but it requires a bit more focus than usual.</p>

<h4>Day 2</h4>

<p>I still can&rsquo;t stop thinking about food in the second day, but this time thoughts about sweets such as chocolate or ice cream is hunting me instead of fatty food. I think this is because of the decrease in the blood sugar level.</p>

<p>I still feel a bit dull but not much difference from the first day.</p>

<p>I feel my brain is having a harder time than the first day and things easily slip my attention. In my first fasting, I gave a small damage to my car in a parking lot in a way that I normally don&rsquo;t. My wife told me that I was totally out of it when I was trying to park my car.</p>

<p>However, it&rsquo;s interesting that I normally have a better outcome for performing a task with mental and cognitive load if I focus on the task. For example, when I was cooking, I could be into it more than usual and my dish was great. I also could have read books with more focus than usual.</p>

<h4>Day 3</h4>

<p>The third day is almost the same as the second day.</p>

<h4>Day 4</h4>

<p>The forth day is a surprising day. I almost forget that I haven&rsquo;t eaten for the last three days. I don&rsquo;t feel dull anymore and my brain works as usual.</p>

<p>I don&rsquo;t have many things to talk about in the forth day except that my body and brain are functioning almost the same as normal time. This is the point where I started seeing an illusion that I can live without eating anything. I think the attainment of the strange feeling that your body and brain work just like usual without any food is one of the interesting experiences to have during fasting.</p>

<h2>Effects that match popular beliefs</h2>

<p>Ok, so these are what happened to my body and brain during fasting. If you google fasting, people talk about many good things that happen during and after fasting. Let me talk about which one was true and which one was not in my experience.</p>

<h4>Weight loss</h4>

<p>Normally, I lose 2.5 ~ 3 kg. I haven&rsquo;t rebounded my weight, neither, but this is probably due to my diet in normal time.</p>

<h4>Skin regeneration</h4>

<p>This is one of the most significant effect of fasting for me. Before fasting, my skin was dry and a bit damaged but it gets better and better as I keep fasting. And it lasts for a few days after fasting. Although this is not a direct benefit for me (why would I care the condition of my facial skin?) I think this is a good reason try fasting if you have skin problems.</p>

<h4>Increase in the sense of taste and smell</h4>

<p>There is a dramatic increase here. I could smell food that my wife was cooking in downstairs much more strongly than normal time.</p>

<p>I also felt the taste of food more strongly than normal time during fasting. One day I drunk vegetable juice and I felt it has never been more tasty than before.</p>

<h2>Effects that do not match popular beliefs</h2>

<p>There are certain things and experiences that people bring up as effects of fasting but the followings didn&rsquo;t happen to me.</p>

<h4>Amazing recovery meals</h4>

<p>I should say that my experiences with recovery meals is not as dramatic as other people say. Recovery meals are meals that you take to go back to normal diet after fasting. They have to be easy to digest and shouldn&rsquo;t have a strong flavor. Many people talk that how amazing your recovery meals would be and they could be life-changing taste or something.</p>

<p>The first recovery meal was indeed amazing. However, the special feeling doesn&rsquo;t last very long. I didn&rsquo;t didn&rsquo;t have any special feeling even in the second recovery meal.</p>

<p>I understand effects of fasting varies among people but I personally think the effect is exaggerated to make you believe fasting is a good thing to do.</p>

<h4>Fecal impaction</h4>

<p>Many people talk fecal impaction would happen during fasting. However, this never happens to me. It may be because it needs longer period of fasting but at least it didn&rsquo;t happen with four days of fasting.</p>

<h4>Detoxing</h4>

<p>This is another thing that many people talk about as an effect of fasting, but I&rsquo;m not sure if this is true. More accurately, I don&rsquo;t have a way to measure if detoxing is happening or not. But as much as I can sense, detoxing is not happening in my body.</p>

<h4>Increased creativity and thinking power</h4>

<p>Some people say your creativity and thinking power gain during fasting. In the end, I think I could do more creative stuff than usual during fasting. What I mean by creative stuff is things such as reading books to learn new ideas, writing computer programs, and doing some deep thinking, etc. However, I don&rsquo;t think this is an direct effect of fasting. I felt my cognitive level definitely decreased. Nonetheless, I could do these creative stuff in fasting days than in normal days because I was motivated. I had some sort of determination to make fasting successful and this determination allows me to make more efforts deliberately than usual.</p>

<h4>Saving time</h4>

<p>Although this is a bit off the topic, this is one of the most interesting findings that I&rsquo;ve had during fasting. You will be surprised how much time you are spending for eating and drinking in everyday life if you stop eating. Because I don&rsquo;t need to spend time for eating, I could use the time for other things such as playing with my baby or reading books.</p>

<p>I think the realization that how much I spend time for easting was a very unique effect of fasting not talked much among people.</p>

<h2>Conclusion</h2>

<p>Is fasting interesting? Yes, it&rsquo;s very interesting. I had many experiences that I could not have in normal time.</p>

<p>Did fasting bring much benefits to me? Not really. Most of benefits disappear only in a few days after fasting. The stress of not eating during fasting certainly doesn&rsquo;t pay the benefits.</p>

<p>So, I think I&rsquo;ll continue doing fasting occasionally but not as a health management but more like conducting experiments with my own body in order to sense something that I can&rsquo;t during normal time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big ideas in 2017]]></title>
    <link href="http://kimh.github.io/blog/en/big-ideas-2017/"/>
    <updated>2017-01-09T10:22:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/big-ideas-2017</id>
    <content type="html"><![CDATA[<p>Here is a list of big ideas that I learned in 2017.</p>

<ul>
<li>Time does not exist</li>
<li>When you reach 30, there are more things NOT to do than to do</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big ideas in 2016]]></title>
    <link href="http://kimh.github.io/blog/en/big-ideas-2016/"/>
    <updated>2017-01-09T10:10:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/big-ideas-2016</id>
    <content type="html"><![CDATA[<p>It&rsquo;s already in Jan 2017 and I know it&rsquo;s too late to do retrospective for 2016 but doing late is better than not doing.
So here is a list of big ideas that I learned in 2016.</p>

<ul>
<li>How human perception is distorted and our cognitive ability is limited (from Thinking Fast and Slow)</li>
<li>Chaos theory and the impossibility of future prediction</li>
<li>Difference between simple and easy (from Rich Hickey&rsquo;s Simple Made Easy)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カオス入門]]></title>
    <link href="http://kimh.github.io/blog/chaos/"/>
    <updated>2016-12-18T22:09:00+09:00</updated>
    <id>http://kimh.github.io/blog/chaos</id>
    <content type="html"><![CDATA[<p>この記事ではカオスというアイデアをごく簡単な計算で解説します。</p>

<h2>カオスとはなにか</h2>

<p>日本語でカオスというと混乱したとかめちゃくちゃとかいうイメージを思い浮かべるかもしれませんが、数学でのカオスは予測不可能なシステムのことを意味します。例でいうと、お湯を沸騰させた時に鍋の中にできる乱流、天気の変化、お互いに干渉しあう二つの振り子の軌道、などで日常にはカオスなシステムが溢れています。</p>

<p>カオスは予測不能だと書きましたが、決してランダム（非決定的）という意味ではありません。カオスは決定的（インプットが同じであればアウトプットは予測できる）にもかかわらず実際に計算してみるとその動きは全くめちゃくちゃであたかも非決定的に見えてしまいます。決定的なのに非決定的に振る舞う：ここがカオスの不思議なところであり魅力でもあります。</p>

<p>もう一つカオスの面白いところは、そうゆうめちゃくちゃに振る舞うシステムをごく簡単な計算で再現できることです。この記事ではそれを実際にやってみてカオスを体験してもらおうと思います。</p>

<h2>カオスの特徴</h2>

<p>後でこの話には戻ってきますが、先にカオスが持つ特徴を書いておきます。主に三つあり、</p>

<ul>
<li>予測不可能</li>
<li><code>Xt+1 = F(Xt)</code></li>
<li>初期値に敏感</li>
</ul>


<p>ということが挙げられます。一つずつ説明してきます。</p>

<h3>予測不可能</h3>

<p>予測不可能は上に書いたので説明不要です。</p>

<h3><code>Xt+1 = F(Xt)</code></h3>

<p><code>Xt+1 = F(Xt)</code> という式があった時</p>

<p>tは時間を意味します。tは0から始まり、1,2,3,4&hellip;とどんどん増えていきます。なので、<code>X0</code> というと一番最初の<code>X</code>の値、<code>X1</code>というと２回目の<code>X</code>の値という意味になります。なので<code>Xt+1</code>というのは次の<code>t</code>の時の<code>X</code>の値という意味になります。F()というのは関数です。</p>

<p>ここから、<code>Xt+1 = F(Xt)</code> というのは、何か<code>F()</code>という関数があって、インプット (<code>Xt</code>)を入れて計算した値がアウトプット(<code>Xt+1</code>)になり、<code>Xt+1</code>が次のインプットになって<code>Xt+2</code>のアウトプットが作ってそれがまた、、、ということをずっと続けていけることを意味します。</p>

<h3>初期値に敏感</h3>

<p>初期値というのは<code>t</code>が0のときの値、つまり<code>X0</code>です。<code>Xt+1 = F(Xt)</code>ではアウトプットが次のインプットになるので最初の値を何にするかによって<code>t</code>が増えるに従って結果が違っていきます。</p>

<p>普通インプットが少し変わればアウトプットも少ししか変わらないと考えます。例えば、時速100kmで１時間走った場合、100km進めます。時速101kmで走ったら101km進めます。このように時速が少し増えたら距離も少ししか変わりません。これは初期値にも同じことが言えます。初期値が1の時と1.1の時では結果はちょっとしか変わらないと予想できます。</p>

<p>カオスなシステムではこれがあてはまりません。例えば、初期値が1の時の結果が153だったのに、初期値を1.001にして計算してみたら結果が303になったりします。初期値は0.001しか変わっていないのに結果は２倍以上になっています。</p>

<p>このように初期値をちょっと変えただけで、結果が全く変わってしまう、という特徴がカオスにはあります。</p>

<h3>ロジスティック写像</h3>

<p>ロジスティック写像というのは生物の個体数の変化を単純な式で表したもので一番有名なカオスの例です。他の人も似たような発見を過去にしていましたが、ロバート・メイという生物学者の研究で有名になりました。以下の簡単な式で表されます。</p>

<p><code>Xt+1 = aXt(1 - Xt); 0 &lt; x &lt; 1</code></p>

<p><code>Xt</code>、<code>Xt+1</code> はさっき説明した通りです。<code>a</code>はパラメータで<code>Xt</code>にかかわらず独立して変更できる値です。<code>t</code>は世代、<code>Xt</code>はその世代の個体数、それがインプットになり、次の世代の個体数<code>Xt+1</code>を計算するということになります。<code>a</code>はその生物の繁殖力です(一回の出産で１匹産むか、３匹産むかとか)。<code>a</code>はフィードバックとも呼ばれアウトプットがどれだけインプットに影響されるかを示します。</p>

<p>もちろん実際の生物の個体数の増減はこんな簡単な式で表せるものではありません。様々な要素に影響されるからです。この式は主に実験室の中で使われるものであり、完全に環境をコントロールできる場合個体数はこの式で予測することができます。現実では役に立たない式ですが、ロバート・メイは研究中にこの簡単な式が予測不能な動きをすることを発見して後にカオスと呼ばれるようになりました。</p>

<p>それではこのロジスティック写像でどうやってカオスを作れるか実際にやってみます。まずは初期値<code>X0</code>を0.4に固定して<code>a</code>を変えて１５世代計算した時にどのように結果が違ってくるかみてみます。</p>

<p>Clojureで書くとこんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max_iteration</span> <span class="mi">14</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">logistic</span> <span class="p">[</span><span class="nv">x_0</span> <span class="nv">feedback</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">x_t</span> <span class="nv">x_0</span> <span class="nv">iteration</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="nv">x_t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">iteration</span> <span class="nv">max_iteration</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">nil</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x_t_1</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">x_t</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">- </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">* </span><span class="nv">x_t</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">* </span><span class="nv">feedback</span><span class="p">))]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="nv">x_t_1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">iteration</span> <span class="mi">1</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>X0=0.4 a=2の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.4</span>
</span><span class='line'><span class="mf">0.48</span>
</span><span class='line'><span class="mf">0.4992</span>
</span><span class='line'><span class="mf">0.49999872</span>
</span><span class='line'><span class="mf">0.4999999999967232</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>X0=0.4 a=1+√5 (3.23606)の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.4</span>
</span><span class='line'><span class="mf">0.7766544</span>
</span><span class='line'><span class="mf">0.5613345495612088</span>
</span><span class='line'><span class="mf">0.7968411786098619</span>
</span><span class='line'><span class="mf">0.523870591428241</span>
</span><span class='line'><span class="mf">0.8071710763943982</span>
</span><span class='line'><span class="mf">0.5036795676750128</span>
</span><span class='line'><span class="mf">0.8089711862773091</span>
</span><span class='line'><span class="mf">0.5000903765874327</span>
</span><span class='line'><span class="mf">0.8090149735680964</span>
</span><span class='line'><span class="mf">0.50000280899902</span>
</span><span class='line'><span class="mf">0.809014999974466</span>
</span><span class='line'><span class="mf">0.500002756186754</span>
</span><span class='line'><span class="mf">0.8090149999754171</span>
</span><span class='line'><span class="mf">0.5000027561848518</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>X0=0.4 a=4の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.4</span>
</span><span class='line'><span class="mf">0.96</span>
</span><span class='line'><span class="mf">0.15360000000000013</span>
</span><span class='line'><span class="mf">0.5200281600000003</span>
</span><span class='line'><span class="mf">0.9983954912280576</span>
</span><span class='line'><span class="mf">0.006407737294172653</span>
</span><span class='line'><span class="mf">0.02546671278776609</span>
</span><span class='line'><span class="mf">0.09927263731020608</span>
</span><span class='line'><span class="mf">0.3576703231667294</span>
</span><span class='line'><span class="mf">0.918969052370147</span>
</span><span class='line'><span class="mf">0.297859732624244</span>
</span><span class='line'><span class="mf">0.8365572492210314</span>
</span><span class='line'><span class="mf">0.5469168719870904</span>
</span><span class='line'><span class="mf">0.9911952284917879</span>
</span><span class='line'><span class="mf">0.034908990027601214</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>a=2</code>の時結果はすぐに0.5に収束します。<code>a=1+√5</code>の時は４世代までは上がったり下がったりしたあと５世代からは0.80と0.50の間を行ったり来たりします。こうゆう繰り返しが起こるとき、振幅するといいます。<code>a=4</code>の時は全くめちゃくちゃで収束したり振幅したりする感じが全然しません。</p>

<p>これはまさに二つ目のカオスの特徴である予測不能、ということを示しています。先ほども書きましたが、<code>Xt+1 = aXt(1 - Xt)</code>の式は決定的な式なので決してランダムではありません。一つ一つ地道に計算していけば将来の値は予測できます。しかし、その見かけは全くの予測不能です。こんなに単純な式なのに、なぜ<code>a</code>を変えただけでこんなに結果が違ってしまうのか？<code>a=2</code>の時は収束したのに<code>a=4</code>の時にはなぜ結果がめちゃくちゃになってしまうのか？こうゆう疑問がカオスの魅力の一つです。</p>

<p>次に<code>X0</code>も少し変えてどうゆう結果になるか見てみます。</p>

<p><strong>X0=0.40001 a=2の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.40001</span>
</span><span class='line'><span class="mf">0.48000399979999997</span>
</span><span class='line'><span class="mf">0.4992003199520032</span>
</span><span class='line'><span class="mf">0.4999987210236417</span>
</span><span class='line'><span class="mf">0.4999999999967285</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span><span class='line'><span class="mf">0.5</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>X0=0.40001 a=1+√5 (3.23606)の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.40001</span>
</span><span class='line'><span class="mf">0.776660871796394</span>
</span><span class='line'><span class="mf">0.5613229614122776</span>
</span><span class='line'><span class="mf">0.7968457782598055</span>
</span><span class='line'><span class="mf">0.5238617545503489</span>
</span><span class='line'><span class="mf">0.8071724413804047</span>
</span><span class='line'><span class="mf">0.5036768540111918</span>
</span><span class='line'><span class="mf">0.8089712508783068</span>
</span><span class='line'><span class="mf">0.5000902474048949</span>
</span><span class='line'><span class="mf">0.8090149736436049</span>
</span><span class='line'><span class="mf">0.5000028088480044</span>
</span><span class='line'><span class="mf">0.8090149999744687</span>
</span><span class='line'><span class="mf">0.5000027561867487</span>
</span><span class='line'><span class="mf">0.8090149999754171</span>
</span><span class='line'><span class="mf">0.5000027561848518</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>X0=0.40001 a=4の時の結果</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="mf">0.40001</span>
</span><span class='line'><span class="mf">0.9600079995999999</span>
</span><span class='line'><span class="mf">0.15357056121602583</span>
</span><span class='line'><span class="mf">0.5199465757752828</span>
</span><span class='line'><span class="mf">0.9984085364593636</span>
</span><span class='line'><span class="mf">0.006355723137741059</span>
</span><span class='line'><span class="mf">0.02526131168454977</span>
</span><span class='line'><span class="mf">0.09849271126610319</span>
</span><span class='line'><span class="mf">0.3551675883742209</span>
</span><span class='line'><span class="mf">0.9160942901706436</span>
</span><span class='line'><span class="mf">0.307462166749553</span>
</span><span class='line'><span class="mf">0.8517167310688923</span>
</span><span class='line'><span class="mf">0.5051813643448498</span>
</span><span class='line'><span class="mf">0.9998926138541037</span>
</span><span class='line'><span class="mf">4.2949845644802873</span><span class="nv">E-4</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>X0</code>が0.4のときと0.40001の時の結果を見比べてみると<code>a=2</code>と<code>a=1+√5 (3.23606)</code>の時は最初の方の世代の結果が違うだけですぐに同じ値になりますが、<code>a=4</code>の時は世代が増えるにつれて結果の誤差がどんどん大きくなっていきます。たった、0.00001しか初期値を変えていないのにその結果は大きく違っています。これがカオスの３番目の特徴である初期値に敏感といういうことです。</p>

<h2>自己相違/フラクタル</h2>

<p>tが増えるにつれて、<code>a=2</code>の時は0.5に、<code>a=1+√5</code>の時は0.5と0.8へと値が定まっていくことを先ほど見ました。ある値を繰り返すようになることを周期的といい、何回で同じ値に戻ってくるかをN周期といいます。<code>a=2</code>はずっと同じ値を繰り返す、つまり１回で次の値に戻る、ので１周期です。<code>a=1+√5</code>の場合は0.8へ行ったあと0.5へ戻るので２周期です。<code>a</code>の値を変えて行ったときどのように周期が変化するのかを示したのが次のグラフで分岐ダイアグラムとか周期倍分岐といいます。</p>

<p><img src="http://kimh.github.io/images/bunki-diagram1.png" height="500" width="500" alt="bunki-diagram1" /></p>

<p>このグラフにはとても面白い特徴がいくつもあります。まず一つ目に周期の増え方は、1、2、4、8&hellip;と２のベキ上で増えていくことです。二つ目は<code>a</code>の値が3.5699456に達すると分岐がカオスになるということです。三つ目は分岐がカオスになると自己相違という特徴が現れるということです。</p>

<p>自己相違とは一部分が全体と同じ形をしているということです。マトリョーシカは自己相違のいい例です。どんなに人形が小さくなっても基本的に大きい人形と形が同じだからです。</p>

<p>自己相違は自然にたくさんあります。次の写真を見てください。私のお気に入りの本のブラックスワン(下 p162)からお借りしました。レンズのフタが地面に落ちているように見えると思います。</p>

<p><img src="http://kimh.github.io/images/surface_fractal2.jpg" height="500" width="700" alt="surface_fractal2" /></p>

<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<br>


<p>しかし実際にはもっと遠いところから見た地面の写真でした。このように地表はフラクタルの一例です。</p>

<p><img src="http://kimh.github.io/images/surface_fractal1.jpg" height="500" width="700" alt="surface_fractal1" /></p>

<p>さっきの分岐ダイアグラムもフラクタルなっています。カオスになっているところを拡大していくとつねに二股の熊手のような構造が現れます。</p>

<p>以下の写真は <a href="http://brain.cc.kogakuin.ac.jp/~kanamaru/Chaos/BifArea/">http://brain.cc.kogakuin.ac.jp/~kanamaru/Chaos/BifArea/</a> からダウンロードしたプログラムを走らせてスクリーンショットをとりました。プログラムをダウンロードして実際に拡大してみるとよくわかるので是非やってみてください。</p>

<p><img src="http://kimh.github.io/images/bunki-diagram2.png" height="500" width="500" alt="bunki-diagram2" /></p>

<p><img src="http://kimh.github.io/images/bunki-diagram3.png" height="500" width="500" alt="bunki-diagram3" /></p>

<p>このように拡大しても常に熊手の構造が現れます。従ってロジスティック写像の分岐ダイアグラムはフラクタルだと言えます。</p>

<h2>まとめ</h2>

<p>ものすごく駆け足でカオスを紹介しましたが、カオスの魅力を感じてもらえたでしょうか？私の理解もまだまだ不十分ななので間違っているところもあると思いますが、カオスの大まかなアイデアは理解してもらえたと思います。</p>

<p>私がカオスを勉強し始めて学んだ一番重要なことは未来は予測不可能で、そのことは数学的に証明されているということです。ロジスティック写像のような極めて簡単な数式がカオスになりうるなら、様々な要素が複雑に関わりあう世の中の現象は基本的にすべてカオスだからです。将来の景気や、アメリカ大統領選の結果、来年何が流行るかなどをそれっぽい説明をつけて予想する人たちがいますがそれらはすべて当てずっぽうに過ぎません。初期値がほんの少し変わっただけで結果が大きく変わってしまうカオスの性質を思い出してください。これは例えば将来の景気を予想する時に出発地点の現在の景気の計測を0.001%間違っただけでまったく違う結果になってしまうということです。これはつまり、正確な景気の計測が不可能なので、将来の景気の予測もまた不可能ということになります。</p>

<p>カオスの研究はまだまだわかっていないことが多い分野なので今後もどんどん面白い発見があることを願っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スタンディングデスクを始めようと考えている人へ]]></title>
    <link href="http://kimh.github.io/blog/jp/standing-desk-review/"/>
    <updated>2016-06-19T23:28:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/standing-desk-review</id>
    <content type="html"><![CDATA[<p>スタンディングデスクで仕事を始めてしばらく経ったのでこのあたりでレビューを書いてみようと思いました。日本ではスタンディングデスクは2016年の時点ではあまりポピュラーではないと思うので、これから始めようとしている人の参考になればと思います。</p>

<h2>スタンディングデスク導入の動機</h2>

<p>以前勤めていた会社を辞めてアメリカに本社がある今の会社に入ったのがきっかけです。日本の自宅から働くという仕事形態です。仕事を始めて２週間くらいで昔の会社に勤めていた時には感じなかった背中と腰の違和感を感じ始めました。考えてみると前の会社では会社が支給してくれたいいオフィスチェアを使っていたのですが、自宅で仕事をするようになってからは、食事をするテーブルについている椅子で仕事をしていたので体に結構負荷がかかっていることに気づきました。</p>

<p>欧米ではスタンディングデスクはかなり普及しています。自分の会社の本社でも半分以上の人がスタンディングデスクを使っています。ちゃんとしたオフィスチェアを買うこともできたけど、せっかくなので前から興味のあったスタンディングに挑戦してみることにしました。</p>

<h2>どのデスクを使うか</h2>

<p>残念ながら日本ではスタンディングデスクの選択肢はまだあまり多くはありません。あるのは電動式で高さを変更できる２０万円くらいするやつとかオーダーメイドの机とかです。なんでただの机より少し身長が高くなっただけでそんなに高価になるのか納得いきませんが、大抵の場合は電動式だからです。しかし、自分の用途では座ることはほぼないので高さの調整は重要ではありません。たまに変更するだけなら手動で全然構わないのですが、国内では手動のスタンディングは存在しませんでした。IKEAが <strong>SKARSTA</strong> を発売するまでは!</p>

<h3>IKEA SKARSTA</h3>

<p>今までは棚の上に衣装ケースをおいていましたが、机の天板が小さいのと微妙な高さの変更ができないのがネックでした。そこへIKEAが2016年に<a href="http://www.ikea.com/jp/ja/catalog/products/S79084964/">SKARSTA</a>という手動のスタンディングデスクが発売しました。まさにずっと探し求めていたものでした。</p>

<p>簡単にレビューをします。</p>

<ul>
<li><p>天板の大きさが２種類あるので注意してください。大きいほう(160x80cm)は日本のオフィスには大きすぎので小さい方(120x70cm)がいいです。</p></li>
<li><p>小さいほうなら２万円を切るので満足な価格です。</p></li>
<li><p>高さの調整は結構大変です。座った状態の高さから立った状態にするまでにかなりクランクを回さないといけません。</p></li>
<li><p>なので正直毎日座ったり立ったりを変更するのには向いてないと思います。(電動式が普及している理由)</p></li>
<li><p>力をかけてもグラグラはしません。ただ、上に重い物を置くと若干グラグラするという海外のレビューを読みました。</p></li>
</ul>


<p>購入して２週間くらい使いましたがとても気に入っていて買ってよかったと思っています。</p>

<p><strong>Before: DIYスタンディングデスク</strong></p>

<p><img src="http://kimh.github.io/images/standing-desk-before.jpg" height="640" width="360" alt="overview" /></p>

<p><strong>After: IKEA SKARSTA</strong></p>

<p><img src="http://kimh.github.io/images/standing-desk-after.jpg" height="640" width="360" alt="overview" /></p>

<p>椅子とマットについては後述します。</p>

<h2>スタンディングデスクを使ってわかったこと</h2>

<h3>最初はとても疲れるけど慣れる</h3>

<p>他の方も書いていますが始めの１週間くらいはびっくりするくらい疲れます。始めの数日は仕事中ダイレクトに疲れを感じました。その後はなんとかやっていけるけど、１日の終わりに&#8221;なんか今日は疲れたな〜。なんで？&#8221;って思ったら立って仕事をしてたことに気づく、そんな程度でした。だけど、続けているとだんだん慣れてきます。今では３時間くらいは連続で仕事をしても大丈夫です。以前は感じていた１日の終わりにどっとくる疲れもほぼ感じません。考えてみると立って仕事している人は山ほどいます。だから別に立ちながら仕事することは特別じゃないのですが、あまりに体が怠けていたみたいで慣れるまでは少し大変でした。</p>

<h3>大抵の作業はできる</h3>

<p>立ちながら難しい仕事ができるのかと思うかもしれません。プログラマーは深い集中力を要求される仕事なので自分も始めは立ちながら集中できるのか疑問に思っていました。</p>

<p>作業が要する集中力/思考力をレベル1~3で表すとします。</p>

<p><strong>レベル1</strong>
一番簡単な作業でとても慣れた作業やほとんど頭を使わない作業です。メールチェックとか書類の整理とかです。</p>

<p><strong>レベル2</strong>
日常的にやっているけど少し頭を使う仕事です。プログラマーでいうとプログラムを書く作業です。</p>

<p><strong>レベル3</strong>
100%集中したくなるような作業です。今まで考えたこと内容な問題を考えたり、短時間で正しい答えを出さないといけないような作業です。</p>

<p>スタンディングデスクで仕事をしばらくして、レベル1~2の仕事はパフォーマンスに影響なくできるようになりました。ただ、レベル3の仕事は今でも座りたくなります。人間の注意力/集中力は限られているので、問題に100％集中するには立つという作業にすらエネルギーを使いたくないのです。</p>

<h3>体力がつく</h3>

<p>足腰は座って仕事していた時よりもしっかりしたと思います。腹筋と背筋も前よりは少し筋肉がついて全体的に体は締まりました。以前はかなり猫背だったのですが、立っていると背中が張るので猫背も直りました。健康面ではほとんどいいことづくめだと思います。</p>

<p>ただ、これはスタンディングデスクのせいなのわからないのですが肩がこるようになりました。３０年間肩こりというものを経験したことがなかったのですが最近は普通にこります。もしかしたら自分の子供を抱っこしているのが原因なのかもしれませんが、どうもそれだけではないような感じがしています。</p>

<h3>でも椅子はやっぱり必要</h3>

<p>いくらスタンディングデスクに慣れても、やはり座りたい時もあります。体調が悪いときやあんまり乗り気じゃないときは、立ってやるということは仕事を始めるためのハードルを一段確実に上げます。手動で高さを調整するのはめんどうなのであんまりやりたくありません。</p>

<p>そんな時のためのバーとかで使われる高さを変えることのできる椅子を買いました。机ではなく椅子のほうの高さを変えるという発想の逆転です!安いやつで十分なので6000円くらいで買えました。どうしても立ってやりたくないときや疲れたときはとても重宝しています。</p>

<h3>いいマットはあったほうがいい</h3>

<p>床の上に素足でずっと立っていると足にかなりの負担がかかります。なのでいいマットはとても重要です。ネットで <strong><em>立ち仕事マット</em></strong> と検索すればいろいろ出ると思います。マットを使わないのであれば新品のスニーカーを履くのがいいと思います。</p>

<h2>まとめ: スタンディングはオススメ</h2>

<p>スタンディングデスクの導入を考えているならオススメします。座って仕事するよりも立ってやったほうが健康的なのは明らかで、疲れるという問題もじきに慣れるからです。</p>

<p>世の中には長時間座っても健康的にいられるような椅子が売られています。それらの椅子は以下のような考えが前提にありました。</p>

<p><strong><em>問題: 長時間座っても健康でいるためにはどうすればいい？</em></strong></p>

<p><strong><em>答え: エルゴノミクスを取り入れた椅子を作る</em></strong></p>

<p>しかしスタンディングデスクは</p>

<p><strong><em>問題: 長時間座っても健康でいるためにはどうすればいい？</em></strong></p>

<p><strong><em>答え: 座らない</em></strong></p>

<p>という考えのもと生み出されました。こいう発想は個人的にかなり好きです。</p>

<p>スタンディングデスクを使うからといって常に立っている必要はありません。たまに座りたい人には電動式をおすすめしますが、立ちメインであれば手動のやつを高さを調整できる簡易椅子で補完するのがいいです。</p>

<p>今後はスタンディングデスクが日本でも普及してもっとたくさん選択肢が出てくれればなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Btrfs で Unprivileged で Nested な LXCコンテナ]]></title>
    <link href="http://kimh.github.io/blog/buidling-btrfs-unprivileged-nested-lxc-container/"/>
    <updated>2016-01-07T01:05:00+09:00</updated>
    <id>http://kimh.github.io/blog/buidling-btrfs-unprivileged-nested-lxc-container</id>
    <content type="html"><![CDATA[<p>仕事でUnprivilegedな親LXCコンテナ上で子コンテナを動かす必要があった。つまり、コンテナの入れ子。さらにLXCのストレージバックエンドにBtrfsを使わないといけない。要件の特殊さから包括的な方法が見つからなかったので自分で書くことにした。</p>

<p><strong><em>Unprivileged LXCコンテナとは何か</em></strong></p>

<p>まずそもそもUnprivileged LXCコンテナがいまひとつ何かわかっていなかったのでまずはその理解から。</p>

<p>簡単に言うとroot権限を持っていないユーザが作成・起動したLXCコンテナのことをこう呼ぶらしい。LXCを使う場合、 <code>lxc-create</code> でコンテナを作成して <code>lxc-start</code> で起動するけど普通はこれはrootユーザじゃないといけない。
しかし、rootユーザでしてしまうとコンテナ上のrootユーザがホストのuid 0を持つことになってしまい、いくらchroot環境でコンテナが動いていたとしてもセキュリティ的によくない。これを避けるために一般ユーザでコンテナを動かして
コンテナ上のrootユーザをホストのrootじゃないユーザのuidにマッピングする。こうすればコンテナ上では変わらずrootになれるけどホストのrootとは違うので安全が確保できるというもの。</p>

<p>Unprivileged LXCを調べていると以下のようなLXCのコンフィグを必ず見ると思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lxc.id_map = u 0 100000 65536
</span><span class='line'>lxc.id_map = g 0 100000 65536</span></code></pre></td></tr></table></div></figure>


<p>このコンフィグでは uid (1行目) と gid (２行目) のマッピングを定義していてそれぞれの意味は、</p>

<ul>
<li>0: コンテナが使えるuid/gidは0から始まり</li>
<li>10000: ホスト上の uid/gid 100000から</li>
<li>65536: ホスト上の65536個のuid/gidをコンテナに割りあてる</li>
</ul>


<p>という意味。つまり、ホスト上の100000から165536までのuid/gidをコンテナのマッピングに使うよ、ということ。</p>

<p>このマッピングを定義するだけではダメで、この設定をLXCが使えるようにホスト上で設定しないとダメ。</p>

<p>設定は <code>/etc/subuid</code> と <code>/etc/subgid</code> に書く。</p>

<p><code>/etc/subuid</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant:100000:65536
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/subgid</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant:100000:65536</span></code></pre></td></tr></table></div></figure>


<p>Unprivileged LXCを使うために必須なのは実はこれだけ。</p>

<p>LXCの設定か何かで <code>--unprivileged</code> みたいに指定するのかと思うのかもしれないけどそうではない。Unprivilegedなコンテナとはあくまで一般ユーザで作成・起動したコンテナというだけ。</p>

<p><strong><em>Btrfストレージバックエンド</em></strong></p>

<p>LXCは複数のストレージバックエンドに対応している。<code>zfs</code> <code>btrfs</code> <code>dir</code> などなど。どのバックエンドを使うかは要件によると思うけど、基本は高機能なファイルシステムなbtrfsとかzfsを使う方が
パフォーマンス的にいいし使える機能とかも違ってくる。今回は仕事の関係でbtrfsを使う</p>

<p>Btrfsをストレージバックエンドに使うとは具体的にはどういうことだろう？</p>

<p>これは簡単にいうと、BtrfsでフォーマットしてマウントされたディレクトリをLXCコンテナの保存先に指定するということ。具体的なやり方は後述するけど、こんな感じ。</p>

<ul>
<li>ホストマシンに <code>/dev/sdb</code> というディスクデバイスを追加する</li>
<li><code>/dev/sdb</code> を <code>/mnt</code> にbtrfsでマウントする</li>
<li>LXCコンテナのrootfsに <code>/mnt</code> 以下のディレクトリを指定する。(Ex. <code>/mnt/box1</code>)</li>
</ul>


<p>これもUnprivilegedと同じでbtrfsを使うという設定が特にあるわけではない。コンテナの保存先をbtrfsのディレクトリに指定するだけ。詳しくは後述する。</p>

<p><strong><em>Nestedコンテナ</em></strong></p>

<p>ここまでですでにややこしいけど、さらにもう少しだけややこしくする。LXCの特徴の一つにコンテナの入れ子のサポートがある。つまり、ホストの上でコンテナ1を動かして、コンテナ1の上でコンテナ2を動かして、コンテナ2の上で、、、ということができる。</p>

<p>今回の要件は一つ目のコンテナはUnprivilegedで二つ目のコンテナはPrivilegedコンテナにする。PrivilegedといってもUnprivilegedの上で動いているのでセキュリティの問題はない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>入れ子コンテナイメージ図
</span><span class='line'>
</span><span class='line'>   ----------
</span><span class='line'>   |コンテナ2|
</span><span class='line'>   ----------
</span><span class='line'>   Privileged
</span><span class='line'>  -------------
</span><span class='line'>  |  コンテナ1 |
</span><span class='line'>  -------------
</span><span class='line'>  Unprivileged
</span><span class='line'>-----------------
</span><span class='line'>|     ホスト1    |
</span><span class='line'>-----------------
</span><span class='line'>Vagrant上のLinux VM</span></code></pre></td></tr></table></div></figure>


<p><strong><em>構築手順</em></strong></p>

<p>ここからは具体的な構築の手順を説明していく。</p>

<p><strong><em>Vagrantでホストマシンを作成</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir lxc
</span><span class='line'>$ vagrant init trusty # trustyは自分でつけた名前かもしれないけど、とにかくどのBoxでもいいのでtrusty
</span><span class='line'>$ vagrant up; vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>LXCではカーネルのバージョンがすごく大事。最近でこそ安定してきたけどマイナーバージョンが違うと壊れてて動かないというのはよくある話。vagrantで作ったtrustyのカーネルは以下だった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ uname -a
</span><span class='line'>Linux vagrant-ubuntu-trusty 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre></td></tr></table></div></figure>


<p>まずはLXCとbtrfsをインストール。</p>

<p>LXCは1.1.5を使いたいので以下のコマンドでインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y -t trusty-backports lxc
</span><span class='line'>$ vagrant@vagrant-ubuntu-trusty:~$ dpkg -l | grep lxc
</span><span class='line'>ii  liblxc1        1.1.5-0ubuntu3~ubuntu14.04.1  amd64 Linux Containers userspace tools (library)
</span><span class='line'>ii  lxc            1.1.5-0ubuntu3~ubuntu14.04.1  amd64 Linux Containers userspace tools
</span><span class='line'>ii  lxc-templates  1.1.5-0ubuntu3~ubuntu14.04.1  amd64 Linux Containers userspace tools (templates)
</span><span class='line'>ii  lxcfs          0.11-0ubuntu3~ubuntu14.04.1   amd64 FUSE based filesystem for LXC
</span><span class='line'>ii  python3-lxc    1.1.5-0ubuntu3~ubuntu14.04.1  amd64 Linux Containers userspace tools (Python 3.x bindings</span></code></pre></td></tr></table></div></figure>


<p>Btrfsもインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install btrfs-tools
</span><span class='line'>$ dpkg -l | grep btrfs
</span><span class='line'>ii  btrfs-tools 3.12-1ubuntu0.1 amd64 Checksumming Copy on Write Filesystem utilities</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Brtfs領域を作成</em></strong></p>

<p>次にLXCが使うbtrfsファイルシステムを作成する。ホストマシンに<code>/dev/sdb</code>という新しいディスクを追加してこれを<code>/mnt</code>にマウントする。</p>

<p>ディスクを追加する方法は色々ググった結果以下をVagrantファイルに書くとできた。（ストレートには行かなかった気もするけどこのあたりの説明はめんどくさいので省く。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.provider :virtualbox do |vb|
</span><span class='line'>  file_to_disk = "./tmp/disk1.vdi"
</span><span class='line'>  if not File.exist?(file_to_disk) then
</span><span class='line'>    vb.customize ["createhd",
</span><span class='line'>                  "--filename", file_to_disk,
</span><span class='line'>                  "--size", 300 * 1024]
</span><span class='line'>  end
</span><span class='line'>  vb.customize ['storageattach', :id,
</span><span class='line'>                '--storagectl', 'SATA Controller',
</span><span class='line'>                '--port', 1,
</span><span class='line'>                '--device', 0,
</span><span class='line'>                '--type', 'hdd',
</span><span class='line'>                '--medium', file_to_disk]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>無事に<code>/dev/sdb</code>を追加できたら<code>fdisk</code>で確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo fdisk -l | grep sdb
</span><span class='line'>Disk /dev/sdb doesn't contain a valid partition table
</span><span class='line'>Disk /dev/sdb: 322.1 GB, 322122547200 bytes</span></code></pre></td></tr></table></div></figure>


<p>Btrfsでフォーマットする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkfs -t btrfs /dev/sdb
</span><span class='line'>
</span><span class='line'>WARNING! - Btrfs v3.12 IS EXPERIMENTAL
</span><span class='line'>WARNING! - see http://btrfs.wiki.kernel.org before using
</span><span class='line'>
</span><span class='line'>Turning ON incompat feature 'extref': increased hardlink limit per file to 65536
</span><span class='line'>fs created label (null) on /dev/sdb
</span><span class='line'>        nodesize 16384 leafsize 16384 sectorsize 4096 size 300.00GiB
</span><span class='line'>Btrfs v3.12</span></code></pre></td></tr></table></div></figure>


<p><code>/mnt</code>にマウントする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo '/dev/sdb /mnt               btrfs   defaults 0       1' | sudo tee -a /etc/fstab
</span><span class='line'>$ sudo mount /mnt</span></code></pre></td></tr></table></div></figure>


<p>最後にvagrantユーザが書き込めるように権限を変更。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo chown vagrant:vagrant /mnt</span></code></pre></td></tr></table></div></figure>


<p>これで <code>/mnt</code> をLXCのバックエンドとして使う準備ができた。</p>

<p><strong><em>Unprivileged LXCの準備</em></strong></p>

<p>次にUnprivileged LXCを使う準備をしていく。上記で説明したようにuid/gidのマッピングの設定をする。Vagrantで作ったBoxではvagrantという一般ユーザがデフォルトなのでこのユーザでUnprivilegedコンテナを作成する。</p>

<p>上記でも書いたけど、Unprivilegedコンテナとはあくまでrootじゃないユーザで作るコンテナのこと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo 'vagrant:100000:65536' | sudo tee -a /etc/subuid
</span><span class='line'>$ echo 'vagrant:100000:65536' | sudo tee -a /etc/subgid</span></code></pre></td></tr></table></div></figure>


<p>このコマンドの意味は最初の説明をみてください。</p>

<p>次にvagrantユーザが使うLXCのコンフィグを設定する。主なファイルは <code>~/.config/lxc/default.conf</code> と <code>~/.config/lxc/lxc.conf</code>。</p>

<p><code>~/.config/lxc/default.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lxc.id_map = u 0 100000 65536
</span><span class='line'>lxc.id_map = g 0 100000 65536
</span><span class='line'>lxc.network.type = veth
</span><span class='line'>lxc.network.link = lxcbr0
</span><span class='line'>lxc.network.flags = up
</span><span class='line'>lxc.network.hwaddr = 00:16:3e:xx:xx:xx</span></code></pre></td></tr></table></div></figure>


<p><code>~/.config/lxc/lxc.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lxc.lxcpath = /mnt</span></code></pre></td></tr></table></div></figure>


<p><code>lxc.lxcpath</code> はLXCがコンテナとコンテナのコンフィグを保存する場所を指定する。今回はbtrfsでマウントしたディレクトリを使いたいので <code>/mnt</code> と指定する。</p>

<p>コンフィグがちゃんと設定されているかどうかは <code>lxc-config</code> コマンドを使ってできる。</p>

<p>確認可能なコンフィグの一覧は <code>-l</code> オプションで見れる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-config -l
</span><span class='line'>lxc.default_config
</span><span class='line'>lxc.lxcpath
</span><span class='line'>lxc.bdev.lvm.vg
</span><span class='line'>lxc.bdev.lvm.thin_pool
</span><span class='line'>lxc.bdev.zfs.root
</span><span class='line'>lxc.cgroup.use
</span><span class='line'>lxc.cgroup.pattern
</span></code></pre></td></tr></table></div></figure>


<p>LXCにはコンフィグがたくさんあるのになぜこれだけしか確認できないのかは不明。コンフィグの値を確認するには設定の名前を渡す。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-config lxc.lxcpath
</span><span class='line'>/mnt</span></code></pre></td></tr></table></div></figure>


<p>最後にもう一つ。Unprivilegedコンテナ上のrootは本当のrootではないので本来ならデバイスにアクセスできない。これで一番問題になるのはネットワークの設定。ネットワークインターフェースはコンテナから色々カスタマイズしたい
ことが普通だから。この問題の解決するために <code>lxc-user-nic</code> というツールがLXCについている。Unprivilegedコンテナ上でネットワークの操作をするために <code>/etc/lxc/lxc-usernet</code> に以下の設定を入れる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant veth lxcbr0 10</span></code></pre></td></tr></table></div></figure>


<p>このコンフィグはvagrantユーザがlxcbr0というブリッジデバイスに <code>veth</code> ネットワークインターフェイスを１０個まで作成できるという意味。</p>

<p><strong><em>コンテナの作成・起動</em></strong></p>

<p>ここまででUnprivilegedなコンテナを作成する準備は整った。以下のコマンドでコンテナをダウンロードする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-create -t download -n box1 -B btrfs -- -d ubuntu -r trusty -a amd64</span></code></pre></td></tr></table></div></figure>


<p>これで起動もできる状態になったけど今回はコンテナを入れ子にしたいので作成したコンテナのコンフィグを変更する。</p>

<p>コンンフィグは <code>/mnt/box1/config</code> にある。以下の設定を追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lxc.mount.auto = cgroup
</span><span class='line'>lxc.aa_profile = lxc-container-default-with-nesting</span></code></pre></td></tr></table></div></figure>


<p><code>lxc.mount.auto = cgroup</code>は調べてないのでよくわからない。おそらく、<code>cgroupfs</code> を自動マウントするということだけど、 <code>cgroupfs</code> が説明できるほど理解していないので省略。</p>

<p><code>lxc.aa_profile = lxc-container-default-with-nesting</code> はコンテナの入れ子をAppArmorで許可する設定。これがないと入れ子はできない。</p>

<p>これですべての準備は整った。以下のコマンドでコンテナを起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lxc-start -n box1 -d --logfile test.log --logpriority DEBUG</span></code></pre></td></tr></table></div></figure>


<p><code>--logfile test.log --logpriority DEBUG</code> はなんらかの問題でコンテナが起動できない時にデバッグで便利なので指定しておくといい。</p>

<p>自分の環境では <code>lxc-start: utils.c: setproctitle: 1455 Invalid argument - setting cmdline failed</code> というエラーが出たけど無害みたいなので無視。</p>

<p>無事に起動できたら <code>lxc-attacth</code> でログインする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-attach -n box1</span></code></pre></td></tr></table></div></figure>


<p>これでUnprivilegedコンテナを起動することができた。</p>

<p>どうやってこのコンテナがUnprivilegedコンテナだと確認できるだろうか？コンテナ内からはあくまでroot権限があるように見えるのでよくわからない。</p>

<p>一番手っ取り早いファイルはコンテナで作られたファイルのuid/gidをコンテナの中と外で確認することだと思う。試しにやって見る。</p>

<p>まずは <code>box1</code> にログインしてrootユーザーでファイルを作成して見る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch /foo</span></code></pre></td></tr></table></div></figure>


<p>そしてこのファイルを作成したユーザのuid/gidを確認してみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -ln /foo
</span><span class='line'>-rw-rw-r-- 1 0 0 0 Jan  7 08:51 /foo</span></code></pre></td></tr></table></div></figure>


<p>rootで作成したのでuid/gidは0になっている。</p>

<p>次に <code>box1</code> から抜けてホストマシン側で作成したファイルのuid/gidを確認する。コンテナのファイルシステムは <code>/mnt</code> に保存されている。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -ln /mnt/box16/rootfs/foo
</span><span class='line'>-rw-rw-r-- 1 100000 100000 0 Jan  7 08:51 /mnt/box16/rootfs/foo</span></code></pre></td></tr></table></div></figure>


<p>uid/gidが100000になっている。ちゃんと設定した通りコンテナのuid/gid 0がホスト側の100000にマッピングされているので <code>box1</code> はUnprivilegedコンテナだとわかる。</p>

<p><strong><em>コンテナの入れ子</em></strong></p>

<p>最後にもう一つの目標であるコンテナの入れ子をやって見る。つまり、<code>box1</code> にログインして <code>n1</code> という名前でさらにコンテナを起動する。</p>

<p>これをするために、少し変な感じがするけどbox1上でLXCをインストールしないといけない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ apt-get update
</span><span class='line'>$ apt-get install lxc</span></code></pre></td></tr></table></div></figure>


<p><code>n1</code> はPrivilegedなコンテナ(といってもUnprivileged上のPrivilegedなので実際にはUnprivilegedと同じ)でいいのでLXCをインストールすればすぐに作成できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-create -n n1 -t ubuntu-cloud</span></code></pre></td></tr></table></div></figure>


<p>でコンテナをダウンロードして</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lxc-start -n n1 -d</span></code></pre></td></tr></table></div></figure>


<p>で起動するだけ。問題なく起動すれば <code>n1</code> にまたログインして普通のコンテナとして使うことができるはず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment To Suspend/Resume Docker Container With CRIU 2]]></title>
    <link href="http://kimh.github.io/blog/experiment-to-suspend-and-resume-docker-container-with-criu-2/"/>
    <updated>2015-08-08T21:51:00+09:00</updated>
    <id>http://kimh.github.io/blog/experiment-to-suspend-and-resume-docker-container-with-criu-2</id>
    <content type="html"><![CDATA[<h2>TL;DR: Simple demo of docker checkpoint &amp; restore</h2>

<h4>Start container</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export cid=$(docker run -d busybox tail -f /dev/null)</span></code></pre></td></tr></table></div></figure>


<h4>Checkpoint the container</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker checkpoint $cid
</span><span class='line'>7cc692f22c11</span></code></pre></td></tr></table></div></figure>


<h4>It&rsquo;s not running anymore</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker ps --quiet
</span><span class='line'>&lt;No containers shown here&gt;</span></code></pre></td></tr></table></div></figure>


<h4>Restore the container</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker restore $cid
</span><span class='line'>7cc692f22c11</span></code></pre></td></tr></table></div></figure>


<h4>It&rsquo;s running again!!</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker ps --quiet
</span><span class='line'>7cc692f22c11</span></code></pre></td></tr></table></div></figure>


<h2>What is CR and CRIU?</h2>

<p>CR (checkpoint and restart) is a technology that saves the memory state of process into files and resume the processes from the saved state. <a href="https://github.com/xemul/criu">CRIU</a> is a tool originally developed to CR LXC containers.</p>

<p>Since Docker can run LXC containers, we should be able to CR Docker containers by using CRIU. I&rsquo;ve experimented this before and wrote <a href="http://localhost:4000/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu/">this post</a>. Unfortunately, the experiment didn&rsquo;t succeed because CRIU didn&rsquo;t support Docker very well at that moment.</p>

<p>More than a year has passed since then and CRIU team made a lots of effort to support Docker.</p>

<p>In this post, I will show you how Docker checkpoint/restore works with CRIU and why I&rsquo;m excited about it with use cases.</p>

<h2>Create CRIU vagrant box</h2>

<p>CR Docker by using CRIU is still under experiment on libcontainer project, so you need to compile docker with experimental flag enabled. Also, it&rsquo;s not fully merged into Docker, so you need to use a fork of Docker that one of developers in CRIU team created. In addition to that, you also need to compile Kernel with special kernel module enabled.</p>

<p>It&rsquo;s not very fun to do all these things, but don&rsquo;t worry! I&rsquo;ve created a Vagrant box which has done all these things and uploaded for you! You just need to download the box and run on your local machine. If you are interested in doing these things, I also put an instruction in appendix.</p>

<h3>Spin up vagrant box</h3>

<p>Assuming that the name of VM is <strong>vg-1</strong>, run the following commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add https://atlas.hashicorp.com/kimh/boxes/criu
</span><span class='line'>mkdir &lt;path to vg-1&gt;
</span><span class='line'>cd &lt;path to vg-1&gt;
</span><span class='line'>vagrant init kimh/criu
</span><span class='line'>vagrant up
</span><span class='line'>vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all you have to do to try CRIU!</p>

<h2>docker restore/checkpoint commands</h2>

<p>Docker running on <strong>vg-1</strong> is enabled experimental features and has two commands you&rsquo;ve never seen before.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker checkpoint --help
</span><span class='line'>
</span><span class='line'>Usage:  docker checkpoint [OPTIONS] CONTAINER [CONTAINER...]
</span><span class='line'>
</span><span class='line'>Checkpoint one or more running containers
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker restore --help
</span><span class='line'>
</span><span class='line'>Usage:  docker restore [OPTIONS] CONTAINER [CONTAINER...]
</span><span class='line'>
</span><span class='line'>Restore one or more checkpointed containers
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>These <code>checkpoint</code> and <code>restore</code> command use the CRIU command which I compiled and installed on the vagrant box.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@vagrant-ubuntu-trusty-64:~$ criu --help
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>  criu dump|pre-dump -t PID [&lt;options&gt;]
</span><span class='line'>  criu restore [&lt;options&gt;]
</span><span class='line'>  criu check [--ms]
</span><span class='line'>  criu exec -p PID &lt;syscall-string&gt;
</span><span class='line'>  criu page-server
</span><span class='line'>  criu service [&lt;options&gt;]
</span><span class='line'>  criu dedup
</span><span class='line'>
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a very simple example of how to CR a Docker container.</p>

<h4>Starting a container</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run \
</span><span class='line'>  --name np \
</span><span class='line'>  --rm \
</span><span class='line'>  busybox:latest \
</span><span class='line'>  /bin/sh -c \
</span><span class='line'>  'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'</span></code></pre></td></tr></table></div></figure>


<p>This command runs a number-printer container which keeps printing incremental numbers.</p>

<h4>Checkpointing a container</h4>

<p>Now, let&rsquo;s checkpoint this container. You can do this with <code>docker checkpoint</code> command. Because number-printer container is running in the foreground, do this from other terminal.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker checkpoint np</span></code></pre></td></tr></table></div></figure>


<p>Once you checkpoint the container, you will see that it stops printing numbers. <code>docker ps</code> command doesn&rsquo;t show the container anymore.</p>

<h4>Restoring a container</h4>

<p>Let&rsquo;s restore the number-printing container with <code>docker restore</code> command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker restore np</span></code></pre></td></tr></table></div></figure>


<p>If restoring succeeded, the number-printing container again started printing numbers. It&rsquo;s also back in the result of <code>docker ps</code>. We succeeded in checkpointing and restoring the container!</p>

<h2>Pause/Unpause VS Checkpoint/Restore</h2>

<p>You may say, <em>&ldquo;Wait, you can already do this with docker pause/unpause commands&rdquo;</em>.</p>

<p>That&rsquo;s right and you don&rsquo;t see a behavior difference between pause/unpause and checkpoint/restore in the previous example. Both commands stop a job of container in the middle and resume later.</p>

<p>The difference is while checkpoint/restart saves the memory state of containers into a disk while pause/unpause doesn&rsquo;t.</p>

<p>You can think of pause/unpause as sending SIGSTOP and SIGCONT to UNIX process. You can run a process in foreground and hitting Ctrl+z will stop the process. You can also restore the process with <code>fg job-id</code>.
Pause/unpause commands do the similar thing to running containers.</p>

<p>Checkpoint/restore does more complicated things. It dumps the memory state of running containers into the disk and restore the containers by reading the memory dump.</p>

<p>Because checkpoint/restore saves containers into the disk, we can do more interesting things that we cannot do with pause/unpase. We will see these interesting use cases in the next section.</p>

<h2>Use cases</h2>

<p>Here are some use cases of CR Docker containers.</p>

<h3>(1) Resuming long-running containers</h3>

<p>You sometimes want to run tasks that take very long time. For example, if you run a program that calculates digits of Pi on a Docker container, the container need to be long-running to calculate trillion digits.</p>

<p>But what if you accidentally shutdown your host machine? This will shutdown the Pi container and you will lose trillion digits that the container has calculated.</p>

<p>CRIU is a great tool to solve this problem. You can periodically checkpoint the container and be prepared for the accident. If the accident happens, you just need to restore the container and resume the calculation in the middle.</p>

<h3>(2) Speeding up slow-start containers</h3>

<p>There are applications that take very long time to start. You can speed up such containers by checkpointing the containers after slow applications started.</p>

<p>Here is an example that demonstrates this use case. Let&rsquo;s assume that redis is super slow to start (This is completely not true in reality!!).</p>

<p>We just start a redis container as usual.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cid=$(docker run -d redis)</span></code></pre></td></tr></table></div></figure>


<p>Because redis is slow to start in the world of this blog, we need to wait for 20 secs before redis is ready to accept connections. After wating 20 secs, we checkpoint the container.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker checkpoint --image-dir=/tmp/redis $cid</span></code></pre></td></tr></table></div></figure>


<p>We need to restore the redis container into a new container so that you can start multiple containers from the saved container. To do this, you need to use <strong>&mdash;force=true</strong> and pass a new container id.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis=$(docker create --name=redis-1) docker restore --force=true --image-dir=/tmp/redis-checkpoint $redis</span></code></pre></td></tr></table></div></figure>


<p>The started container is immediately ready to accept the connection without waiting 20 secs.</p>

<p>The cool thing is that you can repeat the same process to start multiple containers very fast.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in 1 2 3 4 5; do
</span><span class='line'>  cid=$(docker create --name=redis-$i redis)
</span><span class='line'>  docker restore --force=true --image-dir=/tmp/redis-checkpoint $cid
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>The above example theoretically takes 100 secs (20 sec x 5) to finish without CR. With CR, the five containers start in the blink of an eye.</p>

<h3>(3) Container migration</h3>

<p>You can do the Docker container migration with CRIU.</p>

<p>To see how this works, you need to run two vagrant VMs. You should be already running <strong>vg-1</strong>, so you need to run one more VM <strong>vg-2</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Create vg-2
</span><span class='line'>mkdir &lt;path to vg-2&gt;
</span><span class='line'>cd &lt;path to vg-2&gt;
</span><span class='line'>vagrant init kimh/criu
</span><span class='line'>vagrant up
</span><span class='line'># You need to run at least one container before doing the migration.
</span><span class='line'># Otherwise, it failed. Probably it's a bug in CRIU or Docker
</span><span class='line'>vagrant ssh -- 'docker run --name=foo -d busybox tail -f /dev/null && docker rm -f foo'</span></code></pre></td></tr></table></div></figure>


<p>Once you run the two vagrant VMs, run number-printer container on <strong>vg-1</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run \
</span><span class='line'>  -d \
</span><span class='line'>  --name np busybox:latest \
</span><span class='line'>  /bin/sh -c \
</span><span class='line'>  'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'</span></code></pre></td></tr></table></div></figure>


<p>You can see that number-printer container is keep printing number in the background.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker logs -f np
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>....</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s migrate the container to <strong>vg-2</strong>. I made a <a href="https://gist.github.com/kimh/79f7bcb195466acea39a">helper shell script</a> to do this, so you need to download it to your local machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L -o docker-migrate.sh https://gist.githubusercontent.com/kimh/79f7bcb195466acea39a/raw/370ed974599e2105d56470fade5286050e79afaf/docker-migrate.sh
</span><span class='line'>chmod +x docker-migrate.sh</span></code></pre></td></tr></table></div></figure>


<p>You need to pass three arguments to use the script.</p>

<p>The first argument is the name of the container to migrate. In our case, it&rsquo;s <strong>np</strong>.</p>

<p>The second and third arguments are path to vagrant directories that you migrate from and to.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker-migrate.sh np &lt;path to vg-1&gt; &lt;path to vg-2&gt;</span></code></pre></td></tr></table></div></figure>


<p>Once the script successfully finished, you can go to <strong>vg-2</strong> and check with <code>docker logs np</code> command. You should see that the number-printing container resumes printing numbers from the place that it&rsquo;s paused on vg-1.</p>

<p>The migration succeeded!</p>

<h2>Wrapping up</h2>

<p>We&rsquo;ve seen how to CR Docker container with CRIU and some use cases. I hope people will come up more interesting use cases and develop tools that takes the advantages of CR.</p>

<p>Here are useful resources to learn more about CR Docker with CRIU.</p>

<ul>
<li><a href="http://criu.org/Docker">Main website of CRIU</a></li>
<li><a href="https://github.com/boucher/docker/blob/cr-combined/experimental/checkpoint_restore.md">Docker fork with CRIU support</a></li>
<li><a href="http://blog.kubernetes.io/2015/07/how-did-quake-demo-from-dockercon-work.html">Demo of live migration</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressメモ]]></title>
    <link href="http://kimh.github.io/blog/octopress-memo-to-self/"/>
    <updated>2015-05-10T12:55:00+09:00</updated>
    <id>http://kimh.github.io/blog/octopress-memo-to-self</id>
    <content type="html"><![CDATA[<p><strong><em>To: ３日後には全てを忘れている自分へ</em></strong></p>

<p>今回、久しぶりにブログを書こうとしたらOctopressの仕組みを全く覚えていなくて、いろいろ回り道したせいで、ほぼ丸１日無駄にしてしまった。おそらく未来の自分はまた忘れるのだろうでここにメモをしておく。　</p>

<h3>masterとsourceブランチ</h3>

<p>ブログはGithub Pageでホスティングしている。ブログそのものは、<a href="http://kimh.github.io/">http://kimh.github.io/</a> で記事とかOctopressのコードは、<a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> で管理している。</p>

<p><a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> には <strong>master</strong> と <strong>source</strong> の二つのブランチがある。<strong>soruce</strong> にはmardkdownで書かれた記事が保存されていて、デプロイするとここから静的HTMLを生成して <strong>master</strong> にpushする。</p>

<p>今回このことを覚えていなくて時間の多くを無駄にしてしまった。というのも、新しいMacに移行した際に新しくブログのレポジトリをcloneしたんだけど、中身を見たら静的HTMLしか見当たらない。というかOctopressそのものが見当たらない。
あるのはmarkdownから生成されたと思われるhtmlファイルばっかり。「なんてこった！！！markdownで書いた記事はどこか別の場所で管理していて、それをGithubにはpushしていなかったんだ！今まで書いた記事が消失してしまった。やってもたー！！！」</p>

<p>それで、静的HTMLからmarkdownへがんばって変換して、復旧が完了した時にふと読んだOctopressの解説記事で <strong>source</strong> ブランチがあることを知った。恐る恐る <strong>source</strong> にcheckoutするとmarkdownで書かれた記事とOctopressがあるじゃないですか！</p>

<p>この発見はすごくショッキングだったけど、きっと未来の自分は忘れているんだろう。ということで、メモ。</p>

<ul>
<li><a href="https://github.com/kimh/kimh.github.io">https://github.com/kimh/kimh.github.io</a> には <strong><em>master</em></strong> と <strong><em>source</em></strong> ブランチがある。</li>
<li><strong><em>source</em></strong> にはmarkdownで書いた記事とOctopressがある</li>
<li><strong><em>master</em></strong> にはmarkdownからOctopressが生成した静的HTMLファイルがある</li>
<li><a href="http://kimh.github.io/">http://kimh.github.io/</a> は <strong><em>master</em></strong> を表示している</li>
<li>記事を編集する時は <strong><em>source</em></strong> で行う</li>
<li>というか、基本 <strong><em>master</em></strong> にcheckoutすることはない</li>
</ul>


<h3>Octopressのディレクトリ構成 (sourceブランチ)</h3>

<p>多くの時間を無駄にしてしまった原因の一つにそもそもOctopressのファイル構成を理解していなかったことがある。幸い今回の復旧作業ではそれ学ぶことができた。</p>

<p>以下は、<code>kimh.github.io</code>配下の重要ディレクトリ。</p>

<p><code>source/_posts</code>ディレクトリにはmarkdown記事が置いてある。ブログの編集作業の大半はここにあるファイルを編集することになる。</p>

<p><code>source/_includes</code>とか<code>source/_layouts</code>にはOctopressがブログサイトを構成するためのhtmlファイルが置いてある。ブログサイトそのものを変更したければここを直接いじることになる。3rd Party Themeがインストールされるのもここ（後述）</p>

<p><code>.themes</code>には3rd Party Themeを置く。置き方は、<code>git clone https://github.com/rwwaskk/linkedlist.git .themes/linkedlist</code>のようにするのが一般的な方法のよう。
<code>.themes</code>に置いたら、<code>rake install['name-of-theme']</code>でインストールできる。このコマンドを実行すると、<code>source</code>　配下にthemeが生成したHTMLやCSSやJavascriptが生成される。</p>

<h3>ブログサイトそのものに変更を加える</h3>

<p>前述したように、Octopressは<code>source</code>配下にあるファイルから静的HTMLを生成して、3rd Party Themeは<code>source</code>配下にインストールされる。しかし、時にはThemeが気に入らなくて自分で変更を加えたいこともあると思う。</p>

<p>例えば今回の復旧作業でThemeを<a href="https://github.com/rwwaskk/linkedlist">Linked List</a>インストールした状態だとブログのタイトルを site.sub_title から取得しようとしている。コードは<a href="https://github.com/rwwaskk/linkedlist/blob/master/source/_layouts/home.html#L10">linkedlist/source/_layouts/home.html</a></p>

<p>自分的にはここは site.title からとって欲しい。じゃー、どのファイルを編集するのかというと、一つは、<code>.themes/linkedlist/source/_layouts/home.html</code> 編集して、<code>rake install['name-of-theme']</code> で再インストールする。</p>

<p>もう一つは、<code>source/_layouts/home.html</code>を直接編集する。ここで一つ注意するのは、<strong>themeを再インストールするとsource/配下は全て置き換えてしまうので自分で加えた変更も上書きされてしまう。</strong></p>

<p>なので、この方法で編集した際はなんらかの理由でthemeを再インストールする時は要注意。(じゃー、やっぱりThemeのほうを変更すればよくない？と思うかもしれないけど、themeに自分の変更を加えるのはなんかおかしいと思う。この疑問は未解決。)</p>

<h3>よく使うOctopressコマンド</h3>

<p><strong><em>rake new_post[&ldquo;new-post-title&rdquo;]</em></strong></p>

<p>新しい記事を作成する。</p>

<p><strong><em>rake generate</em></strong></p>

<p><code>source</code>にあるファイルを<code>public</code>配下に静的HTMLとして生成する。</p>

<p><strong><em>rake preview</em></strong></p>

<p><a href="http://localhost:4000">http://localhost:4000</a> を立ち上げて、<code>public</code>配下をブラウザからアクセスできるようにする。</p>

<p><strong><em>rake setup_github_pages</em></strong></p>

<p>Github Pageにデプロイするために一度だけ実行しないといけない。</p>

<p><strong><em>rake deploy</em></strong></p>

<p><code>public</code>配下にあるファイルを<code>_deploy</code>ディレクトリにコピーして、<strong>master</strong> ブランチにpushする。少ししたら、ブログのurlからアクセスできるようになる。</p>

<p><strong><em>rake gen_deploy</em></strong></p>

<p>generateとdeployを一気に行う。とりあえず、deployしたい時はこれを実行しておけば問題ない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Practices of Backbone.Marionette That I believe The Best]]></title>
    <link href="http://kimh.github.io/blog/en/javascript/the-practices-of-backbone-marionette-that-i-believe-the-best-en/"/>
    <updated>2014-12-12T14:08:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/javascript/the-practices-of-backbone-marionette-that-i-believe-the-best-en</id>
    <content type="html"><![CDATA[<h1>On Marionette.Module</h1>

<h2>Dividing app into sub-modules</h2>

<p>You can create sub-modules as many as you want inside one Marionette app. I higly enoucurage to take the advantage of sub-modules.</p>

<p>You can also say that sub-module is sub-application. The easiest way to imagine is Gmail. Gmail has many features: email, chat, contacts list, etc. You can construct each component as sub-modules in Marionette.</p>

<p>Let&rsquo;s look at how we define sub-modules.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// your module code goes here //</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may wonder about parameters in callback function. This is automatically passed in this order:</p>

<ul>
<li>The module itself</li>
<li>The Application object</li>
<li>Backbone</li>
<li>Backbone.Marionette</li>
<li>jQuery</li>
<li>Underscore</li>
</ul>


<p>They are defined in local scope and only accessbile from the callback function.</p>

<p>One of the benefits of using sub-modules is you can write codes of a module into separate files with ease.</p>

<p>Let&rsquo;s say you define a <code>ShoppingCart</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// your module code goes here //</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can easily guess what the module does: it takes care everything about shopping cart feature in your app.</p>

<p>One single <code>ShoppingCart</code> module is still too big to be written in a file. So, let&rsquo;s divide them into separate files based on functionality: <code>Controller</code> and <code>View</code>.</p>

<p><strong><em>shopping_cart_controller.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// controller implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you create modules, you don&rsquo;t have to worry whether your module is already defined or not. If not defined, Marionette defines for you. So, in the previous case, <code>ShoppingCart</code> module is defined in <strong><em>shopping_cart_controller.js</em></strong> and <strong><em>shopping_cart_view.js</em></strong> just adds things to the module.</p>

<p>Maybe <code>ShoppingCart.View</code> still contains too many views to be in a single file such as <code>show_view</code> or <code>new_view</code>. You can further divide your <code>ShoppingCart</code> sub-module like this.</p>

<p><strong><em>show/shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart.View&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">View</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">View</span><span class="p">.</span><span class="nx">ShowView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// show view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>new/shopping_cart_view.js</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart.View&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">View</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">View</span><span class="p">.</span><span class="nx">NewView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// new view implementation goes here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create separate directories for <code>show</code> and <code>new</code> and put each file there. You can continue this process until you are satisfied.</p>

<p>Probalby enough words are spoken to introduce sub-modules.</p>

<p>So here is the pattern statement. <strong>Use sub-modules to seperate codes</strong></p>

<!--
Now, let's see the benifits of using sub-modules.

### Encapsulation

You can define public and private methods easily inside a module.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyApp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Application</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Defining public method</span>
</span><span class='line'>  <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">publicMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">privateMethod</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Defining private method</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">privateMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;some value&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Now other sub-modules can access public method but not private one.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">publicMethod</span><span class="p">()</span> <span class="c1">// =&gt; &quot;some value&quot;</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">privateMethod</span><span class="p">()</span> <span class="c1">// =&gt; &quot;Uncaught TypeError: undefined is not a function&quot;</span>
</span></code></pre></td></tr></table></div></figure>
&#8211;>


<h2>Starting and stopping sub-modules</h2>

<p>You can start and stop your sub-modules individually. By default, sub-modules is automatically started when Marionette parent app is started. You can change this behavior by <code>startWithParent</code> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">startWithParent</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="c1">// this doesn&#39;t start ModuleA</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">ModuleA</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span> <span class="c1">// you have to start by yourself</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this important? Because sometimes you want to execute some codes before starting other modules. Let&rsquo;s say you need to load some resources from a remote server when user enters your app and other modules are dependent on that resources.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;start&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Let&#39;s say deferredFetchihg grubs some data from remote server</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetching</span><span class="p">()).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Set data to Module1</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Module1</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Now Module1 is ready to start</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Module1</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about <code>stop()</code>? I don&rsquo;t think you need to use <code>stop()</code> unless your app is huge so that you need to pay careful attention to memory usage.</p>

<p>However, <code>stop()</code> is very useful when it comes to testing. I will cover this in the following post.</p>

<h2>Organize your files by module base</h2>

<p>There is no canonical way to organize your files in Backbone.Marionette. However, it is good to agree on a convetion for how to name and organize files in project if you are working in a team. This is the pattern that works for me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">project_root</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">application</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">small_module</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_controller</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_model</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">small_module_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>      <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>    <span class="o">|</span>              <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>              <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|---</span><span class="nx">big_module</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module_controller</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">big_module_model</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>
</span><span class='line'>           <span class="o">|---</span><span class="k">new</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">big_module_new_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template2</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|---</span><span class="nx">edit</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">big_module_edit_view</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>    <span class="o">|---</span><span class="nx">templates</span><span class="o">/</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template1</span><span class="p">.</span><span class="nx">hbs</span>
</span><span class='line'>           <span class="o">|</span>            <span class="o">|---</span><span class="nx">template2</span><span class="p">.</span><span class="nx">hbs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>application.js</code> is where you want to decalre global things of your app. This includes</p>

<ul>
<li>App initialization code</li>
<li>App starting code (Ex: <code>App.start()</code>)</li>
<li>Route definition and initilalization</li>
<li>Useful global helper (Ex: <code>App.currentUser()</code>, <code>App.showSuccessNotification()</code>)</li>
</ul>


<p>I like module-based file hierarchy.</p>

<p>In module based organization, files other than application.js goes under each module directory. If the module is big one, they are further broken down into seperate directories by action.</p>

<p>The role of each file under module direclty is self-explanatory except <code>&lt;module_name&gt;.js</code>.</p>

<p><code>&lt;module_name&gt;.js</code> is used to define basic things for the entier module. These includes:</p>

<ul>
<li>module option (Ex. <code>this.startWithParent = false</code>)</li>
<li>module initilaization (Ex. <code>addInitializer({})</code> )</li>
<li>event listener (Ex. <code>Module1.on("event", function({}))</code>)</li>
</ul>


<p>Maybe it is fair to explain <code>&lt;module_name&gt;_controller.js</code> since it does not exist in Backbone as well.</p>

<p><code>&lt;module_name&gt;_controller.js</code> holds methods that redpond to user entry to your app. One example of such method is something like <code>showItem()</code>. What <code>showItem()</code> does is that instantiate a view, fetch model, pass it to view, and call <code>render()</code> of view to display html. It is similar to what Rails ActionController does.</p>

<p>At last, you may think it is redudant to prefix every files with module name, but this makes it easy to search files by module name. Not must to have, but it is useful once your project becomes bigger where you have many <code>controller.js</code> or <code>view.js</code>.</p>

<h1>About View</h1>

<h2>Organizing DOM with ui</h2>

<p>This pattern is inspired by <a href="http://lxyuma.hatenablog.com/entry/2014/01/23/002644">the blog post</a>.</p>

<p><a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.itemview.md#organizing-ui-elements">ui</a> is simple yet very powerful feature of Marionette. You can organize view&rsquo;s DOM by using <code>ui</code>. Here is simple example. Say your have a template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;edit_form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;name_input&quot;</span><span class="nt">&gt;</span>Name
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;email_input&quot;</span><span class="nt">&gt;</span>Name
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;js-submit&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And your view code looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;#edit_form&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">nameInput</span><span class="o">:</span> <span class="s2">&quot;input.name_input&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">emailInput</span><span class="o">:</span> <span class="s2">&quot;input.email_input&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">submitButton</span><span class="o">:</span> <span class="s2">&quot;button.js-submit&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t have ui, you can access name input by using jQuery like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">myView</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input.name_input&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using <code>ui</code>, you can access this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyView</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">myView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nameInput</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference is subtle, but later one is more maintainable. Here is why.</p>

<p>Html markups are the subject of frequent changes. This is not an issue if the DOM is referenced from a single place. However, when multiple places look at a single DOM, it becomes difficult to maintain.</p>

<p>Suppose one person changes the class name of a input field from <code>name_input</code> to <code>name_field</code>. Also suppose that many codes refer the DOM by using jQuery: <code>myView.$el.find("input.name_input")</code>. Now, you have to change every codes that uses jQuery to  access the DOM. If the DOM is referenced from tests codes, these tests all suddenly break  and updating every places is the nightmare.</p>

<p><code>ui</code> solves the issue. If your codes refer the DOM by using <code>myView.ui.nameInput</code>, then the person who changes the html only needs to change <code>ui</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">nameInput</span><span class="o">:</span> <span class="s2">&quot;input.name_field&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// edited for brevity //</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the rest of codes stay the same. Huge improvement.</p>

<p>So here is the pattern statement. <strong>Avoid jQuery and always use ui to access view&rsquo;s DOM</strong></p>

<h2>Using LayoutView to create nested sub-views</h2>

<p>This pattern is inspired by <a href="http://lostechies.com/derickbailey/2012/03/22/managing-layouts-and-nested-views-with-backbone-marionette/">the blog post</a>.</p>

<p>I saw different people use different ways to create nested views in vanilla Backbone app. Marionette however provides us a nice pattern to archive this.</p>

<p>We will use Marionette <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.layoutview.md#marionettelayoutview">LayoutView</a> and <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.region.md#marionetteregion">Region</a>.</p>

<p>Let&rsquo;s take a example of creating shopping car page. The page contains two sub-views: item list view and pricing view.</p>

<p><img src="http://kimh.github.io/images/shopping_cart1.png" alt="" /></p>

<p>Here is our code that creates this shopping cart page. First we create a layout html and layout view.</p>

<p><strong>shopping_cart_layout.html</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;shopping_cart_layout&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;itemlist_region&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;price_region&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>shopping_cart_layout_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ShoppingCartLayoutView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">LayoutView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;#shopping_cart_layout&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">regions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">itemListRegion</span><span class="o">:</span> <span class="s2">&quot;#itemlist_region&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">priceListRegion</span><span class="o">:</span> <span class="s2">&quot;#price_region&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s talk briefly about what <code>LayoutView</code> is. According to <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.layoutview.md#marionettelayoutview">official doc</a>,</p>

<blockquote><p>A LayoutView is a hybrid of an ItemView and a collection of Region objects.</p></blockquote>

<p>So, it is simply extended from <code>ItemView</code> and add <code>Region</code> objects. Since it is extended from <code>ItemView</code>, you can attach template where you can speficy region container DOM. Layout can hold as many region objects as you want so they are suitable to create a parent view.</p>

<p>Now, let&rsquo;s quickly create our sub-views. The template for these views are not important at this subject so let&rsquo;s imagine we have templates for them.</p>

<p><strong>item_list_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ItemView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">ItemTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ItemListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">CollectionView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">childView</span><span class="o">:</span> <span class="nx">ItemView</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>price_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">PriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">PriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are ready to put all things together. Here is the code that renders the shopping cart page. Again, model and collection are not important at this subject, so let&rsquo;s assume we have <code>items</code> collections already.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Instantiate views</span>
</span><span class='line'><span class="nx">layoutView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCartLayoutView</span><span class="p">()</span>
</span><span class='line'><span class="nx">itemListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemListView</span><span class="p">({</span><span class="nx">collections</span><span class="o">:</span> <span class="nx">items</span><span class="p">})</span> <span class="c1">// We assume that items is the collection</span>
</span><span class='line'><span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Put them into layout regions</span>
</span><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">itemListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">itemListView</span><span class="p">);</span>
</span><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">priceview</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Marionette region provides a convenient method called <code>show()</code> where you can pass any views to be rendered. <code>el</code> property of passed views are automatically provided by region. This is the reason why you don&rsquo;t see <code>el</code> object often when using Marionette.</p>

<p>Creating further nested sub-view is easy. Let&rsquo;s say you want to divide <code>PriceListView</code> into <code>TotalPriceListView</code> and <code>SubTotalPriceListView</code>.</p>

<p><img src="http://kimh.github.io/images/shopping_cart2.png" alt="" /></p>

<p>What you have to do is extending <code>PriceListView</code> from <code>LayoutView</code> instead of <code>ItemView</code> and add region objects.</p>

<p><strong>price_view.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">PriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Layout</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// Let&#39;s assume the template has #total_price_region and #sub_total_price_region</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">PriceTpl</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">regions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">totalRegion</span><span class="o">:</span> <span class="s2">&quot;#total_price_region&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">subTotalRegion</span><span class="o">:</span> <span class="s2">&quot;#sub_total_price_region&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">totalPriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">totalPriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">subTotalPriceListView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="nx">subTotalPriceTpl</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And put them together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">()</span>
</span><span class='line'><span class="nx">totalPriceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TotalPriceListView</span><span class="p">()</span>
</span><span class='line'><span class="nx">subTotalPriceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubTotalPriceListView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">priceListView</span><span class="p">.</span><span class="nx">totalRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">totalPriceListView</span><span class="p">)</span>
</span><span class='line'><span class="nx">priceListView</span><span class="p">.</span><span class="nx">subTotalRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">subTotalPriceListView</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a piece of cake.</p>

<p>Before closing this section, let me introduce how to access views rendered inside region because you will often use it.</p>

<p>Let&rsquo;s say you want to access <code>&lt;div id="total_price"&gt;$10000&lt;/div&gt;</code> DOM to get the total price of the shopping cart from your code. In this case, you will use <code>currentView()</code> API. The code looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">totalRegion</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">totalPrice</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it&rsquo;s easy to access the value of nested sub-views.</p>

<p>So here is the pattern statement. <strong>Use LayoutView to create sub-views over simple ItemView.</strong></p>

<h1>About Controller</h1>

<p>If you come from vanilla Backbone, you are not sure what the role of Controller in Marionette. Unforunately, official doc doesn&rsquo;t help you either.</p>

<p>Quoted from <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md">here</a></p>

<blockquote><p>Its name can be a cause for confusion, as it actually has nothing to do with the popular MVC architectural pattern. Instead, it&rsquo;s better to think of the Controller as a base object from which you can build.</p>

<p>Controllers should be used when you have a task that you would like an object to be responsible for, but none of the other Marionette Classes quite make sense to do it. It&rsquo;s a base object for you to use to create a new Class altogether.</p></blockquote>

<p>This makes you further puzzled. How should I use Controller?</p>

<p>Here is how I use Controller.</p>

<h2>Use Controller as integrator</h2>

<p>This pattern is inspired by <a href="https://leanpub.com/marionette-gentle-introduction">the book</a>.</p>

<p>The role of Controller is to instantiate objects, access backend, and build complex vies: performs everything required to render a complete page in a browser.</p>

<p>Let&rsquo;s imagine that we want to render previous shopping cart page.</p>

<p><img src="http://kimh.github.io/images/shopping_cart1.png" alt="" /></p>

<p>To render the page, several things has to be done.</p>

<ul>
<li>Instantiate views (layout views, item list views, etc)</li>
<li>Retrieve items and prices (ajax call to backend server)</li>
<li>Render views (call show() method of views)</li>
<li>Error handling (when ajax call fail )</li>
</ul>


<p>I will perform these things in a single method <code>showShoppingCart()</code> and this method goes to our imaginary ShoppingCart module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">showShoppingCart</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// implementation of this methods</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the method, you write codes that perform things that I mentioned above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ShoppingCart&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ShoppingCart</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ShoppingCart</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">showShoppingCart</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Let&#39;s suppose that items and its prices are saved in backend.</span>
</span><span class='line'>            <span class="c1">// So, we need to retrive them from backend server asynchronously.</span>
</span><span class='line'>            <span class="c1">// Imaginary MyApp.request(&quot;items&quot;) and MyApp.request(&quot;price&quot;)</span>
</span><span class='line'>            <span class="c1">// returns promise object that fetches items and prices respectively.</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">fetchingItems</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;items&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">fetchingPrice</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;prices&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Instantiate a layout view that provides regions</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">layoutView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCartLayoutView</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">fetchingItems</span><span class="p">,</span> <span class="nx">fetchingPrice</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">,</span> <span class="nx">prices</span><span class="p">){</span>
</span><span class='line'>                <span class="c1">// Add callback method when ajax call is successfully done.</span>
</span><span class='line'>                <span class="c1">// First, we will build collections</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">itemList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemList</span><span class="p">([</span><span class="nx">items</span><span class="p">]);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">priceList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceList</span><span class="p">([</span><span class="nx">prices</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Now we can instantiate views and pass colletion to them</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">itemListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemListView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">itemList</span><span class="p">});</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">priceListView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PriceListView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">priceList</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// At this point we are ready to render a complete paga for user</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">itemListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">itemListView</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">priceListRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">priceListView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// We don&#39;t want user to see nasty error, so let&#39;s add error handling</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">fetchingItems</span><span class="p">,</span> <span class="nx">fetchingPrice</span><span class="p">).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// OopsView will show error message to user</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">oopsView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OopsView</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;oops, something went wrong&quot;</span><span class="p">});</span>
</span><span class='line'>                <span class="nx">layoutView</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">oopsView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above is pseudo code so it doesn&rsquo;t work, but should be easy enough to demonstrate my idea.</p>

<p>As you can see, my <code>showShoppingCart()</code> method does everthing including error handling required to show a shopping cart page to user. Now, somebody must call the method. Who will it be?</p>

<p>It is the responsibility of <code>Marionette.AppRouter</code>. Router is the first one that responds when user enters your app. It&rsquo;s job is to look at url and call Controller&rsquo;s methods. Here is how you can pass your <code>ShoppingCart.Controller</code> to router.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// First we need to define router</span>
</span><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">AppRouter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">appRoutes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;shopping_cart&quot;</span><span class="o">:</span> <span class="s2">&quot;showShoppingCart&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Instantiate controller object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shoppingCartController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ShoppingCat</span><span class="p">.</span><span class="nx">Controller</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Register controller</span>
</span><span class='line'><span class="k">new</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="nx">shoppingCartController</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if user accesses <code>/shopping_cart</code> page, router will call <code>showShoppingCart()</code> method of <code>ShoppingCat.Controller</code>.</p>

<p>There is one implicit thing involved here. The object you pass to <code>controller</code> property of router must implement the method that you define in <code>appRoutes</code> objects.</p>

<p>In this case, since you define <code>"shopping_cart": "showShoppingCart"</code> in routing, <code>shoppingCartController</code> object must implement <code>showShoppingCart()</code> method, which is exactly how we implemented our controller earlier.</p>

<p>If you have experiences with server side MVC frameworks, like RoR, then you may notice that I am using the Marionette Controller like the way I use ActionController of Rails: called by router and does everything needed to render a view. Isn&rsquo;t this contradictory to what <a href="[here](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md">official doc</a> says?</p>

<p><strong><em>Yes and no</em></strong>. Yes, because it is used by router and both performs similar tasks. No, because the role of server side Controller is providing HTTP terminal point whereas client side Controller does not do this.</p>

<p>Anyway, I am currently satisfied with the way I use Controller.</p>

<p>So here is the pattern statement. <strong>Use Controller to provide public methods to router that integrates different componetns</strong></p>

<h2>Add event listener on view inside Controller</h2>

<p>I often ask this question myself: <em>Is it ok that my View does ajax call?</em> Can you imagine what I am talking about? The View that makes ajax call looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submitForm&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">submitForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get form data somehow//</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">getFormData</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Model.save fires ajax call to remote server</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;form is submitted&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the code above does:</p>

<ul>
<li>Listens on <code>click</code> event and call <code>submitForm</code> method</li>
<li>Makes ajax call to save form data to backend server</li>
<li>Execute callbacks for ajax call</li>
</ul>


<p>This is perfectly valid code in Backbone. However, having Controller in Marionette now, I&rsquo;d rather want to push this task to Controller and let View simply listening and triggering event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;submitForm&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">submitForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;form:submit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">FormController</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">showForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">formView</span> <span class="o">=</span> <span class="nx">FormView</span><span class="p">.</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">formView</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;form:submit&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">model</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;form is submitted&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">region</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">formView</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, I simply move codes from View to Controller. What&rsquo;s the benefits of doing this? One thing is that View code gets slimed and it can focus on the mapping of DOM and event.</p>

<p>Our Controller instead gets messy but that&rsquo;s the tradeoff. After all, that&rsquo;s how Controller is designed to be used: <strong><em>put things that fit nowhere else</em></strong>.</p>

<p>It also makes sense to put codes to Controller because Controller has more accesses to other components than a view. Imagine a case where you have to access other views inside the event listener.
You can&rsquo;t access other views directly from a view. Instead, you need to use App level event publishing to archive this.</p>

<p>On the other hand, Controller has an access to everything needed to render the page so it can easily talk to other views.</p>

<p>Before, finishing this section, let me slightly imporve the code above. We will use <a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.view.md#viewtriggers">View.triggers</a>.</p>

<p>Here is the new version of View:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">FormView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">triggers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click button.submit&#39;</span><span class="o">:</span> <span class="s1">&#39;form:submit&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We removed <code>submitForm</code> method and <code>event</code> objects. Instead, we use <code>trigger</code> object that does the two thing at the same time: <em>listen on events</em> and <em>trigger events</em>. Now, our view is much cleaner than before!!</p>

<p>So here is the pattern statement. <strong>Add event listener on Views inside Controller</strong></p>

<!--
## Responsibility of MVC Components

Marionette brings consistency to your Backbone app. However, this is not enough if you are working in a team. Marionette still allows developrs to write codes whatever they want which rapidly makes your project spaghetti. It's important to understand your codes must go where. To understand this, let's clarify the role of MVC components in Marionette.

### M
The responsibility of model is clearer than other components, so I will go quickly.

#### Business logic
Just like model of server side, this is the place where you write code for business logic.

**Ex.** Calculate and return total price by adding tax to sub-total.

#### Ajax ####
When modle is mapped to external resource, it fetches resource from external servers.

#### Validation ####
Before modle is saved into exteranl database, it needs to validate data. When validation fails, it must notifies by using event. View must respond to validation event and notifies user.

### V
This is the place which easily becomes chaotic because vanilla Backbone puts much burden to View.

#### Render html
When you define View, you will speficy which template to use. Template value is fetched by a model that View holds and rendered as html document.

#### Define mapping of DOM and event
You can define what action of user for DOM elements do what in View. This is done by `events` propety. I don't want to go detail about this since implementation is not the the subject of post, but just briefly showing an example.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyView</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">ui</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">paragraph</span><span class="o">:</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">button</span><span class="o">:</span> <span class="s1">&#39;.my-button&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;click ui.button&#39;</span><span class="o">:</span> <span class="s1">&#39;clickedButton&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">clickedButton</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;I clicked the button!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

View listens on click event of `ui.button` and trigger clickedButton() event. Notice `ui` propety. This does not exist in Backbone. You can pass a object that mappes properties and jQuery DOM. You can access the DOM like this.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">MyView</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">paragraph</span>
</span></code></pre></td></tr></table></div></figure>

This is simple yet very powerful feature. I will write more about this in subsequent post.

#### Listens on Model/Collection change event
Most of Views are passed model or collection. Whenever there are changes to model/collection (Ex. setting new value to the field of model / model is removed from collection ), View responds to the event, changes its $el, and modifies its own html.

### C
Controller is loosely defined even in official doc.

Quoted from [here](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md)
> Its name can be a cause for confusion, as it actually has nothing to do with the popular MVC architectural pattern. Instead, it&#8217;s better to think of the Controller as a base object from which you can build.
>
> Controllers should be used when you have a task that you would like an object to be responsible for, but none of the other Marionette Classes quite make sense to do it. It&#8217;s a base object for you to use to create a new Class altogether.

So, as the doc says, Controller is the place where you can put things that fit nowhere else.

But, what exactly are they?

#### Executing action for router
When user enters your app, router will invoke controller actions. Let&#8217;s assume you have controller like so:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Controller</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">listItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Some codes to show item here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ModuleA</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Now you can pass your controller to `controller` property of router.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">MyApp</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ModuleA&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ModuleA</span><span class="p">,</span> <span class="nx">MyApp</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Marionette</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Controller</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ModuleA</span><span class="p">.</span><span class="nx">Router</span> <span class="o">=</span> <span class="nx">Marionette</span><span class="p">.</span><span class="nx">AppRouter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="nx">controller</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appRoutes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;items&quot;</span><span class="o">:</span> <span class="s2">&quot;listItem&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
Then when user enters your app from `/items`, router will execute `controller.listItem()` method which is defined at `ModuleA.Controller`.

So, as you can see, I am using Controller pretty much like the way I use Rails ActionController. I don&#8217;t see no reason why this is wrong even if doc says it is nothing to do with server side MVC.

#### Assemble things together
You saw how router invokes Controller methods. Now, let&#8217;s look at `listItem()` method. The method looks something like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">listItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferredFetch</span> <span class="o">=</span> <span class="nx">MyApp</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="s2">&quot;items&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">collectionView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemCollectionView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Let&#39;s assume you have Spinner class.</span>
</span><span class='line'>    <span class="c1">// This will show loading spinner until items are fetched from server.</span>
</span><span class='line'>    <span class="nx">MyApp</span><span class="p">.</span><span class="nx">mainRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="k">new</span> <span class="nx">Spinner</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetch</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">collectionView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ItemCollectionView</span><span class="p">({</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">items</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Once fetching is done, show items</span>
</span><span class='line'>        <span class="nx">MyApp</span><span class="p">.</span><span class="nx">mainRegion</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">collectionView</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">deferredFetch</span><span class="p">).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Let&#39;s assume you have OopsView.</span>
</span><span class='line'>        <span class="c1">// This will show &quot;oops, something went wrong&quot; when fethcing fails</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oopsView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OopsView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

As you can see, `listItem()` method interacts many things. It also takes care of showing loading spinner as well as error handling. This is the main responsibility of Controller. It assemble many parts defined in different modules and control the flow of action.

&#8211;>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby LotusでWeb Appを作ってみる]]></title>
    <link href="http://kimh.github.io/blog/jp/lotus/creating-web-application-with-ruby-lotus-ja/"/>
    <updated>2014-09-11T18:40:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/lotus/creating-web-application-with-ruby-lotus-ja</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/lotus.jpeg" alt="" /></p>

<p><strong><em>注意</em></strong>  この記事はIBM製のコラボレーションソフトについてのページではありません。Rubyで書かれた<a href="http://lotusrb.org/">Lotus</a>というWebフレームワークについての記事です。</p>

<h2>内容</h2>

<ul>
<li><a href="#what_is_lotus">Lotusとは何か</a></li>
<li><a href="#why_lotus_instead_of_rails">なぜRailsじゃなくLotusか</a></li>
<li><a href="#creating_one_file_application">One-fileアプリを作る</a></li>
</ul>


<p><a id="what_is_lotus"></a></p>

<h2>Lotusとは何か</h2>

<p><a href="http://lotusrb.org/">Lotus</a>は新しいRubyで書かれたWebフレームワークです。比較的少人数の<a href="https://github.com/lotus">lotusチーム</a>が開発しています。
2014年9月の時点ではまだ本番環境では使えませんが、簡単なアプリを作るには十分に動作します。</p>

<p>Lotusのプロジェクトページに書かれているスローガンを見たときに一瞬で一目惚れしました。</p>

<p>ページにはこう書いてあります。(かなり意訳です)</p>

<blockquote><p>Lotusは軽量で高速かつテストが容易なフレームワークです。Lotusはオブジェクト指向プログラミングのエッセンスを取り戻し、安定したAPI、最小限のDSLを提供してシンプルなオブジェクトに基づいたWeb開発を可能にします。</p></blockquote>

<p>このスローガンを読んだ時、探していたものはこれだと思いました。（後で詳しく説明します）ちょうど個人でやっているプロジェクトでシンプルなAPIサーバを作ろうとしていたので早速Lotusを使ってみることにしました。
まだ情報がほとんど世の中に存在しないので色々苦労しましたが、最近は少しずつ <strong><em>Lotus Way</em></strong> がわかってきたのでこの記事で紹介しようと思います。</p>

<p><a id="why_lotus_instead_of_rails"></a></p>

<h2>なぜRailsではなくLotusか</h2>

<p>最近はアプリケーションをモジュール方式で開発する機会が増えてきました。この開発方法をSOAと呼ぼうがMicroserviceと呼ぼうがなんでもいいですが、多くのプロジェクトがこの開発方式を採用するようになってきています。
<a href="https://github.com/flynn">(Fylnnはお気に入りの例です)</a></p>

<p>アプリをモジュール方式で開発する利点はいくつかあります。</p>

<ul>
<li>テストがしやすい</li>
<li>高いポータビリティ</li>
<li>再利用しやすい</li>
<li>デプロイが容易</li>
</ul>


<p>Railsを使ってこれらのことを実現するのは簡単ではありません。Railsは素晴らしいですが、フレームワークスタックは巨大で沢山の機能が最初からビルトインされています。
要するにRailsは小さいコンポーネントを沢山作るには大きすぎます。</p>

<p><a href="https://github.com/sinatra/sinatra">Sinatra</a>や<a href="https://github.com/rails-api/rails-api">rails-api</a>が使えるのでは？と思う人もいると思います。
確かにSinatraは軽量です。ただ最近個人的にはDSLよりも <strong><em>純粋なRubyのコード</em></strong> を好むようになってきました。学習コストを低く抑えれるからです。
正直rails-apiは使ったことがないのでよくわかりません。ただ、Railsがベースなのでそこまで軽量ではないのではないかと思っています。もし、知ってる人がいたら教えてください。</p>

<p><a href="https://github.com/lotus">LotusのGithubページ</a>を見ればわかりますが、Lotusは複数のコンポーネントからできているので、この中の一つだけを自分のプロジェクトで使うことも可能です。
例えば、<a href="https://github.com/lotus/router">lotus-router</a>だけを自分のRackアプリに組み込んでHTTPルーターとして使うことができます。</p>

<p>またLotusはRailsのようにフルスタックなフレームワークとして使うこともできます。LotusはRailsのいいとこ取りをしているので(例えばCoCの積極的に採用)比較的少ないコードでアプリケーションを作ることもできます。</p>

<p>つまり、LotusはSinatraのように軽量なアプリを作ることができる一方で、Railsのようにフルスタックなアプリも作ることができるということです。</p>

<p><a id="creating_one_file_application"></a></p>

<h2>One-fileアプリケーションを作る</h2>

<p>Lotusを使ってOne-fileアプリケーションを作ってみます。LotusのGithubに掲載されている<a href="https://github.com/lotus/lotus#one-file-application">one file application</a>を参考にします。</p>

<p>まずは、プロジェクト用のディレクトリを作成します。今後の説明はこのディレクトリをカレントディレクトリに設定しているいう前提で進めます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir onefileapp && cd onefileapp</span></code></pre></td></tr></table></div></figure>


<p>Lotusの公式なgemはまだ配布されていません。<a href="https://rubygems.org/gems/lotusrb">ここ</a>にありますが更新日は2014年1月となっています。最新のmasterブランチは
これよりずっと進んでいるので、ソースからインストールします。そのために、まずLotusレポジトリをクローンします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/lotus/lotus.git</span></code></pre></td></tr></table></div></figure>


<p>Gemの管理にbundlerを使います。Gemfileを作成しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle init</span></code></pre></td></tr></table></div></figure>


<p>次にGemfileを編集します。<code>&lt;your-path-to-lotus-repo&gt;</code>をクローンしてきたLotusのレポジトリのディレクトリに適宜変更してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;lotusrb&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">lotus</span><span class="o">-</span><span class="n">repo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gemをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">path</span> <span class="n">vendor</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでアプリケーションを書く準備が整いました(といっても１ファイルですが)。以下のコードを <strong><em>config.ru</em></strong> として保存してください。</p>

<p><strong><em>config.ru</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lotus&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">OneFile</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">load</span><span class="o">!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>          <span class="s2">&quot;Hello, Lotus&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存したらアプリを起動してみましょう。最新のmasterブランチには <code>lotus server</code> コマンドがあるのでこれを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<p>起動できましたか？それではブラウザで <a href="http://localhost:2300">http://localhost:2300</a> にアクセスしてみてください。 <code>Hello, Lotus</code> と表示されるはずです。</p>

<p>コードの説明をします。</p>

<p>まず、最初に気づくことは<code>Controllers</code>と<code>Views</code>モジュール内で定義されているクラスは継承を使っていないということです。
Lotusの哲学の一つに<code>モジュールをインクルードして最小限のインターフェースを実装する</code>というものがあります。
この哲学は開発者に本当に必要なものだけをMixinして使うことを推奨します。</p>

<p>次に<code>Application</code>クラスを見てみましょう。今回の例ではこのクラスはルートの設定をしているだけです。
<code>get '/', to: 'home#index'</code>とすることで<code>GET /</code>のルートは<code>Home::Index</code>コントローラを使うように設定しています。
今回はひとつだけしかルートを設定していませんが他のHTTPメソッドも同じように設定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span>   <span class="s1">&#39;/books&#39;</span><span class="p">,</span>             <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#create&#39;</span>
</span><span class='line'>  <span class="n">put</span>    <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#update&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#destroy&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ワンライナーレスポンス</span>
</span><span class='line'>  <span class="n">get</span>    <span class="s1">&#39;/ping&#39;</span><span class="p">,</span>              <span class="ss">to</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span><span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s1">&#39;pong&#39;</span><span class="o">]]</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に<code>Controllers</code>を見てみましょう。<code>action</code>を呼んでいる以外は何もしていません。</p>

<p><code>action</code>とは何でしょうか？<code>action</code>はHTTPリクエストのエンドポイントとして動き、ここでリクエストの中身を見たりレスポンスを生成したりします。
リクエストに対するビジネスロジックもここに書きます。多分、<code>action</code>はRailsのControllerとほとんど同じものだと考えていいと思います。
ここでは先ほどみたルートから呼び出される<code>Index</code> actionを定義しています。</p>

<p>最後に<code>Views</code>を見ましょう。このクラスの仕事はRailsのViewとは異なります。
RailsではViewはブラウザでレンダリングされるコンテンツを吐き出すコードを書く場所でした。Lotusではこれは<code>Template</code>で行います。(今回の例ではTemplateはでてきません)</p>

<p>LotusではViewはPresenterレイヤーとして動きます。RailsではPresenterは標準ではありません。(Draperなどのgemで使えるようになります)
Presenterの仕事はデータをControllerから受け取って抽象化してTemplateに見せることです。
このようにすることでコンテンツ描画コードをクリーンに保つことができるので最近では有名なデザインパターンです。</p>

<p>コードの説明に戻ります。ここでは<code>render</code>メソッドを実装して<code>Hello, Lotus</code>というメッセージを表示しています。</p>

<p>この例はあまり面白くないですね。ViewとControllerを連携させてデータのやりとりをさせてみましょう。</p>

<p>Controllerのコードを以下のように編集します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>    <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:time</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>２つ新しいメソッドが出てきました。<code>expose</code>と<code>call</code>です。</p>

<p>ControllerからViewにデータを渡すには、exposeを使って明示的に公開する変数を指定しないといけません。
これも<code>本当に必要なものだけを使う</code>というLotusの哲学の現れです。</p>

<p> <code>call</code>はHTTPリクエストのエントリーポイントとして動きます。さっきも少し触れたようにこの中にビジネスロジックやレスポンス生成のコードを書きます。</p>

<p>ViewをControllerからデータを受け取るように変更しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>        <span class="s2">&quot;Current time: </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controllerが<code>@time</code>を<code>expose</code>で公開しているので、Viewはこのデータに<code>time</code>変数経由でアクセスすることができます。</p>

<p>アプリケーションを再起動してください。ブラウザで同じページにアクセスすると<code>Current time: 2014-09-11 23:18:30 +0900</code>のように表示されるはずです。</p>

<h2>まとめ</h2>

<p>LotusでWebアプリを書くのはとても簡単だということがわかってもらえたでしょうか？</p>

<p>ええ、あなたの心の声が聞こえてきますよ。<em>この例は単純すぎて全然実用的ではないじゃないか</em> という声が、、、</p>

<p>確かにその通りです。ですが、それは次の記事で紹介させてください。本当はFull stackアプリケーションに作り方まで紹介する予定だったのですが
この記事を書くのに予想より手間取ってしまいました。</p>

<p>次の記事は、<strong><em>Ruby LotusでフルスタックWeb Appを作ってみる</em></strong> みたな感じになる予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Web Application with Ruby Lotus]]></title>
    <link href="http://kimh.github.io/blog/en/lotus/creating-web-application-with-ruby-lotus/"/>
    <updated>2014-09-11T18:40:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/lotus/creating-web-application-with-ruby-lotus</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/lotus.jpeg" alt="" /></p>

<p><strong><em>WARNING</em></strong>  This is not your article if you are looking for information about the collaboration software made by IBM.
Instead, this article is about <a href="http://lotusrb.org/">Lotus</a>, a new web framework written in Ruby.</p>

<h2>Contents</h2>

<ul>
<li><a href="#what_is_lotus">What is Lotus</a></li>
<li><a href="#why_lotus_instead_of_rails">Why Lotus instead of Rails</a></li>
<li><a href="#creating_one_file_application">Creating one file aplication</a></li>
</ul>


<p><a id="what_is_lotus"></a></p>

<h2>What is Lotus</h2>

<p><a href="http://lotusrb.org/">Lotus</a> is a web framework that is being developed by relatively small team of <a href="https://github.com/lotus">lotus team</a>.
You can use Lotus and build a complete MVC web application just like Rails.
Lotus is still under active development and not production ready as of Sep, 2014, but you can definitely use it to create a web application.</p>

<p>I fell in love with Lotus at first sight of the mission that Lotus tries to archive in the project page.</p>

<p>The page reads</p>

<blockquote><p>Lotus is lightweight, fast and testable. It aims to bring back Object Oriented Programming to web development, leveraging on a stable API, a minimal DSL, and plain objects.</p></blockquote>

<p>I felt this is what I was looking for (explained more later) and decided to use Lotus to create a small API server in my private project.
Since there are not much documentation and information about Lotus in the wild yet, I sometimes had a hard time to figure out how to use it.
But, I am recently getting used to the <strong><em>Lotus way</em></strong> so I&rsquo;d like to share them in this and subsequent posts.</p>

<p><a id="why_lotus_instead_of_rails"></a></p>

<h2>Why Lotus instead of Rails</h2>

<p>Recent applications are built in modular way more than ever before.
Whether you call this type of application architecture SOA or microservices,
it is true that many recent great projects <a href="https://github.com/flynn">(my favorite example is Fylnn)</a> are taking this design approach.</p>

<p>There are a few major benefits of taking this approach</p>

<ul>
<li>more testability</li>
<li>more portability</li>
<li>more reusability</li>
<li>easier deployment</li>
</ul>


<p>You will realize that it is not easy to accomplish all of these with Rails.
Rails is definitely great, but the framework stack is huge and lots of things are built in. After all, Rails is a big framework, so not a good option if you want to create lots of small components.</p>

<p>You may think there are small frameworks such as <a href="https://github.com/sinatra/sinatra">Sinatra</a> or <a href="https://github.com/rails-api/rails-api">rails-api</a>.
Yes, Sinatra is lightweight, but I recently prefer to <strong><em>pure ruby code</em></strong> than DSL because it gives me steep learning curve (meaning easy to learn).
To be honest, I never tried rails-api by myself, but I am suspicious that it is lightweight because the base is still Rails. Let me know if you have different opinions.</p>

<p>As you can tell from <a href="https://github.com/lotus">Lotus github page</a>, it is made of many components. You can easily bring one of components into your application.
For example, you can just grab <a href="https://github.com/lotus/router">lotus-router</a> and mixin to your Rack application to handle http request.</p>

<p>Although, Lotus is made modular way, you can still use it as fullstack web-framework with relatively small amount of codes.
Apparently, Lotus steals many good designs from Rails such as CoC and that allows you to build applications easy.</p>

<p>So, my point in this section is this: <strong>Lotus is flexible but easy to use, so why not give it a shot?</strong></p>

<p>Hopefully, this article helps you starting Lotus.</p>

<p><a id="creating_one_file_application"></a></p>

<h2>Creating one file application</h2>

<p>Let&rsquo;s make our first Lotus application. We will follow the example of <a href="https://github.com/lotus/lotus#one-file-application">one file application</a>.</p>

<p>First, create a project directory. I am assuming that you set your current directory to this directory in the subsequent instructions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir onefileapp && cd onefileapp</span></code></pre></td></tr></table></div></figure>


<p>Lotus does not publish official gem as far as I know. There is <a href="https://rubygems.org/gems/lotusrb">one</a> here but the last update was on Jan, 2014.
Current master branch is far ahead of this release. So, clone the Lotus project in order to install from source.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/lotus/lotus.git</span></code></pre></td></tr></table></div></figure>


<p>We need bundler to manage gem dependancy. Let&rsquo;s create a Gemfile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle init</span></code></pre></td></tr></table></div></figure>


<p>Edit your Gemfile. Change <code>&lt;your-path-to-lotus-repo&gt;</code> to the directory where you clone Lotus repo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;lotusrb&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">lotus</span><span class="o">-</span><span class="n">repo</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then install gems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span> <span class="o">--</span><span class="n">path</span> <span class="n">vendor</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can start writing our application which is just one file. Save below codes as <strong><em>config.ru</em></strong>.</p>

<p><strong><em>config.ru</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lotus&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">OneFile</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">load</span><span class="o">!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>          <span class="s2">&quot;Hello, Lotus&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can run the app with rackup command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<p>Successfully run? Then, access <a href="http://localhost:2300">http://localhost:2300</a> from your browser. You should see <code>Hello, Lotus</code>.</p>

<p>Let me explain what is doing.</p>

<p>First, you will notice that classes inside <code>Controllers</code> and <code>Views</code> modules not using inheritance.
One important philosophy of Lotus is this:<code>include a module and implement a minimal interface.</code>
This philosophy encourages developers to use only what you need with mixin.</p>

<p>Now let&rsquo;s look at <code>Application</code> class. In our application, the class only configures routes.
We use <code>get</code> method to configure a route for http <code>GET /</code> method that uses <code>Home::Index</code> controller.
Here we only configure <code>get</code> http method, but you can configure other methods easily such as these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">routes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">post</span>   <span class="s1">&#39;/books&#39;</span><span class="p">,</span>             <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#create&#39;</span>
</span><span class='line'>  <span class="n">put</span>    <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#update&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/books/:id&#39;</span><span class="p">,</span>         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;book#destroy&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># You can also define one liner response</span>
</span><span class='line'>  <span class="n">get</span>    <span class="s1">&#39;/ping&#39;</span><span class="p">,</span>              <span class="ss">to</span><span class="p">:</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span> <span class="p">{</span><span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s1">&#39;pong&#39;</span><span class="o">]]</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s look at <code>Controllers</code>. We are not doing anything but defining <code>action</code>.
What is <code>action</code>? <code>action</code> is the HTTP endpoint where you can handle incoming request and creating response.
This is also the place where you can implement your business logic. I think it is safe to think that the responsibility of Lotus action is very similar to Rails controller.
We define <code>Index</code> action so that we can use it from our router code that we looked at previously.</p>

<p>Last thing to look at is <code>Views</code>. The responsibility of the class is not the same as the Rails view class.
In Rails, you write codes that is actually rendered by browser (if html format) in view. This is done by <code>Template</code> in Lotus which I don&rsquo;t cover in this post.
In Lotus, the responsibility of view is more like of presenter which does not come with Rails by default (you can use gems such as Draper to implement presetation layer in Rails, too.)
What presenter does is receiving data from controller and abstracts them to template layer.
In this way, your template layer gets clean and can focus on redning content.</p>

<p>Let&rsquo;s go back to our code. Here we define <code>render</code> method and simply print <code>Hello, Lotus</code> message.</p>

<p>This is neither interesting nor useful. We will make view to interact with controller by via data.</p>

<p>Let&rsquo;s modify your controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Controllers</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>    <span class="n">action</span> <span class="s1">&#39;Index&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:time</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we see two new things <code>expose</code> and <code>call</code>.</p>

<p>To pass data from controller to view, you need to manually expose what you want to pass.
Again, here you see Lotus philosophy: <code>only use what you need</code>.</p>

<p><code>call</code> is the entry point of http request. As I mentioned earlier, you can write business logic as well as response handling codes here.</p>

<p>Let&rsquo;s modify your view to get data from the controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Home</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Index</span>
</span><span class='line'>      <span class="kp">include</span> <span class="ss">OneFile</span><span class="p">:</span><span class="ss">:View</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>        <span class="s2">&quot;Current time: </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since our controller exposes <code>@time</code>, you can access the data via <code>time</code> from your view.
Now, restart your Rack process and access from your browser. Now you should see something like this: <code>Current time: 2014-09-11 23:18:30 +0900</code></p>

<h2>Wrap up</h2>

<p>Did you see it is quite easy to write Lotus application?</p>

<p>Ok, I can hear your voice: <em>this example is too simple. I want to see real Lotus application.</em></p>

<p>Yes, let me do that in the next post. I thought I can do that in the same post, but writing this takes more time than I thought&hellip;</p>

<p>Next post will be something like this: <strong><em>Creating Full Stack Web Application with Lotus</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRIUを使ってDockerコンテナの停止/再開に挑戦]]></title>
    <link href="http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp/"/>
    <updated>2014-06-22T21:18:00+09:00</updated>
    <id>http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/criu.jpeg" alt="" /></p>

<h3>結論: 2014/6の時点ではCRIUを使ってDockerコンテナの停止/再開はできないという少し残念な結果でこの記事は終わります。しかし、記事を読んでもらえればCRIUの面白さはわかってもらえると思います。</h3>

<p>Dockerが急速に広まったことで、LXCがVMWareやXenなどのVMに対して持つ利点はとても明確になりました。</p>

<p>しかし、VMにあってLXCにはない機能が一つあります。それは、コンテナの停止/再開によるコンテナの状態の保存です。</p>

<p>ここで<a href="http://criu.org/Main_Page">CRIU</a>の出番です。</p>

<p>CRIUはいわゆるCR(checkpoint/restart)ツールです。走っているプロセスを途中で止めてファイルに保存して、いつでも途中からプロセスを再開することができます。</p>

<p>LXCコンテナはプロセスなので、CRIUを使えばコンテナの停止/再開ができそうな気がしますが、本当にできるでしょうか？</p>

<p>この記事では、CRIUをインストールしてDockerコンテナの停止/再開ができるかどうか試してみます。</p>

<h2>CRIUをインスールする</h2>

<h3>カーネルを再構築する</h3>

<p>CRIUを動かすためには、CRIUが必要とするカーネルパラメータが有効になったカーネルを使わないといけません。今回はVagrat UbuntuをLXCのホストマシンとして使うのですが、既存のVagrant Boxで必要なカーネルパラメータが有効になっているものはなさそうでした。</p>

<p>なので、まずはカーネルの再構築から始めないといけません。カーネルの再構築と言うと敷居が高そうですが、実際はとても簡単です。</p>

<p>今回は<a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">公式Ubuntu14.04 cloud image</a>を使います。</p>

<p>まずは、このボックスを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</span><span class='line'><span class="nv">$ </span>vagrant init ubuntu14.04
</span></code></pre></td></tr></table></div></figure>


<p> <code>vagrant up</code> コマンドを打つ前に、CPUとメモリーを増やしましょう。遅いマシンだと再構築にはとても時間がかかります。2コア、2048Mのメモリがあれば大丈夫だと思います。</p>

<p> <code>Vagrantfile</code> をエディタで開いて、以下を追加してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config.vm.provider :virtualbox <span class="k">do</span> |vb|
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--memory&quot;</span>, <span class="s2">&quot;2048&quot;</span><span class="o">]</span>
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--cpus&quot;</span>, 2<span class="o">]</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>終わったら、<code>vagrant up &amp;&amp; vagrant ssh</code>してログインしてください。rootユーザになって再構築に必要なパッケージをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get -y update
</span><span class='line'><span class="nv">$ </span>apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、<code>/usr/src/linux-source-&lt;kernel version&gt;</code> というディレクトリが作成されているはずです。そのディレクトリに移動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/src/linux-source-&lt;kernel version&gt;
</span><span class='line'><span class="nv">$ </span>tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ./linux-source-&lt;kernel version&gt;
</span></code></pre></td></tr></table></div></figure>


<p>次はカーネルのコンフィグファイルが必要になります。</p>

<p>gistにアップロードしたのを使ってもらえれば、自分でコンフィグをする必要はありません。以下のコマンドを入力してください。(カレントディレクトリをKernelのソースを展開したディレクトリに変更しておくのを忘れずに)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</span></code></pre></td></tr></table></div></figure>


<p>もし、CRIUを動かすためにどのオプションが必要か知りたい場合は<a href="http://criu.org/Installation#Kernel_configuration">ここ</a>にリストがあります。</p>

<p> <code>.config</code>ファイルを準備したら、再構築の準備完了です。</p>

<p><strong>もう一度確認してください。CPUとメモリは増やしましたか？もししていないと、とても長い時間待たされることになります。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>C
</span><span class='line'><span class="nv">$ </span>make-kpkg clean
</span><span class='line'><span class="nv">$ CONCURRENCY_LEVEL</span><span class="o">=</span>4 make-kpkg --rootcmd fakeroot --initrd --revision<span class="o">=</span><span class="sb">`</span>date +%Y%m%d<span class="sb">`</span> kernel_image kernel_headers
</span></code></pre></td></tr></table></div></figure>


<p>ビルドが完了したら、<code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> と <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> というファイルが <code>/usr/src/</code> ディレクトリに作成された思います。</p>

<p>さっそくインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure>


<p>再起動したらCRIUが使えるカーネルで動いているはずです。</p>

<h3>CRIUをソースからコンパイルする</h3>

<p>次はCRIUをインストールします。Ubuntuは最新のパッケージを用意していないので、自分でソースからコンパイルしないといけません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install bsdmainutils build-essential libprotobuf-c0-dev linux-headers-generic protobuf-c-compiler
</span><span class='line'><span class="nv">$ </span>mkdir /src
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /src
</span><span class='line'><span class="nv">$ </span>curl http://download.openvz.org/criu/criu-1.3-rc2.tar.bz2 | tar -jxf-
</span><span class='line'><span class="nv">$ </span>make -C criu-1.3-rc2/
</span><span class='line'><span class="nv">$ </span>cp criu-1.3-rc2/criu /usr/local/sbin/
</span></code></pre></td></tr></table></div></figure>


<p>これでCRIUのインストールは完了です。ちゃんとインストールされているか確認しましょう。CRIUにはそのためのコマンドがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu check --ms
</span><span class='line'>Warn  <span class="o">(</span>tun.c:55<span class="o">)</span>: Skipping tun support check
</span><span class='line'>Warn  <span class="o">(</span>cr-check.c:259<span class="o">)</span>: Skipping mnt_id support check
</span><span class='line'>Looks good.
</span></code></pre></td></tr></table></div></figure>


<p> <code>Looks good.</code>が表示されましたか？いくつか警告がでますが、無視して構いません。</p>

<p>コンテナに対して使う前に、まずは普通のプロセスを停止/再開してみましょう。以下の例は<a href="http://criu.org/Simple_loop">CRIUのHOWTOページ</a>からです。</p>

<p>まず、ただループするだけのスクリプトを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat &gt; test.sh <span class="s">&lt;&lt;-EOF</span>
</span><span class='line'><span class="s">#!/bin/sh</span>
</span><span class='line'><span class="s">while true; do</span>
</span><span class='line'><span class="s"> date</span>
</span><span class='line'><span class="s"> sleep 1</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>chmod +x test.sh
</span><span class='line'><span class="nv">$ </span>./test.sh
</span></code></pre></td></tr></table></div></figure>


<p>プロセスを停止するには<code>criu dump</code>コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># criuを実行するためにはrootじゃないといけない</span>
</span><span class='line'><span class="nv">$ </span>sudo -s
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pgrep -f test.sh<span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span>mkdir /tmp/test
</span><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/test --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>もし、ダンプが成功したら<code>/tmp/test</code>ディレクトリ配下に沢山のファイルができているはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls /tmp/test
</span><span class='line'>cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
</span><span class='line'>core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
</span><span class='line'>core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
</span><span class='line'>creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
</span><span class='line'>creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
</span><span class='line'>eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
</span><span class='line'>eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
</span><span class='line'>eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
</span><span class='line'>ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</span></code></pre></td></tr></table></div></figure>


<p>今度はプロセスを再開してみましょう。<code>criu restore</code>コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu restore -t <span class="nv">$PID</span> --images-dir /tmp/test  --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>プロセスが問題なく再開されたら<code>test.sh</code>が<code>date</code>コマンドの出力をターミナルに出すはずです。</p>

<h2>CRIUでコンテナを停止/再開してみる</h2>

<p>ここまでは大丈夫ですか？では、いよいよDockerコンテナに使ってみましょう。DockerはこのVagrantにはインストールされていないので、まずインストールしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install docker.io jq
</span><span class='line'><span class="nv">$ </span>ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;$acomplete -F _docker docker&#39;</span> /etc/bash_completion.d/docker.io
</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、簡単なコマンドをコンテナに実行させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -t -i ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>コンテナを停止するにはプロセスIDを知る必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ ID</span><span class="o">=</span><span class="sb">`</span>docker ps -l -q<span class="sb">`</span>
</span><span class='line'><span class="nv">$ PID</span><span class="o">=</span><span class="sb">`</span>docker inspect <span class="nv">$ID</span> | jq <span class="s1">&#39;.[0].State.Pid&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>いよいよ、苦労が報われる時です。コンテナを停止してみましょう！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/docker
</span><span class='line'>Error <span class="o">(</span>mount.c:449<span class="o">)</span>: 102:./dev/console doesn<span class="err">&#39;</span>t have a proper root mount
</span><span class='line'>Error <span class="o">(</span>cr-dump.c:1882<span class="o">)</span>: Dumping FAILED.
</span></code></pre></td></tr></table></div></figure>


<p>あれ？CRIUはエラーを吐いてしまいました。ダンプに失敗したようです。エラーメッセージをGoogleで調べてみると、以下のスレッドを見つけました。</p>

<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>ガーン。どうやら、現状のCRIUではLXCのの停止/再開はできないみたいです。でも、<a href="http://criu.org/LXC">ここのページ</a>にはCRIUを使ってLXCを停止/再開する方法が書かれていますよ。Dockerは内部でLXCを使っているので動くはずじゃ、、、</p>

<p>以下は同じスレッドに書かれていました。</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>要するに、CRIUはcgroupsを2014/06の時点ではサポートしていないらしいです。でも、Dockerが使っているLXCのテンプレートはcgroupsを使っているようです。よって、CRIUではDockerコンテナの停止/再開はできないみたいです。</p>

<p>残念な結果です。。。</p>

<h2>結論</h2>

<p>今回の実験で、CRIU v1.3ではDockerコンテナの停止/再開はできないことがわかりました。CRIUがまだcgroupsに対応していないからです。</p>

<p>今回は少し残念な結果になってしまいましたが、ここまで読んでもらえた方にはCRIUの可能性がわかってもらえたかと思います。</p>

<p>CRIUがLXCのエコシステムにもたらす将来の可能性に対して、このプロジェクトの認知度はとても低いです。この記事を読んでくださった方は、今すぐ<a href="https://github.com/xemul/criu">Github</a>でスターしてウォッチしましょう！このブログでもこれから色々CRIUについて書いて行きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment To Suspend/Resume Docker Container With CRIU]]></title>
    <link href="http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu/"/>
    <updated>2014-06-22T01:08:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu</id>
    <content type="html"><![CDATA[<p><img src="http://kimh.github.io/images/criu.jpeg" alt="" /></p>

<h3>TL;DR: You CANNOT suspend/resume Docker container as of Jun 2014 and this article ends with a bit disappointed result, but you can still find CRIU is cool thing.</h3>

<p>With the rapid emergence of Docker, everybody knows many advantages of using LXC over virtual machines like VMWare or Xen.</p>

<p>However, there is one thing that LXC is missing: suspend/resume containers.</p>

<p>This is where <a href="http://criu.org/Main_Page">CRIU</a> comes in.</p>

<p>CRIU is so called CR (checkpoint/restart) tool. It suspends a running process and save the memory state into files which can be resumed at anytime.</p>

<p>And since LXC container is a process, we should be able to suspend/resume containers. But does it really work?</p>

<p>In this article, we will install CRIU and see whether we can suspend/resume a Docker container.</p>

<p><strong>Note:</strong>
You may say that LXC already has <a href="http://lxc.sourceforge.net/man/lxc-checkpoint.html">C/R feature</a>. My impression with the tool is not good from the past experience. So, I really didn&rsquo;t try this time.</p>

<h2>Installing CRIU</h2>

<h3>Building Kernel</h3>

<p>To get the fully functional CRIU, you need to have a kernel with certain options are enabled. We use Vagrant box as LXC host machine, but I couldn&rsquo;t find a box with kernel that meets the requirement of CRIU.</p>

<p>So, we need to rebeild kernel. Don&rsquo;t worry, building kernel is not difficult as it sounds.</p>

<p>We will use <a href="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box">official Ubuntu14.04 cloud image</a>.</p>

<p>First you need to add the box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</span><span class='line'><span class="nv">$ </span>vagrant init ubuntu14.04
</span></code></pre></td></tr></table></div></figure>


<p>Before hit <code>vagrant up</code> command, let&rsquo;s increase CPU cores and memory of the box. Otherwise, it takes a few hours to build kernel. It really depends, but 2 cores with 2048M RAM would be enough.</p>

<p>Open <code>Vagrantfile</code> and add the following lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config.vm.provider :virtualbox <span class="k">do</span> |vb|
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--memory&quot;</span>, <span class="s2">&quot;2048&quot;</span><span class="o">]</span>
</span><span class='line'>  vb.customize <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span>, :id, <span class="s2">&quot;--cpus&quot;</span>, 2<span class="o">]</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Once you increase cpu and memory, do <code>vagrant up &amp;&amp; vagrant ssh</code> and ssh into the box. Become root user and install necessary packages to rebuild kernel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get -y update
</span><span class='line'><span class="nv">$ </span>apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc
</span></code></pre></td></tr></table></div></figure>


<p>After installing these, you should have <code>/usr/src/linux-source-&lt;kernel version&gt;</code> directory. Go into the directory and untar the source files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/src/linux-source-&lt;kernel version&gt;
</span><span class='line'><span class="nv">$ </span>tar xvjf linux-source-&lt;kernel version&gt;.tar.bz2
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ./linux-source-&lt;kernel version&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to prepare a kernel configuration <em>.config</em> file which enables certain options for CRIU.</p>

<p>I uploaded the one to save your time into gist. Just run this command. (Make sure to change current directory to kernel source directory where you just untared.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know which kernel options should be enabled, the list is <a href="http://criu.org/Installation#Kernel_configuration">here</a>.</p>

<p>Once you put <code>.config</code> file, you are ready to build kernel.</p>

<p><strong>Once again, make sure you increased cpu and memory in the previous seteps before start building kernel.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">LC_CTYPE</span><span class="o">=</span>C
</span><span class='line'><span class="nv">$ </span>make-kpkg clean
</span><span class='line'><span class="nv">$ CONCURRENCY_LEVEL</span><span class="o">=</span>4 make-kpkg --rootcmd fakeroot --initrd --revision<span class="o">=</span><span class="sb">`</span>date +%Y%m%d<span class="sb">`</span> kernel_image kernel_headers
</span></code></pre></td></tr></table></div></figure>


<p>Once the kernel build is done, you should have <code>linux-headers-&lt;kernel version&gt;_amd64.deb</code> and <code>linux-image-&lt;kernel version&gt;_amd64.deb</code> under <code>/usr/src/</code> directory.</p>

<p>Now, let&rsquo;s install them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>dpkg -i linux-headers-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>dpkg -i linux-image-&lt;kernel version&gt;_amd64.deb
</span><span class='line'><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure>


<p>Done! Now You are running the kernel that works well with CRIU.</p>

<h3>Compile CRIU from source</h3>

<p>Let&rsquo;s install CRIU now. Ubuntu doesn&rsquo;t provide up-to-date debian package of CRIU, so we need to build from source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install git bsdmainutils build-essential libprotobuf-dev libprotobuf-c0-dev protobuf-c-compiler protobuf-compiler python-protobuf xmlto asciidoc
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/xemul/criu
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>criu/
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Now CRIU is installed. Let&rsquo;s try if it works. CRIU provides a command for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu check --ms
</span><span class='line'>Warn  <span class="o">(</span>tun.c:55<span class="o">)</span>: Skipping tun support check
</span><span class='line'>Warn  <span class="o">(</span>cr-check.c:259<span class="o">)</span>: Skipping mnt_id support check
</span><span class='line'>Looks good.
</span></code></pre></td></tr></table></div></figure>


<p>Did you get <code>Looks good.</code> message? You may get some warnings, but you can ignore them.
Before doing our experiment with containers, let&rsquo;s checkpoint and restore normal Linux process with CRIU. The example comes from <a href="http://criu.org/Simple_loop">one of CRIU HOWTO pages</a>.</p>

<p>First, we need to create a simple loop script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat &gt; test.sh <span class="s">&lt;&lt;-EOF</span>
</span><span class='line'><span class="s">#!/bin/sh</span>
</span><span class='line'><span class="s">while true; do</span>
</span><span class='line'><span class="s"> date</span>
</span><span class='line'><span class="s"> sleep 1</span>
</span><span class='line'><span class="s">done</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>chmod +x test.sh
</span><span class='line'><span class="nv">$ </span>./test.sh
</span></code></pre></td></tr></table></div></figure>


<p>We can suspend with <code>criu dump</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Need to be root to run criu</span>
</span><span class='line'><span class="nv">$ </span>sudo -s
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PID</span><span class="o">=</span><span class="sb">`</span>pgrep -f test.sh<span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span>mkdir /tmp/test
</span><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/test --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>If the dump succeeds, you should have many files under <code>/tmp/test</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls /tmp/test
</span><span class='line'>cgroup.img         fanotify-mark.img   fs-4898.img     netlinksk.img     pstree.img         signalfd.img
</span><span class='line'>core-4521.img      fanotify.img        ids-4521.img    ns-files.img      reg-files.img      sk-queues.img
</span><span class='line'>core-4898.img      fdinfo-2.img        ids-4898.img    packetsk.img      remap-fpath.img    stats-dump
</span><span class='line'>creds-4521.img     fdinfo-3.img        inetsk.img      pagemap-4521.img  sigacts-4521.img   tty-info.img
</span><span class='line'>creds-4898.img     fifo-data.img       inotify-wd.img  pagemap-4898.img  sigacts-4898.img   tty.img
</span><span class='line'>eventfd.img        fifo.img            inotify.img     pages-1.img       signal-p-4521.img  tunfile.img
</span><span class='line'>eventpoll-tfd.img  filelocks-4521.img  inventory.img   pages-2.img       signal-p-4898.img  unixsk.img
</span><span class='line'>eventpoll.img      filelocks-4898.img  mm-4521.img     pipes-data.img    signal-s-4521.img
</span><span class='line'>ext-files.img      fs-4521.img         mm-4898.img     pipes.img         signal-s-4898.img
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s resume the process with <code>criu restore</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu restore -t <span class="nv">$PID</span> --images-dir /tmp/test  --shell-job
</span></code></pre></td></tr></table></div></figure>


<p>If the process is successfully resumed, <code>test.sh</code> starts printing the output of <code>date</code> command to your terminal.</p>

<h2>Trying CRIU with containers</h2>

<p>So far so good? Now, we will try to suspend and resume Docker containers. Docker is not installed on your vagrant box, so let&rsquo;s install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>apt-get install docker.io jq
</span><span class='line'><span class="nv">$ </span>ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span><span class='line'><span class="nv">$ </span>sed -i <span class="s1">&#39;$acomplete -F _docker docker&#39;</span> /etc/bash_completion.d/docker.io
</span></code></pre></td></tr></table></div></figure>


<p>And run a Ubuntu container executing a simple command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run -t -i ubuntu /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>To suspend the container, we need to know the pid of the container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ ID</span><span class="o">=</span><span class="sb">`</span>docker ps -l -q<span class="sb">`</span>
</span><span class='line'><span class="nv">$ PID</span><span class="o">=</span><span class="sb">`</span>docker inspect <span class="nv">$ID</span> | jq <span class="s1">&#39;.[0].State.Pid&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, our long journey is almost done. Let&rsquo;s suspend the container!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>criu dump -t <span class="nv">$PID</span> --images-dir /tmp/docker
</span><span class='line'>Error <span class="o">(</span>mount.c:449<span class="o">)</span>: 102:./dev/console doesn<span class="err">&#39;</span>t have a proper root mount
</span><span class='line'>Error <span class="o">(</span>cr-dump.c:1882<span class="o">)</span>: Dumping FAILED.
</span></code></pre></td></tr></table></div></figure>


<p>CRIU said dumping failed. After googling the error message, I found this discussion.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>That&rsquo;s container&rsquo;s console which is a bind mounted tty from
the host. And since this is an external connection, CRIU doesn&rsquo;t dump one.</p></blockquote>

<p>What?! But, <a href="http://criu.org/LXC">this page</a> says CRIU supports LXC checkpoint/restart. Docker uses LXC under the hood, so how come it doesn&rsquo;t work?</p>

<p>In the same thread of the discussion, I also found this.</p>

<p><a href="https://lists.linuxcontainers.org/pipermail/lxc-devel/2013-November/006326.html">[lxc-devel] [CRIU] LXC live migrate</a></p>

<blockquote><p>AFAIK cgroups are used <em>inside</em> containers only with recent guest templates.
In OpenVZ we use more old ones (and more stable) so haven&rsquo;t meet this yet.
And yes, cgroups are in plans for the nearest future :)</p></blockquote>

<p>So, it seems CRIU does not support cgroup at the time of writing this (Jun 2014). However Docker uses LXC template that uses cgroups. Therefore, CRIU doesn&rsquo;t work with Docker containers.</p>

<p>Sigh&hellip;</p>

<h2>Conclusion</h2>

<p>With this experiment, I found that we cannot checkpoint/resume Docker container with CRIU v1.3 because it does not support cgroups.</p>

<p>The result turned out to be a bit disappointed. However, I&rsquo;m sure now you know that CRIU is extremely exciting project.</p>

<p>In contrast to its potential impact to LXC ecosystem, I believe the project is not receiving enough attention, so give a star and start watching their <a href="https://github.com/xemul/criu">Github repo</a> now!! I will definitely cover more things about CRIU on this blog, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(WIP) Ruby To Go: How can I do X in Ruby with Go? (Part I)]]></title>
    <link href="http://kimh.github.io/blog/en/go/how-can-i-do-x-in-ruby-with-go-part-1/"/>
    <updated>2014-05-16T23:39:00+09:00</updated>
    <id>http://kimh.github.io/blog/en/go/how-can-i-do-x-in-ruby-with-go-part-1</id>
    <content type="html"><![CDATA[<p>I am a programmer who can write decent Ruby and some Javascript.</p>

<p>These two languages were all I know. I wanted to add Go to my list of programming language, so I started learning Go.</p>

<p>It&rsquo;s boring to read programming books to study programming languages, so I decided to learn Go by porting some programs written in Ruby.</p>

<p>While I was porting Ruby program to Go, I came to think it is useful if there is a cheatsheet that I can loop up in order to convert idiomatic Ruby code to Go.</p>

<p>Ruby and Go are totally different language, so sometimes it is impossible to simply translate Ruby code to Go.
However, it is possible in most cases to write Go code that is sematically equivalant to Ruby code.</p>

<p>So, here is a <strong><em>How can I do X in Ruby with Go?</em></strong> cheetsheet.</p>

<p>I hope you find it useful.</p>

<h2>Contents of this artcile</h2>

<h3>Array and Enumerable Operation</h3>

<ul>
<li><a href="#create_array">Create array</a></li>
<li><a href="#append_an_element_to_array">Append element to array</a></li>
<li><a href="#concatenate_arrays">Concatenate arrays</a></li>
<li><a href="#create_multi_dimension_aray">Create multi dimension array</a></li>
<li><a href="#create_empty_array">Create empty array</a></li>
<li><a href="#iterate_on_an_array">Iterate on array</a></li>
<li><a href="#looping_n_times">Looping N times</a></li>
<li><a href="#clone_array">Clone array</a></li>
<li><a href="#accessing_elements_of_an_array_by_range">Accessing elements of array by range</a></li>
<li><a href="#compare_array">Compare array</a></li>
<li><a href="#check_if_array_includes_an_element">Check if array includes an element</a></li>
</ul>


<h3>Method Definition</h3>

<ul>
<li><a href="#define_a_method_with_optional_parameter">Define a method with optional parameter</a></li>
<li><a href="#define_a_method_with_variable_length_argument">Define a method with variable length arugment</a></li>
</ul>


<h3>MathematicOperation</h3>

<ul>
<li><a href="#modular_of_negative_number">Modular of negative number</a></li>
</ul>


<h3>Misc</h3>

<ul>
<li><a href="#nil_checking">Nil checking</a></li>
<li><a href="#checking_the_class">Checking the class</a></li>
</ul>


<p><a id="array_and_enumerable_operation"></a></p>

<h2>Array and Enumerable Operation</h2>

<p>Array is very powerful data structure and enumerable is probably the most frequently used object in Ruby.</p>

<p>In Go, we have two different enumerable data structures: <strong>array</strong> and <strong>slice</strong>.
I don&rsquo;t write about details about them since it is not the goal of this post, but array is low-level data structure that slice refers to.</p>

<p><a id="create_array"></a></p>

<h3>Create array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">fruits</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;grape&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;grape&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of Go, <code>numbers</code> and <code>words</code> are <strong>slice</strong>, not <strong>array</strong>. Array is primitive data structure, not frequently used in Go code.
If you want to archive similar things to Ruby array, slice should work for you.</p>

<p><a id="append_an_element_to_array"></a></p>

<h3>Append an element to array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers</span><span class="p">.</span><span class="nb">append</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>append</strong> adds elements to slice and <strong><em>return new slice</em></strong>. Therefore, you have to reassign to itself.</p>

<p><a id="concatenate_arrays"></a></p>

<h3>Concatenate arrays</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers1</span> <span class="o">=</span> <span class="n">numbers1</span> <span class="o">+</span> <span class="n">numbers2</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers2</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span> <span class="nx">numbers2</span><span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>...</code> suffix on the slice indicates that it should be passed as the variadic argument, expanded as each <code>int</code> elements inside <code>append</code>.
Thus, this is equivalent to below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">numbers1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="create_multi_dimension_aray"></a></p>

<h3>Create multi dimension array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">multi_array</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">mul</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">=</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="create_empty_array"></a></p>

<h3>Create empty array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="p">[]</span><span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>When slice is declared, but not initialised, the slice points to an array of size 0.</p>

<p><a id="iterate_on_an_array"></a></p>

<h3>Iterate on array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">numbets</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">num</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numbers</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to access the index while iterating over the slice, replace <code>_</code> with other variable, for example, <code>i</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numbers</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;index: &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="s">&quot;number: &quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="looping_n_times"></a></p>

<h3>Looping N times</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">num</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">num</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">num</span> <span class="p">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="nx">num</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="clone_array"></a></p>

<h3>Clone array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="n">old_array</span><span class="o">.</span><span class="n">clone</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">new_array</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">old_array</span><span class="p">))</span>
</span><span class='line'><span class="nb">copy</span><span class="p">(</span><span class="nx">new_array</span><span class="p">,</span> <span class="nx">old_array</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="accessing_elements_of_an_array_by_range"></a></p>

<h3>Accessing elements of array by range</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span><span class="o">=[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ary</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
</span><span class='line'><span class="nx">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, with <code>from:to</code>, <code>to</code> is the index where to end <strong>but not including the index itself</strong>.</p>

<p><a id="compare_array"></a></p>

<h3>Compare array</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">ary1</span> <span class="o">==</span> <span class="n">ary2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Same array&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">same</span> <span class="o">:=</span> <span class="kc">true</span>
</span><span class='line'><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elm</span><span class="o">:=</span> <span class="k">range</span> <span class="nx">ary1</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="nx">ary2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">r</span> <span class="p">{</span> <span class="nx">same</span> <span class="p">=</span> <span class="kc">false</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">same</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Same slice&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You cannot compare slice in Go. You will get <code>slice can only be compared to nil</code> error if you try to do that.</p>

<p><a id="check_if_array_includes_an_element"></a></p>

<h3>Check if array includes an element</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fruits</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="s2">&quot;banana&quot;</span><span class="p">,</span> <span class="s2">&quot;grape&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">fruits</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;apple&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;include!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">include</span> <span class="o">:=</span> <span class="kc">false</span>
</span><span class='line'><span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;grape&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">elm</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">fruits</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">elm</span> <span class="o">==</span> <span class="s">&quot;apple&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">include</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">include</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;include!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Method Definition</h2>

<p>There are two things that are equivalant to Ruby&rsquo;s method in Go: <strong>method</strong> and <strong>function</strong>.
Method is a type of function but requires specific receiver.</p>

<p><a id="define_a_method_with_optional_parameter"></a></p>

<h3>Define a method with optional parameter</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s2">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">word</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<p>This is not possbile in Go. Go does not support optional parameter in function or method definition.
One workaround is using struct.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">greetingArg</span> <span class="kd">struct</span> <span class="p">{</span> <span class="nx">word</span> <span class="kt">string</span> <span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">greeting</span><span class="p">(</span><span class="nx">opt</span> <span class="nx">greetingArg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">word</span> <span class="o">:=</span> <span class="nx">opt</span><span class="p">.</span><span class="nx">word</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">word</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">greeting</span><span class="p">(</span><span class="nx">greetingArg</span><span class="p">{})</span>
</span><span class='line'><span class="nx">greeting</span><span class="p">(</span><span class="nx">greetingArg</span><span class="p">{</span><span class="s">&quot;bye!&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="define_a_method_with_variable_length_argument"></a></p>

<h3>Define a method with variable length argument</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">arg</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">arg</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arg</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Prinln</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mathematic Operation</h2>

<p><a id="modular_of_negative_number"></a></p>

<h3>Modular of negative number</h3>

<p>Both Ruby and Go supports modular of negative number. However, their behavior is different.</p>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span> <span class="p">=&gt;</span> <span class="o">-</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go follows <strong><em>truncated toward zero</em></strong> for the division of negative number.</p>

<p>If you want to get the same value that Ruby returns, here is how to do this.</p>

<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">divider</span> <span class="o">:=</span> <span class="mi">3</span>
</span><span class='line'><span class="nx">mod</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">5</span> <span class="o">%</span> <span class="nx">divider</span>
</span><span class='line'><span class="k">if</span> <span class="nx">mod</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mod</span> <span class="p">=</span> <span class="nx">mod</span> <span class="o">+</span> <span class="nx">divider</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that values returnd by Ruby and Go are both mathematically correct. It&rsquo;s just there are two ways to define negative modulo.</p>

<h2>Misc</h2>

<p><a id="nil_checking"></a></p>

<h3>Nil checking</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">val</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;val is nil&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="kt">string</span>
</span><span class='line'><span class="k">if</span> <span class="nx">str</span> <span class="o">==</span><span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;str is empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="kt">int</span>
</span><span class='line'><span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;i is zero&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you declear a variable without intialization, the variable is set to zero value for its type.
Below is default zero value for primitive types.</p>

<table>
<thead>
<tr>
<th></th>
<th> Type </th>
<th align="center"> Value </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> string </td>
<td align="center"> <strong>&lsquo;&rsquo;</strong></td>
</tr>
<tr>
<td></td>
<td> int    </td>
<td align="center"> <strong>0</strong></td>
</tr>
<tr>
<td></td>
<td> float  </td>
<td align="center"> <strong>0.0</strong></td>
</tr>
<tr>
<td></td>
<td> boolean </td>
<td align="center"> <strong>false</strong></td>
</tr>
<tr>
<td></td>
<td> pointer </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> interface </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> slice </td>
<td align="center"> <strong>nil</strong></td>
</tr>
<tr>
<td></td>
<td> map </td>
<td align="center"> <strong>nil</strong></td>
</tr>
</tbody>
</table>


<p><a id="checking_the_class"></a></p>

<h3>Checking the class</h3>

<p><strong><em>Ruby:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">class</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Go:</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;reflect&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">TypeOf</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
